from synch import *

def Stack(l):
  # return an empty stack with maximum size l
  result = {

    # EVERYTHING HERE HAS TO DO WITH Monitor:
    .mutex: Lock()
    .push_cond: Condition(),
    .pop_cond: Condition(),
    .valid_cond: Condition(),

    # EVERYTHING HERE HAS TO DO WITH STACK:
    .stack: [],
    .size: 0, # how do we make sure the max size is l
    .max_size: l, # capture maxSize parameter
    .valid: 0,#+1 to this when '(' and -1 when ')'
    .ever_negative: False, #whenever pushing, check after if valid is negative and if so make True
    .problem_index: -1
  }


def push(s, c):
    #aquire logic
    acquire(?s->mutex)
    while s->size >= s->max_size:
      wait(?s->push_cond, ?s->mutex)
    #push to stack
    s.stack = list.append(s.stack, c)
    # update stack auxillary variables
    s.size += 1
    if c == "(":
        s.valid += 1
    elif c == ")":
        s.valid -= 1
    if valid < 0 and (not s.ever_negative):
        s.ever_negative = True
        s.problem_index = (s.size-1)
        
    #release logic
    notify(?s->pop_cond)
    if s.size == s.max_size:
        notify(?s->valid_cond)
    release(?s->mutex)


def pop(s):
    #aquire lock
    acquire(?s->mutex)
    while s->size <= 0:
        wait(?s->pop_cond, ?s->mutex)

    #pop logic
    let rev = list.reversed(s.stack):
            c = list.head(rev)
            result = c
            s.stack = list.reversed(list.tail(rev))
    # update stack auxillary variables
    s.size -= 1
    if c == "(":
        s.valid -= 1
    elif c == ")":
        s.valid += 1
    if s.size == s.problem_index:
        s.problem_index = -1
        s.ever_negative = False
    #release lock
    notify(?s->push_cond)
    release(?s->mutex)

def validate(s):
  # wait until stack !s is full, then check if its valid
  acquire(?s->mutex)
  while s->size != s->max_size:
      wait(?s->valid_cond, ?s->mutex)
  # BEGIN validation logic
  result = (s.ever_negative == false and s.valid == 0)
  # END validation logic
  release(?s->mutex)
