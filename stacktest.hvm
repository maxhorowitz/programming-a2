{
  "labels": {
    "__end__": 679
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Jump", "pc": "52" },
    { "op": "Frame", "name": "subseq", "args": "(s, b, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "b" },
    { "op": "DelVar", "value": "b" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "x" },
    { "op": "JumpCond", "pc": "25", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "Jump", "pc": "14" },
    { "op": "DelVar", "value": "s" },
    { "op": "DelVar", "value": "x" },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "52" },
    { "op": "Frame", "name": "append", "args": "(s, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "52" },
    { "op": "Frame", "name": "head", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "pc", "value": "55" } },
    { "op": "Builtin", "value": "list$tail" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "tail", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "2" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "sum", "args": "a" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "87", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "result" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "78" },
    { "op": "DelVar", "value": "v" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "set", "args": "a" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu71" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "106", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu71" },
    { "op": "DelVar", "value": "$accu71" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu71" },
    { "op": "Jump", "pc": "97" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu71" },
    { "op": "DelVar", "value": "$accu71" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "list", "args": "a" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu87" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "128", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu87" },
    { "op": "DelVar", "value": "$accu87" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu87" },
    { "op": "Jump", "pc": "119" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu87" },
    { "op": "DelVar", "value": "$accu87" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "values", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu103" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "_", "value": "v" },
    { "op": "DelVar", "value": "_" },
    { "op": "JumpCond", "pc": "151", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu103" },
    { "op": "DelVar", "value": "$accu103" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu103" },
    { "op": "Jump", "pc": "141" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu103" },
    { "op": "DelVar", "value": "$accu103" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "items", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu119" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "k", "value": "v" },
    { "op": "JumpCond", "pc": "178", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu119" },
    { "op": "DelVar", "value": "$accu119" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "k" },
    { "op": "DelVar", "value": "k" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu119" },
    { "op": "Jump", "pc": "164" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu119" },
    { "op": "DelVar", "value": "$accu119" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "qsort", "args": "a" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "195", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "265" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "pc", "value": "44" } },
    { "op": "LoadVar", "value": "a" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "55" } },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "(pivot, rest)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu156" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "224", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "210", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu156" },
    { "op": "DelVar", "value": "$accu156" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu156" },
    { "op": "Jump", "pc": "210" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu156" },
    { "op": "DelVar", "value": "$accu156" },
    { "op": "StoreVar", "value": "lower" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu173" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "DelVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "247", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": ">=" },
    { "op": "JumpCond", "pc": "233", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu173" },
    { "op": "DelVar", "value": "$accu173" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu173" },
    { "op": "Jump", "pc": "233" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu173" },
    { "op": "DelVar", "value": "$accu173" },
    { "op": "StoreVar", "value": "higher" },
    { "op": "Push", "value": { "type": "pc", "value": "185" } },
    { "op": "LoadVar", "value": "lower" },
    { "op": "DelVar", "value": "lower" },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "DelVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "185" } },
    { "op": "LoadVar", "value": "higher" },
    { "op": "DelVar", "value": "higher" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "sorted", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "185" } },
    { "op": "Push", "value": { "type": "pc", "value": "112" } },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Apply" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "reversed", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "StoreVar", "value": "n" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu216" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "302", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu216" },
    { "op": "DelVar", "value": "$accu216" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "n" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu216" },
    { "op": "Jump", "pc": "289" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "n" },
    { "op": "LoadVar", "value": "$accu216" },
    { "op": "DelVar", "value": "$accu216" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "Stack", "args": "l" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "stack" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "max_size" } },
    { "op": "LoadVar", "value": "l" },
    { "op": "DelVar", "value": "l" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "valid" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "ever_negative" } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "problem_index" } },
    { "op": "Push", "value": { "type": "int", "value": -1 } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "push", "args": "(s, c)" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "max_size" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "349", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "352" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "336" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "stack" } },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "pc", "value": "32" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "stack" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "atom", "value": "(" } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "389", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "c" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "valid" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "Jump", "pc": "402" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Push", "value": { "type": "atom", "value": ")" } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "402", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "valid" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "valid" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "425", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "ever_negative" } },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "problem_index" } },
    { "op": "Address" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "DelVar", "value": "s" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "pop", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "441", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "444" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "430" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "pc", "value": "278" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "stack" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "rev" },
    { "op": "Push", "value": { "type": "pc", "value": "44" } },
    { "op": "LoadVar", "value": "rev" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "stack" } },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "pc", "value": "278" } },
    { "op": "Push", "value": { "type": "pc", "value": "55" } },
    { "op": "LoadVar", "value": "rev" },
    { "op": "DelVar", "value": "rev" },
    { "op": "Apply" },
    { "op": "Apply" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Push", "value": { "type": "atom", "value": "(" } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "487", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "valid" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "Jump", "pc": "499" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Push", "value": { "type": "atom", "value": ")" } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "499", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "valid" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "problem_index" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "520", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "problem_index" } },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "int", "value": -1 } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "ever_negative" } },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "DelVar", "value": "s" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "562" },
    { "op": "Frame", "name": "validate", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "size" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "max_size" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "539", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "542" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "525" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "ever_negative" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "557", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "atom", "value": "valid" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "559" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "pc", "value": "310" } },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Apply" },
    { "op": "Store", "value": [{ "type": "atom", "value": "s"}] },
    { "op": "Jump", "pc": "632" },
    { "op": "Frame", "name": "push_test", "args": "(self, char)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "call push" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "char" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "pc", "value": "335" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "s" }] } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "char" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "done push" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "DelVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "char" },
    { "op": "DelVar", "value": "char" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Return" },
    { "op": "Jump", "pc": "632" },
    { "op": "Frame", "name": "pop_test", "args": "self" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "call pop" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "pc", "value": "429" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "s" }] } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "v" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "done pop" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "DelVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Return" },
    { "op": "Jump", "pc": "632" },
    { "op": "Frame", "name": "validate_test", "args": "()" },
    { "op": "Push", "value": { "type": "atom", "value": "call validate" } },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "pc", "value": "524" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "s" }] } },
    { "op": "Apply" },
    { "op": "JumpCond", "pc": "629", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "atom", "value": "hooray :)" } },
    { "op": "Print" },
    { "op": "Jump", "pc": "631" },
    { "op": "Push", "value": { "type": "atom", "value": "boo :(" } },
    { "op": "Print" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "646", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "pc", "value": "567" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "(" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "634" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "661", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "pc", "value": "567" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "atom", "value": ")" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "649" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "672", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "pc", "value": "596" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "664" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "pc", "value": "619" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return" },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Jump 52","jump over method definition: set program counter to 52"],
    ["Frame subseq(s, b, e)","start of method subseq"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu3","initialize accumulator for list comprehension: pop a value and store in $accu3"],
    ["LoadVar b","push the value of b"],
    ["DelVar b","delete method variable b"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(x)","get next element and assign to x; push False or True depending on success"],
    ["JumpCond False 25","check if loop is done: pop a value and jump to 25 if the value is False"],
    ["LoadVar $accu3","load accumulator: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["LoadVar s","push the value of s"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu3","update accumulator: pop a value and store in $accu3"],
    ["Jump 14","set program counter to 14"],
    ["DelVar s","delete method variable s"],
    ["DelVar x","delete method variable x"],
    ["LoadVar $accu3","load final accumulator result: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 52","jump over method definition: set program counter to 52"],
    ["Frame append(s, e)","start of method append"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 52","jump over method definition: set program counter to 52"],
    ["Frame head(s)","start of method head"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Push PC(55)","push constant PC(55)"],
    ["Builtin(list$tail)","top of stack is a built-in operation called list$tail"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame tail(s)","start of method tail"],
    ["DelVar result","delete method variable result"],
    ["Push PC(2)","push constant PC(2)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar s","push the value of s"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame sum(a)","start of method sum"],
    ["DelVar result","delete method variable result"],
    ["Push 0","push constant 0"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 87","check if loop is done: pop a value and jump to 87 if the value is False"],
    ["LoadVar result","push the value of result"],
    ["DelVar result","delete method variable result"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 78","set program counter to 78"],
    ["DelVar v","delete method variable v"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame set(a)","start of method set"],
    ["DelVar result","delete method variable result"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu71","initialize accumulator for set comprehension: pop a value and store in $accu71"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 106","check if loop is done: pop a value and jump to 106 if the value is False"],
    ["LoadVar $accu71","load accumulator: push the value of $accu71"],
    ["DelVar $accu71","delete method variable $accu71"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu71","update accumulator: pop a value and store in $accu71"],
    ["Jump 97","set program counter to 97"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu71","load final accumulator result: push the value of $accu71"],
    ["DelVar $accu71","delete method variable $accu71"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame list(a)","start of method list"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu87","initialize accumulator for list comprehension: pop a value and store in $accu87"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 128","check if loop is done: pop a value and jump to 128 if the value is False"],
    ["LoadVar $accu87","load accumulator: push the value of $accu87"],
    ["DelVar $accu87","delete method variable $accu87"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu87","update accumulator: pop a value and store in $accu87"],
    ["Jump 119","set program counter to 119"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu87","load final accumulator result: push the value of $accu87"],
    ["DelVar $accu87","delete method variable $accu87"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame values(d)","start of method values"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu103","initialize accumulator for list comprehension: pop a value and store in $accu103"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(_, v)","get next element and assign to _:v; push False or True depending on success"],
    ["DelVar _","delete method variable _"],
    ["JumpCond False 151","check if loop is done: pop a value and jump to 151 if the value is False"],
    ["LoadVar $accu103","load accumulator: push the value of $accu103"],
    ["DelVar $accu103","delete method variable $accu103"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu103","update accumulator: pop a value and store in $accu103"],
    ["Jump 141","set program counter to 141"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu103","load final accumulator result: push the value of $accu103"],
    ["DelVar $accu103","delete method variable $accu103"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame items(d)","start of method items"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu119","initialize accumulator for list comprehension: pop a value and store in $accu119"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(k, v)","get next element and assign to k:v; push False or True depending on success"],
    ["JumpCond False 178","check if loop is done: pop a value and jump to 178 if the value is False"],
    ["LoadVar $accu119","load accumulator: push the value of $accu119"],
    ["DelVar $accu119","delete method variable $accu119"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar k","push the value of k"],
    ["DelVar k","delete method variable k"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu119","update accumulator: pop a value and store in $accu119"],
    ["Jump 164","set program counter to 164"],
    ["DelVar k","delete method variable k"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu119","load final accumulator result: push the value of $accu119"],
    ["DelVar $accu119","delete method variable $accu119"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame qsort(a)","start of method qsort"],
    ["DelVar result","delete method variable result"],
    ["LoadVar a","push the value of a"],
    ["Push ()","push constant ()"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 195","pop a value and jump to 195 if the value is False"],
    ["DelVar a","delete method variable a"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 265","set program counter to 265"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push PC(44)","push constant PC(44)"],
    ["LoadVar a","push the value of a"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push PC(55)","push constant PC(55)"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar (pivot, rest)","pop a value and store in (pivot, rest)"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu156","initialize accumulator for list comprehension: pop a value and store in $accu156"],
    ["LoadVar rest","push the value of rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 224","check if loop is done: pop a value and jump to 224 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 210","pop a value and jump to 210 if the value is False"],
    ["LoadVar $accu156","load accumulator: push the value of $accu156"],
    ["DelVar $accu156","delete method variable $accu156"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu156","update accumulator: pop a value and store in $accu156"],
    ["Jump 210","set program counter to 210"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu156","load final accumulator result: push the value of $accu156"],
    ["DelVar $accu156","delete method variable $accu156"],
    ["StoreVar lower","pop a value and store in lower"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu173","initialize accumulator for list comprehension: pop a value and store in $accu173"],
    ["LoadVar rest","push the value of rest"],
    ["DelVar rest","delete method variable rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 247","check if loop is done: pop a value and jump to 247 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary >=","pop 2 values and push the result of applying >="],
    ["JumpCond False 233","pop a value and jump to 233 if the value is False"],
    ["LoadVar $accu173","load accumulator: push the value of $accu173"],
    ["DelVar $accu173","delete method variable $accu173"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu173","update accumulator: pop a value and store in $accu173"],
    ["Jump 233","set program counter to 233"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu173","load final accumulator result: push the value of $accu173"],
    ["DelVar $accu173","delete method variable $accu173"],
    ["StoreVar higher","pop a value and store in higher"],
    ["Push PC(185)","push constant PC(185)"],
    ["LoadVar lower","push the value of lower"],
    ["DelVar lower","delete method variable lower"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar pivot","push the value of pivot"],
    ["DelVar pivot","delete method variable pivot"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push PC(185)","push constant PC(185)"],
    ["LoadVar higher","push the value of higher"],
    ["DelVar higher","delete method variable higher"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary +","pop 3 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame sorted(d)","start of method sorted"],
    ["DelVar result","delete method variable result"],
    ["Push PC(185)","push constant PC(185)"],
    ["Push PC(112)","push constant PC(112)"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame reversed(d)","start of method reversed"],
    ["DelVar result","delete method variable result"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["StoreVar n","pop a value and store in n"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu216","initialize accumulator for list comprehension: pop a value and store in $accu216"],
    ["Push 1","push constant 1"],
    ["LoadVar n","push the value of n"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 302","check if loop is done: pop a value and jump to 302 if the value is False"],
    ["LoadVar $accu216","load accumulator: push the value of $accu216"],
    ["DelVar $accu216","delete method variable $accu216"],
    ["LoadVar d","push the value of d"],
    ["LoadVar n","push the value of n"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu216","update accumulator: pop a value and store in $accu216"],
    ["Jump 289","set program counter to 289"],
    ["DelVar d","delete method variable d"],
    ["DelVar i","delete method variable i"],
    ["DelVar n","delete method variable n"],
    ["LoadVar $accu216","load final accumulator result: push the value of $accu216"],
    ["DelVar $accu216","delete method variable $accu216"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame Stack(l)","start of method Stack"],
    ["DelVar result","delete method variable result"],
    ["Push {:}","push constant {:}"],
    ["Push \"stack\"","push constant \"stack\""],
    ["Push ()","push constant ()"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"size\"","push constant \"size\""],
    ["Push 0","push constant 0"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"max_size\"","push constant \"max_size\""],
    ["LoadVar l","push the value of l"],
    ["DelVar l","delete method variable l"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"valid\"","push constant \"valid\""],
    ["Push 0","push constant 0"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"ever_negative\"","push constant \"ever_negative\""],
    ["Push False","push constant False"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"problem_index\"","push constant \"problem_index\""],
    ["Push -1","push constant -1"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame push(s, c)","start of method push"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar s","push the value of s"],
    ["Push \"size\"","push constant \"size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"max_size\"","push constant \"max_size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 349","pop a value and jump to 349 if the value is False"],
    ["Jump 352","set program counter to 352"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 336","set program counter to 336"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar s","push the value of s"],
    ["Push \"stack\"","push constant \"stack\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push PC(32)","push constant PC(32)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar s","push the value of s"],
    ["Push \"stack\"","push constant \"stack\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar c","push the value of c"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"size\"","push constant \"size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar c","push the value of c"],
    ["Push \"(\"","push constant \"(\""],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 389","pop a value and jump to 389 if the value is False"],
    ["DelVar c","delete method variable c"],
    ["LoadVar s","push the value of s"],
    ["Push \"valid\"","push constant \"valid\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 402","set program counter to 402"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Push \")\"","push constant \")\""],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 402","pop a value and jump to 402 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["Push \"valid\"","push constant \"valid\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"valid\"","push constant \"valid\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 425","pop a value and jump to 425 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["Push \"ever_negative\"","push constant \"ever_negative\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"problem_index\"","push constant \"problem_index\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push \"size\"","push constant \"size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar s","delete method variable s"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame pop(s)","start of method pop"],
    ["DelVar result","delete method variable result"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar s","push the value of s"],
    ["Push \"size\"","push constant \"size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 441","pop a value and jump to 441 if the value is False"],
    ["Jump 444","set program counter to 444"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 430","set program counter to 430"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push PC(278)","push constant PC(278)"],
    ["LoadVar s","push the value of s"],
    ["Push \"stack\"","push constant \"stack\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar rev","pop a value and store in rev"],
    ["Push PC(44)","push constant PC(44)"],
    ["LoadVar rev","push the value of rev"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar s","push the value of s"],
    ["Push \"stack\"","push constant \"stack\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push PC(278)","push constant PC(278)"],
    ["Push PC(55)","push constant PC(55)"],
    ["LoadVar rev","push the value of rev"],
    ["DelVar rev","delete method variable rev"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"size\"","push constant \"size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar result","push the value of result"],
    ["Push \"(\"","push constant \"(\""],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 487","pop a value and jump to 487 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["Push \"valid\"","push constant \"valid\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 499","set program counter to 499"],
    ["LoadVar result","push the value of result"],
    ["Push \")\"","push constant \")\""],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 499","pop a value and jump to 499 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["Push \"valid\"","push constant \"valid\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"size\"","push constant \"size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"problem_index\"","push constant \"problem_index\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 520","pop a value and jump to 520 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["Push \"problem_index\"","push constant \"problem_index\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push -1","push constant -1"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push \"ever_negative\"","push constant \"ever_negative\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar s","delete method variable s"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 562","jump over method definition: set program counter to 562"],
    ["Frame validate(s)","start of method validate"],
    ["DelVar result","delete method variable result"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar s","push the value of s"],
    ["Push \"size\"","push constant \"size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar s","push the value of s"],
    ["Push \"max_size\"","push constant \"max_size\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 539","pop a value and jump to 539 if the value is False"],
    ["Jump 542","set program counter to 542"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 525","set program counter to 525"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar s","push the value of s"],
    ["Push \"ever_negative\"","push constant \"ever_negative\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 557","pop a value and jump to 557 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push \"valid\"","push constant \"valid\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 559","set program counter to 559"],
    ["DelVar s","delete method variable s"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Push PC(310)","push constant PC(310)"],
    ["Push 2","push constant 2"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store s","pop a value and store it in shared variable s"],
    ["Jump 632","jump over method definition: set program counter to 632"],
    ["Frame push_test(self, char)","start of method push_test"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"call push\"","push constant \"call push\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar char","push the value of char"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Push PC(335)","push constant PC(335)"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push ?s","push constant ?s"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar char","push the value of char"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"done push\"","push constant \"done push\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["DelVar self","delete method variable self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar char","push the value of char"],
    ["DelVar char","delete method variable char"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Return","restore caller method state and push result"],
    ["Jump 632","jump over method definition: set program counter to 632"],
    ["Frame pop_test(self)","start of method pop_test"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"call pop\"","push constant \"call pop\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Push PC(429)","push constant PC(429)"],
    ["Push ?s","push constant ?s"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar v","pop a value and store in v"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"done pop\"","push constant \"done pop\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["DelVar self","delete method variable self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Return","restore caller method state and push result"],
    ["Jump 632","jump over method definition: set program counter to 632"],
    ["Frame validate_test()","start of method validate_test"],
    ["Push \"call validate\"","push constant \"call validate\""],
    ["Print","pop a value and add to print history"],
    ["Push PC(524)","push constant PC(524)"],
    ["Push ?s","push constant ?s"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["JumpCond False 629","pop a value and jump to 629 if the value is False"],
    ["Push \"hooray :)\"","push constant \"hooray :)\""],
    ["Print","pop a value and add to print history"],
    ["Jump 631","set program counter to 631"],
    ["Push \"boo :(\"","push constant \"boo :(\""],
    ["Print","pop a value and add to print history"],
    ["Return","restore caller method state and push result"],
    ["Push { 1, 2 }","push constant { 1, 2 }"],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 646","check if loop is done: pop a value and jump to 646 if the value is False"],
    ["Push PC(567)","push constant PC(567)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push \"(\"","push constant \"(\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 634","set program counter to 634"],
    ["DelVar i","delete method variable i"],
    ["Push { 1 }","push constant { 1 }"],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 661","check if loop is done: pop a value and jump to 661 if the value is False"],
    ["Push PC(567)","push constant PC(567)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push \")\"","push constant \")\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 649","set program counter to 649"],
    ["DelVar i","delete method variable i"],
    ["Push { 1 }","push constant { 1 }"],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 672","check if loop is done: pop a value and jump to 672 if the value is False"],
    ["Push PC(596)","push constant PC(596)"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 664","set program counter to 664"],
    ["DelVar i","delete method variable i"],
    ["Push PC(619)","push constant PC(619)"],
    ["Push ()","push constant ()"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Return","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locations": {
    "0": { "file": "stacktest.hny", "line": 1, "column": 1, "endline": 33, "endcolumn": 28, "stmt": [1,1,33,28], "code": "import stack" },
    "1": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 2, "column": 1, "endline": 2, "endcolumn": 3, "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "2": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 2, "column": 1, "endline": 2, "endcolumn": 20, "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "3": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "4": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "5": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "6": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "7": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "8": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "9": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "10": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 36, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "11": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 34, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "12": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 31, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "13": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "14": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "15": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "16": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "17": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "18": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "19": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "20": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "21": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 19, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "22": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "23": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "24": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 37, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "25": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "26": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "27": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "28": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "29": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 3, "column": 5, "endline": 3, "endcolumn": 12, "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "30": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 2, "column": 1, "endline": 2, "endcolumn": 20, "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "31": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 5, "column": 1, "endline": 5, "endcolumn": 3, "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "32": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 5, "column": 1, "endline": 5, "endcolumn": 17, "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "33": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "34": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "35": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "36": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "37": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "38": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "39": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "40": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 14, "endline": 6, "endcolumn": 21, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "41": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 6, "column": 5, "endline": 6, "endcolumn": 12, "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "42": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 5, "column": 1, "endline": 5, "endcolumn": 17, "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "43": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 8, "column": 1, "endline": 8, "endcolumn": 3, "stmt": [8,1,8,12], "code": "def head(s):" },
    "44": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 8, "column": 1, "endline": 8, "endcolumn": 12, "stmt": [8,1,8,12], "code": "def head(s):" },
    "45": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "46": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "47": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "48": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 9, "column": 16, "endline": 9, "endcolumn": 16, "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "49": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 9, "column": 14, "endline": 9, "endcolumn": 17, "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "50": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 9, "column": 5, "endline": 9, "endcolumn": 12, "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "51": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 8, "column": 1, "endline": 8, "endcolumn": 12, "stmt": [8,1,8,12], "code": "def head(s):" },
    "52": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 11, "column": 9, "endline": 11, "endcolumn": 12, "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "53": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 11, "column": 1, "endline": 11, "endcolumn": 24, "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "54": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 12, "column": 1, "endline": 12, "endcolumn": 3, "stmt": [12,1,12,12], "code": "def tail(s):" },
    "55": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 12, "column": 1, "endline": 12, "endcolumn": 12, "stmt": [12,1,12,12], "code": "def tail(s):" },
    "56": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 14, "endline": 13, "endcolumn": 19, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "57": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 14, "endline": 13, "endcolumn": 19, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "58": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "59": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 21, "endline": 13, "endcolumn": 21, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "60": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "61": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 24, "endline": 13, "endcolumn": 24, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "62": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "63": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 31, "endline": 13, "endcolumn": 31, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "64": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 31, "endline": 13, "endcolumn": 31, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "65": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 27, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "66": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "67": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 14, "endline": 13, "endcolumn": 33, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "68": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 13, "column": 5, "endline": 13, "endcolumn": 12, "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "69": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 12, "column": 1, "endline": 12, "endcolumn": 12, "stmt": [12,1,12,12], "code": "def tail(s):" },
    "70": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,11], "code": "def sum(a):" },
    "71": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 16, "column": 1, "endline": 16, "endcolumn": 11, "stmt": [16,1,16,11], "code": "def sum(a):" },
    "72": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 17, "column": 14, "endline": 17, "endcolumn": 14, "stmt": [17,5,17,14], "code": "    result = 0" },
    "73": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 17, "column": 14, "endline": 17, "endcolumn": 14, "stmt": [17,5,17,14], "code": "    result = 0" },
    "74": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 17, "column": 5, "endline": 17, "endcolumn": 12, "stmt": [17,5,17,14], "code": "    result = 0" },
    "75": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 18, "column": 14, "endline": 18, "endcolumn": 14, "stmt": [18,5,18,14], "code": "    for v in a:" },
    "76": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 18, "column": 14, "endline": 18, "endcolumn": 14, "stmt": [18,5,18,14], "code": "    for v in a:" },
    "77": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 18, "column": 5, "endline": 18, "endcolumn": 7, "stmt": [18,5,18,14], "code": "    for v in a:" },
    "78": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 18, "column": 5, "endline": 18, "endcolumn": 7, "stmt": [18,5,18,14], "code": "    for v in a:" },
    "79": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 18, "column": 5, "endline": 18, "endcolumn": 7, "stmt": [18,5,18,14], "code": "    for v in a:" },
    "80": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 19, "column": 9, "endline": 19, "endcolumn": 19, "stmt": [19,9,19,19], "code": "        result += v" },
    "81": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 19, "column": 9, "endline": 19, "endcolumn": 19, "stmt": [19,9,19,19], "code": "        result += v" },
    "82": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 19, "column": 19, "endline": 19, "endcolumn": 19, "stmt": [19,9,19,19], "code": "        result += v" },
    "83": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 19, "column": 19, "endline": 19, "endcolumn": 19, "stmt": [19,9,19,19], "code": "        result += v" },
    "84": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 19, "column": 9, "endline": 19, "endcolumn": 19, "stmt": [19,9,19,19], "code": "        result += v" },
    "85": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 19, "column": 9, "endline": 19, "endcolumn": 17, "stmt": [19,9,19,19], "code": "        result += v" },
    "86": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 18, "column": 14, "endline": 18, "endcolumn": 14, "stmt": [18,5,18,14], "code": "    for v in a:" },
    "87": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 16, "column": 1, "endline": 16, "endcolumn": 11, "stmt": [16,1,16,11], "code": "def sum(a):" },
    "88": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 16, "column": 1, "endline": 16, "endcolumn": 11, "stmt": [16,1,16,11], "code": "def sum(a):" },
    "89": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 22, "column": 1, "endline": 22, "endcolumn": 3, "stmt": [22,1,22,11], "code": "def set(a):" },
    "90": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 22, "column": 1, "endline": 22, "endcolumn": 11, "stmt": [22,1,22,11], "code": "def set(a):" },
    "91": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "92": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "93": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "94": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 27, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "95": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 27, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "96": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "97": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "98": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "99": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "100": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "101": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "102": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "103": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "104": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "105": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 27, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "106": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "107": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "108": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "109": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 23, "column": 5, "endline": 23, "endcolumn": 12, "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "110": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 22, "column": 1, "endline": 22, "endcolumn": 11, "stmt": [22,1,22,11], "code": "def set(a):" },
    "111": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 26, "column": 1, "endline": 26, "endcolumn": 3, "stmt": [26,1,26,12], "code": "def list(a):" },
    "112": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 26, "column": 1, "endline": 26, "endcolumn": 12, "stmt": [26,1,26,12], "code": "def list(a):" },
    "113": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "114": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "115": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "116": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 27, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "117": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 27, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "118": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "119": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "120": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "121": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "122": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "123": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "124": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "125": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "126": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "127": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 27, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "128": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "129": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "130": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "131": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 27, "column": 5, "endline": 27, "endcolumn": 12, "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "132": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 26, "column": 1, "endline": 26, "endcolumn": 12, "stmt": [26,1,26,12], "code": "def list(a):" },
    "133": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 30, "column": 1, "endline": 30, "endcolumn": 3, "stmt": [30,1,30,14], "code": "def values(d):" },
    "134": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 30, "column": 1, "endline": 30, "endcolumn": 14, "stmt": [30,1,30,14], "code": "def values(d):" },
    "135": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "136": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "137": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "138": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 29, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "139": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 29, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "140": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "141": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "142": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "143": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "144": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "145": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "146": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "147": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "148": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "149": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "150": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 29, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "151": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "152": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "153": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "154": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 31, "column": 5, "endline": 31, "endcolumn": 12, "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "155": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 30, "column": 1, "endline": 30, "endcolumn": 14, "stmt": [30,1,30,14], "code": "def values(d):" },
    "156": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,13], "code": "def items(d):" },
    "157": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 34, "column": 1, "endline": 34, "endcolumn": 13, "stmt": [34,1,34,13], "code": "def items(d):" },
    "158": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "159": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "160": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "161": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 34, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "162": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 34, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "163": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "164": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "165": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "166": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "167": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "168": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 17, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "169": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 17, "endline": 35, "endcolumn": 17, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "170": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 17, "endline": 35, "endcolumn": 17, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "171": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 17, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "172": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 20, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "173": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 20, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "174": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 17, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "175": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "176": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "177": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 34, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "178": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "179": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "180": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "181": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "182": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 35, "column": 5, "endline": 35, "endcolumn": 12, "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "183": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 34, "column": 1, "endline": 34, "endcolumn": 13, "stmt": [34,1,34,13], "code": "def items(d):" },
    "184": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 38, "column": 1, "endline": 38, "endcolumn": 3, "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "185": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 38, "column": 1, "endline": 38, "endcolumn": 13, "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "186": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 39, "column": 8, "endline": 39, "endcolumn": 8, "stmt": [39,5,39,15], "code": "    if a == []:" },
    "187": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 39, "column": 8, "endline": 39, "endcolumn": 8, "stmt": [39,5,39,15], "code": "    if a == []:" },
    "188": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 39, "column": 13, "endline": 39, "endcolumn": 14, "stmt": [39,5,39,15], "code": "    if a == []:" },
    "189": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 39, "column": 8, "endline": 39, "endcolumn": 14, "stmt": [39,5,39,15], "code": "    if a == []:" },
    "190": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 39, "column": 5, "endline": 39, "endcolumn": 6, "stmt": [39,5,39,15], "code": "    if a == []:" },
    "191": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 40, "column": 18, "endline": 40, "endcolumn": 19, "stmt": [40,9,40,19], "code": "        result = []" },
    "192": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 40, "column": 18, "endline": 40, "endcolumn": 19, "stmt": [40,9,40,19], "code": "        result = []" },
    "193": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 40, "column": 9, "endline": 40, "endcolumn": 16, "stmt": [40,9,40,19], "code": "        result = []" },
    "194": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 39, "column": 5, "endline": 39, "endcolumn": 15, "stmt": [39,5,39,15], "code": "    if a == []:" },
    "195": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 29, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "196": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 29, "endline": 42, "endcolumn": 32, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "197": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 34, "endline": 42, "endcolumn": 34, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "198": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 29, "endline": 42, "endcolumn": 35, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "199": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 29, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "200": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 38, "endline": 42, "endcolumn": 41, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "201": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 43, "endline": 42, "endcolumn": 43, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "202": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 43, "endline": 42, "endcolumn": 43, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "203": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 38, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "204": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 29, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "205": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 42, "column": 9, "endline": 42, "endcolumn": 27, "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "206": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "207": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "208": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 34, "endline": 43, "endcolumn": 37, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "209": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "210": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "211": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "212": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "213": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 45, "endline": 43, "endcolumn": 45, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "214": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 49, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "215": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 45, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "216": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "217": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "218": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "219": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "220": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "221": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "222": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "223": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 49, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "224": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "225": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "226": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "227": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 43, "column": 9, "endline": 43, "endcolumn": 19, "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "228": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "229": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "230": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 35, "endline": 44, "endcolumn": 38, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "231": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 35, "endline": 44, "endcolumn": 38, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "232": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "233": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "234": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "235": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "236": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 46, "endline": 44, "endcolumn": 46, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "237": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 51, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "238": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 46, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "239": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "240": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "241": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "242": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "243": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "244": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "245": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "246": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 51, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "247": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "248": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "249": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "250": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 44, "column": 9, "endline": 44, "endcolumn": 20, "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "251": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 22, "endline": 45, "endcolumn": 26, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "252": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 28, "endline": 45, "endcolumn": 32, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "253": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 28, "endline": 45, "endcolumn": 32, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "254": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 22, "endline": 45, "endcolumn": 33, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "255": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 38, "endline": 45, "endcolumn": 43, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "256": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 38, "endline": 45, "endcolumn": 42, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "257": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 38, "endline": 45, "endcolumn": 42, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "258": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 38, "endline": 45, "endcolumn": 43, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "259": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 48, "endline": 45, "endcolumn": 52, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "260": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 54, "endline": 45, "endcolumn": 59, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "261": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 54, "endline": 45, "endcolumn": 59, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "262": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 48, "endline": 45, "endcolumn": 60, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "263": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 22, "endline": 45, "endcolumn": 60, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "264": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 45, "column": 13, "endline": 45, "endcolumn": 20, "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "265": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 38, "column": 1, "endline": 38, "endcolumn": 13, "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "266": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 48, "column": 1, "endline": 48, "endcolumn": 3, "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "267": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 48, "column": 1, "endline": 48, "endcolumn": 14, "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "268": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 14, "endline": 49, "endcolumn": 18, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "269": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 14, "endline": 49, "endcolumn": 18, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "270": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 20, "endline": 49, "endcolumn": 23, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "271": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 25, "endline": 49, "endcolumn": 25, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "272": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 25, "endline": 49, "endcolumn": 25, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "273": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 20, "endline": 49, "endcolumn": 26, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "274": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 14, "endline": 49, "endcolumn": 27, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "275": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 49, "column": 5, "endline": 49, "endcolumn": 12, "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "276": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 48, "column": 1, "endline": 48, "endcolumn": 14, "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "277": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 52, "column": 1, "endline": 52, "endcolumn": 3, "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "278": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 52, "column": 1, "endline": 52, "endcolumn": 16, "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "279": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 53, "column": 17, "endline": 53, "endcolumn": 17, "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "280": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 53, "column": 17, "endline": 53, "endcolumn": 17, "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "281": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 53, "column": 13, "endline": 53, "endcolumn": 18, "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "282": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 53, "column": 5, "endline": 53, "endcolumn": 11, "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "283": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "284": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "285": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 38, "endline": 54, "endcolumn": 38, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "286": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 41, "endline": 54, "endcolumn": 41, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "287": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 38, "endline": 54, "endcolumn": 41, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "288": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "289": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "290": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "291": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "292": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "293": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "294": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 22, "endline": 54, "endcolumn": 22, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "295": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 24, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "296": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 24, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "297": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 22, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "298": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 25, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "299": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "300": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "301": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 43, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "302": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "303": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "304": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "305": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "306": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "307": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 54, "column": 9, "endline": 54, "endcolumn": 16, "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "308": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": 52, "column": 1, "endline": 52, "endcolumn": 16, "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "309": { "file": "stack.hny", "line": 3, "column": 1, "endline": 3, "endcolumn": 3, "stmt": [3,1,3,13], "code": "def Stack(l):" },
    "310": { "file": "stack.hny", "line": 3, "column": 1, "endline": 3, "endcolumn": 13, "stmt": [3,1,3,13], "code": "def Stack(l):" },
    "311": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "312": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "313": { "file": "stack.hny", "line": 5, "column": 9, "endline": 5, "endcolumn": 14, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "314": { "file": "stack.hny", "line": 5, "column": 17, "endline": 5, "endcolumn": 18, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "315": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "316": { "file": "stack.hny", "line": 6, "column": 9, "endline": 6, "endcolumn": 13, "stmt": [4,5,11,5], "code": "        .size: 0, # how do we make sure the max size is l" },
    "317": { "file": "stack.hny", "line": 6, "column": 16, "endline": 6, "endcolumn": 16, "stmt": [4,5,11,5], "code": "        .size: 0, # how do we make sure the max size is l" },
    "318": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "319": { "file": "stack.hny", "line": 7, "column": 9, "endline": 7, "endcolumn": 17, "stmt": [4,5,11,5], "code": "        .max_size: l, # capture maxSize parameter" },
    "320": { "file": "stack.hny", "line": 7, "column": 20, "endline": 7, "endcolumn": 20, "stmt": [4,5,11,5], "code": "        .max_size: l, # capture maxSize parameter" },
    "321": { "file": "stack.hny", "line": 7, "column": 20, "endline": 7, "endcolumn": 20, "stmt": [4,5,11,5], "code": "        .max_size: l, # capture maxSize parameter" },
    "322": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "323": { "file": "stack.hny", "line": 8, "column": 9, "endline": 8, "endcolumn": 14, "stmt": [4,5,11,5], "code": "        .valid: 0, #+1 to this when '(' and -1 when ')'" },
    "324": { "file": "stack.hny", "line": 8, "column": 17, "endline": 8, "endcolumn": 17, "stmt": [4,5,11,5], "code": "        .valid: 0, #+1 to this when '(' and -1 when ')'" },
    "325": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "326": { "file": "stack.hny", "line": 9, "column": 9, "endline": 9, "endcolumn": 22, "stmt": [4,5,11,5], "code": "        .ever_negative: False, #whenever pushing, check after if valid is negative and if so make True" },
    "327": { "file": "stack.hny", "line": 9, "column": 25, "endline": 9, "endcolumn": 29, "stmt": [4,5,11,5], "code": "        .ever_negative: False, #whenever pushing, check after if valid is negative and if so make True" },
    "328": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "329": { "file": "stack.hny", "line": 10, "column": 9, "endline": 10, "endcolumn": 22, "stmt": [4,5,11,5], "code": "        .problem_index: -1" },
    "330": { "file": "stack.hny", "line": 10, "column": 25, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .problem_index: -1" },
    "331": { "file": "stack.hny", "line": 5, "column": 9, "endline": 10, "endcolumn": 26, "stmt": [4,5,11,5], "code": "        .stack: []," },
    "332": { "file": "stack.hny", "line": 4, "column": 5, "endline": 4, "endcolumn": 12, "stmt": [4,5,11,5], "code": "    result = {" },
    "333": { "file": "stack.hny", "line": 3, "column": 1, "endline": 3, "endcolumn": 13, "stmt": [3,1,3,13], "code": "def Stack(l):" },
    "334": { "file": "stack.hny", "line": 13, "column": 1, "endline": 13, "endcolumn": 3, "stmt": [13,1,13,15], "code": "def push(s, c):" },
    "335": { "file": "stack.hny", "line": 13, "column": 1, "endline": 13, "endcolumn": 15, "stmt": [13,1,13,15], "code": "def push(s, c):" },
    "336": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 16, "stmt": [14,16,24,6], "code": "    atomically when s->size < s->max_size:" },
    "337": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 16, "stmt": [14,16,24,6], "code": "    atomically when s->size < s->max_size:" },
    "338": { "file": "stack.hny", "line": 14, "column": 21, "endline": 14, "endcolumn": 21, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "339": { "file": "stack.hny", "line": 14, "column": 24, "endline": 14, "endcolumn": 27, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "340": { "file": "stack.hny", "line": 14, "column": 21, "endline": 14, "endcolumn": 27, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "341": { "file": "stack.hny", "line": 14, "column": 21, "endline": 14, "endcolumn": 27, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "342": { "file": "stack.hny", "line": 14, "column": 31, "endline": 14, "endcolumn": 31, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "343": { "file": "stack.hny", "line": 14, "column": 34, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "344": { "file": "stack.hny", "line": 14, "column": 31, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "345": { "file": "stack.hny", "line": 14, "column": 31, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "346": { "file": "stack.hny", "line": 14, "column": 21, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "347": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "348": { "file": "stack.hny", "line": 14, "column": 41, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "349": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "350": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "351": { "file": "stack.hny", "line": 14, "column": 41, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "352": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "353": { "file": "stack.hny", "line": 15, "column": 9, "endline": 15, "endcolumn": 9, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "354": { "file": "stack.hny", "line": 15, "column": 12, "endline": 15, "endcolumn": 16, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "355": { "file": "stack.hny", "line": 15, "column": 9, "endline": 15, "endcolumn": 16, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "356": { "file": "stack.hny", "line": 15, "column": 20, "endline": 15, "endcolumn": 30, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "357": { "file": "stack.hny", "line": 15, "column": 32, "endline": 15, "endcolumn": 42, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "358": { "file": "stack.hny", "line": 15, "column": 32, "endline": 15, "endcolumn": 32, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "359": { "file": "stack.hny", "line": 15, "column": 35, "endline": 15, "endcolumn": 39, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "360": { "file": "stack.hny", "line": 15, "column": 32, "endline": 15, "endcolumn": 39, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "361": { "file": "stack.hny", "line": 15, "column": 32, "endline": 15, "endcolumn": 39, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "362": { "file": "stack.hny", "line": 15, "column": 32, "endline": 15, "endcolumn": 42, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "363": { "file": "stack.hny", "line": 15, "column": 42, "endline": 15, "endcolumn": 42, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "364": { "file": "stack.hny", "line": 15, "column": 32, "endline": 15, "endcolumn": 42, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "365": { "file": "stack.hny", "line": 15, "column": 20, "endline": 15, "endcolumn": 43, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "366": { "file": "stack.hny", "line": 15, "column": 9, "endline": 15, "endcolumn": 18, "stmt": [15,9,15,43], "code": "        s->stack = list.append(s->stack, c)" },
    "367": { "file": "stack.hny", "line": 16, "column": 9, "endline": 16, "endcolumn": 9, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "368": { "file": "stack.hny", "line": 16, "column": 12, "endline": 16, "endcolumn": 15, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "369": { "file": "stack.hny", "line": 16, "column": 9, "endline": 16, "endcolumn": 15, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "370": { "file": "stack.hny", "line": 16, "column": 9, "endline": 16, "endcolumn": 20, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "371": { "file": "stack.hny", "line": 16, "column": 9, "endline": 16, "endcolumn": 20, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "372": { "file": "stack.hny", "line": 16, "column": 20, "endline": 16, "endcolumn": 20, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "373": { "file": "stack.hny", "line": 16, "column": 9, "endline": 16, "endcolumn": 20, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "374": { "file": "stack.hny", "line": 16, "column": 9, "endline": 16, "endcolumn": 18, "stmt": [16,9,16,20], "code": "        s->size += 1" },
    "375": { "file": "stack.hny", "line": 17, "column": 12, "endline": 17, "endcolumn": 12, "stmt": [17,9,17,20], "code": "        if c == \"(\":" },
    "376": { "file": "stack.hny", "line": 17, "column": 17, "endline": 17, "endcolumn": 19, "stmt": [17,9,17,20], "code": "        if c == \"(\":" },
    "377": { "file": "stack.hny", "line": 17, "column": 12, "endline": 17, "endcolumn": 19, "stmt": [17,9,17,20], "code": "        if c == \"(\":" },
    "378": { "file": "stack.hny", "line": 17, "column": 9, "endline": 17, "endcolumn": 10, "stmt": [17,9,17,20], "code": "        if c == \"(\":" },
    "379": { "file": "stack.hny", "line": 18, "column": 13, "endline": 18, "endcolumn": 13, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "380": { "file": "stack.hny", "line": 18, "column": 13, "endline": 18, "endcolumn": 13, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "381": { "file": "stack.hny", "line": 18, "column": 16, "endline": 18, "endcolumn": 20, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "382": { "file": "stack.hny", "line": 18, "column": 13, "endline": 18, "endcolumn": 20, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "383": { "file": "stack.hny", "line": 18, "column": 13, "endline": 18, "endcolumn": 25, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "384": { "file": "stack.hny", "line": 18, "column": 13, "endline": 18, "endcolumn": 25, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "385": { "file": "stack.hny", "line": 18, "column": 25, "endline": 18, "endcolumn": 25, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "386": { "file": "stack.hny", "line": 18, "column": 13, "endline": 18, "endcolumn": 25, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "387": { "file": "stack.hny", "line": 18, "column": 13, "endline": 18, "endcolumn": 23, "stmt": [18,13,18,25], "code": "            s->valid += 1" },
    "388": { "file": "stack.hny", "line": 17, "column": 9, "endline": 17, "endcolumn": 20, "stmt": [17,9,17,20], "code": "        if c == \"(\":" },
    "389": { "file": "stack.hny", "line": 19, "column": 14, "endline": 19, "endcolumn": 14, "stmt": [19,9,19,22], "code": "        elif c == \")\":" },
    "390": { "file": "stack.hny", "line": 19, "column": 14, "endline": 19, "endcolumn": 14, "stmt": [19,9,19,22], "code": "        elif c == \")\":" },
    "391": { "file": "stack.hny", "line": 19, "column": 19, "endline": 19, "endcolumn": 21, "stmt": [19,9,19,22], "code": "        elif c == \")\":" },
    "392": { "file": "stack.hny", "line": 19, "column": 14, "endline": 19, "endcolumn": 21, "stmt": [19,9,19,22], "code": "        elif c == \")\":" },
    "393": { "file": "stack.hny", "line": 19, "column": 9, "endline": 19, "endcolumn": 12, "stmt": [19,9,19,22], "code": "        elif c == \")\":" },
    "394": { "file": "stack.hny", "line": 20, "column": 13, "endline": 20, "endcolumn": 13, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "395": { "file": "stack.hny", "line": 20, "column": 16, "endline": 20, "endcolumn": 20, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "396": { "file": "stack.hny", "line": 20, "column": 13, "endline": 20, "endcolumn": 20, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "397": { "file": "stack.hny", "line": 20, "column": 13, "endline": 20, "endcolumn": 25, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "398": { "file": "stack.hny", "line": 20, "column": 13, "endline": 20, "endcolumn": 25, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "399": { "file": "stack.hny", "line": 20, "column": 25, "endline": 20, "endcolumn": 25, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "400": { "file": "stack.hny", "line": 20, "column": 13, "endline": 20, "endcolumn": 25, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "401": { "file": "stack.hny", "line": 20, "column": 13, "endline": 20, "endcolumn": 23, "stmt": [20,13,20,25], "code": "            s->valid -= 1" },
    "402": { "file": "stack.hny", "line": 21, "column": 12, "endline": 21, "endcolumn": 12, "stmt": [21,9,21,24], "code": "        if s->valid < 0:" },
    "403": { "file": "stack.hny", "line": 21, "column": 15, "endline": 21, "endcolumn": 19, "stmt": [21,9,21,24], "code": "        if s->valid < 0:" },
    "404": { "file": "stack.hny", "line": 21, "column": 12, "endline": 21, "endcolumn": 19, "stmt": [21,9,21,24], "code": "        if s->valid < 0:" },
    "405": { "file": "stack.hny", "line": 21, "column": 12, "endline": 21, "endcolumn": 19, "stmt": [21,9,21,24], "code": "        if s->valid < 0:" },
    "406": { "file": "stack.hny", "line": 21, "column": 23, "endline": 21, "endcolumn": 23, "stmt": [21,9,21,24], "code": "        if s->valid < 0:" },
    "407": { "file": "stack.hny", "line": 21, "column": 12, "endline": 21, "endcolumn": 23, "stmt": [21,9,21,24], "code": "        if s->valid < 0:" },
    "408": { "file": "stack.hny", "line": 21, "column": 9, "endline": 21, "endcolumn": 10, "stmt": [21,9,21,24], "code": "        if s->valid < 0:" },
    "409": { "file": "stack.hny", "line": 22, "column": 13, "endline": 22, "endcolumn": 13, "stmt": [22,13,22,35], "code": "            s->ever_negative = True" },
    "410": { "file": "stack.hny", "line": 22, "column": 16, "endline": 22, "endcolumn": 28, "stmt": [22,13,22,35], "code": "            s->ever_negative = True" },
    "411": { "file": "stack.hny", "line": 22, "column": 13, "endline": 22, "endcolumn": 28, "stmt": [22,13,22,35], "code": "            s->ever_negative = True" },
    "412": { "file": "stack.hny", "line": 22, "column": 32, "endline": 22, "endcolumn": 35, "stmt": [22,13,22,35], "code": "            s->ever_negative = True" },
    "413": { "file": "stack.hny", "line": 22, "column": 13, "endline": 22, "endcolumn": 30, "stmt": [22,13,22,35], "code": "            s->ever_negative = True" },
    "414": { "file": "stack.hny", "line": 23, "column": 13, "endline": 23, "endcolumn": 13, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "415": { "file": "stack.hny", "line": 23, "column": 16, "endline": 23, "endcolumn": 28, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "416": { "file": "stack.hny", "line": 23, "column": 13, "endline": 23, "endcolumn": 28, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "417": { "file": "stack.hny", "line": 23, "column": 33, "endline": 23, "endcolumn": 33, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "418": { "file": "stack.hny", "line": 23, "column": 33, "endline": 23, "endcolumn": 33, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "419": { "file": "stack.hny", "line": 23, "column": 36, "endline": 23, "endcolumn": 39, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "420": { "file": "stack.hny", "line": 23, "column": 33, "endline": 23, "endcolumn": 39, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "421": { "file": "stack.hny", "line": 23, "column": 33, "endline": 23, "endcolumn": 39, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "422": { "file": "stack.hny", "line": 23, "column": 41, "endline": 23, "endcolumn": 41, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "423": { "file": "stack.hny", "line": 23, "column": 33, "endline": 23, "endcolumn": 41, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "424": { "file": "stack.hny", "line": 23, "column": 13, "endline": 23, "endcolumn": 30, "stmt": [23,13,23,42], "code": "            s->problem_index = (s->size-1)" },
    "425": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "426": { "file": "stack.hny", "line": 14, "column": 16, "endline": 14, "endcolumn": 41, "stmt": [14,16,14,41], "code": "    atomically when s->size < s->max_size:" },
    "427": { "file": "stack.hny", "line": 13, "column": 1, "endline": 13, "endcolumn": 15, "stmt": [13,1,13,15], "code": "def push(s, c):" },
    "428": { "file": "stack.hny", "line": 25, "column": 1, "endline": 25, "endcolumn": 3, "stmt": [25,1,25,11], "code": "def pop(s):" },
    "429": { "file": "stack.hny", "line": 25, "column": 1, "endline": 25, "endcolumn": 11, "stmt": [25,1,25,11], "code": "def pop(s):" },
    "430": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 16, "stmt": [26,16,38,6], "code": "    atomically when s->size > 0:" },
    "431": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 16, "stmt": [26,16,38,6], "code": "    atomically when s->size > 0:" },
    "432": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 16, "stmt": [26,16,38,6], "code": "    atomically when s->size > 0:" },
    "433": { "file": "stack.hny", "line": 26, "column": 21, "endline": 26, "endcolumn": 21, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "434": { "file": "stack.hny", "line": 26, "column": 24, "endline": 26, "endcolumn": 27, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "435": { "file": "stack.hny", "line": 26, "column": 21, "endline": 26, "endcolumn": 27, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "436": { "file": "stack.hny", "line": 26, "column": 21, "endline": 26, "endcolumn": 27, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "437": { "file": "stack.hny", "line": 26, "column": 31, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "438": { "file": "stack.hny", "line": 26, "column": 21, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "439": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "440": { "file": "stack.hny", "line": 26, "column": 31, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "441": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "442": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "443": { "file": "stack.hny", "line": 26, "column": 31, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "444": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "445": { "file": "stack.hny", "line": 27, "column": 19, "endline": 27, "endcolumn": 31, "stmt": [27,9,27,41], "code": "        let rev = list.reversed(s->stack):" },
    "446": { "file": "stack.hny", "line": 27, "column": 33, "endline": 27, "endcolumn": 33, "stmt": [27,9,27,41], "code": "        let rev = list.reversed(s->stack):" },
    "447": { "file": "stack.hny", "line": 27, "column": 36, "endline": 27, "endcolumn": 40, "stmt": [27,9,27,41], "code": "        let rev = list.reversed(s->stack):" },
    "448": { "file": "stack.hny", "line": 27, "column": 33, "endline": 27, "endcolumn": 40, "stmt": [27,9,27,41], "code": "        let rev = list.reversed(s->stack):" },
    "449": { "file": "stack.hny", "line": 27, "column": 33, "endline": 27, "endcolumn": 40, "stmt": [27,9,27,41], "code": "        let rev = list.reversed(s->stack):" },
    "450": { "file": "stack.hny", "line": 27, "column": 19, "endline": 27, "endcolumn": 41, "stmt": [27,9,27,41], "code": "        let rev = list.reversed(s->stack):" },
    "451": { "file": "stack.hny", "line": 27, "column": 9, "endline": 27, "endcolumn": 17, "stmt": [27,9,27,41], "code": "        let rev = list.reversed(s->stack):" },
    "452": { "file": "stack.hny", "line": 28, "column": 22, "endline": 28, "endcolumn": 30, "stmt": [28,13,28,35], "code": "            result = list.head(rev)" },
    "453": { "file": "stack.hny", "line": 28, "column": 32, "endline": 28, "endcolumn": 34, "stmt": [28,13,28,35], "code": "            result = list.head(rev)" },
    "454": { "file": "stack.hny", "line": 28, "column": 22, "endline": 28, "endcolumn": 35, "stmt": [28,13,28,35], "code": "            result = list.head(rev)" },
    "455": { "file": "stack.hny", "line": 28, "column": 13, "endline": 28, "endcolumn": 20, "stmt": [28,13,28,35], "code": "            result = list.head(rev)" },
    "456": { "file": "stack.hny", "line": 29, "column": 13, "endline": 29, "endcolumn": 13, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "457": { "file": "stack.hny", "line": 29, "column": 16, "endline": 29, "endcolumn": 20, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "458": { "file": "stack.hny", "line": 29, "column": 13, "endline": 29, "endcolumn": 20, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "459": { "file": "stack.hny", "line": 29, "column": 24, "endline": 29, "endcolumn": 36, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "460": { "file": "stack.hny", "line": 29, "column": 38, "endline": 29, "endcolumn": 46, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "461": { "file": "stack.hny", "line": 29, "column": 48, "endline": 29, "endcolumn": 50, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "462": { "file": "stack.hny", "line": 29, "column": 48, "endline": 29, "endcolumn": 50, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "463": { "file": "stack.hny", "line": 29, "column": 38, "endline": 29, "endcolumn": 51, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "464": { "file": "stack.hny", "line": 29, "column": 24, "endline": 29, "endcolumn": 52, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "465": { "file": "stack.hny", "line": 29, "column": 13, "endline": 29, "endcolumn": 22, "stmt": [29,13,29,52], "code": "            s->stack = list.reversed(list.tail(rev))" },
    "466": { "file": "stack.hny", "line": 30, "column": 13, "endline": 30, "endcolumn": 13, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "467": { "file": "stack.hny", "line": 30, "column": 16, "endline": 30, "endcolumn": 19, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "468": { "file": "stack.hny", "line": 30, "column": 13, "endline": 30, "endcolumn": 19, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "469": { "file": "stack.hny", "line": 30, "column": 13, "endline": 30, "endcolumn": 24, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "470": { "file": "stack.hny", "line": 30, "column": 13, "endline": 30, "endcolumn": 24, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "471": { "file": "stack.hny", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "472": { "file": "stack.hny", "line": 30, "column": 13, "endline": 30, "endcolumn": 24, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "473": { "file": "stack.hny", "line": 30, "column": 13, "endline": 30, "endcolumn": 22, "stmt": [30,13,30,24], "code": "            s->size -= 1" },
    "474": { "file": "stack.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 21, "stmt": [31,13,31,29], "code": "            if result == \"(\":" },
    "475": { "file": "stack.hny", "line": 31, "column": 26, "endline": 31, "endcolumn": 28, "stmt": [31,13,31,29], "code": "            if result == \"(\":" },
    "476": { "file": "stack.hny", "line": 31, "column": 16, "endline": 31, "endcolumn": 28, "stmt": [31,13,31,29], "code": "            if result == \"(\":" },
    "477": { "file": "stack.hny", "line": 31, "column": 13, "endline": 31, "endcolumn": 14, "stmt": [31,13,31,29], "code": "            if result == \"(\":" },
    "478": { "file": "stack.hny", "line": 32, "column": 17, "endline": 32, "endcolumn": 17, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "479": { "file": "stack.hny", "line": 32, "column": 20, "endline": 32, "endcolumn": 24, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "480": { "file": "stack.hny", "line": 32, "column": 17, "endline": 32, "endcolumn": 24, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "481": { "file": "stack.hny", "line": 32, "column": 17, "endline": 32, "endcolumn": 29, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "482": { "file": "stack.hny", "line": 32, "column": 17, "endline": 32, "endcolumn": 29, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "483": { "file": "stack.hny", "line": 32, "column": 29, "endline": 32, "endcolumn": 29, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "484": { "file": "stack.hny", "line": 32, "column": 17, "endline": 32, "endcolumn": 29, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "485": { "file": "stack.hny", "line": 32, "column": 17, "endline": 32, "endcolumn": 27, "stmt": [32,17,32,29], "code": "                s->valid -= 1" },
    "486": { "file": "stack.hny", "line": 31, "column": 13, "endline": 31, "endcolumn": 29, "stmt": [31,13,31,29], "code": "            if result == \"(\":" },
    "487": { "file": "stack.hny", "line": 33, "column": 18, "endline": 33, "endcolumn": 23, "stmt": [33,13,33,31], "code": "            elif result == \")\":" },
    "488": { "file": "stack.hny", "line": 33, "column": 28, "endline": 33, "endcolumn": 30, "stmt": [33,13,33,31], "code": "            elif result == \")\":" },
    "489": { "file": "stack.hny", "line": 33, "column": 18, "endline": 33, "endcolumn": 30, "stmt": [33,13,33,31], "code": "            elif result == \")\":" },
    "490": { "file": "stack.hny", "line": 33, "column": 13, "endline": 33, "endcolumn": 16, "stmt": [33,13,33,31], "code": "            elif result == \")\":" },
    "491": { "file": "stack.hny", "line": 34, "column": 17, "endline": 34, "endcolumn": 17, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "492": { "file": "stack.hny", "line": 34, "column": 20, "endline": 34, "endcolumn": 24, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "493": { "file": "stack.hny", "line": 34, "column": 17, "endline": 34, "endcolumn": 24, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "494": { "file": "stack.hny", "line": 34, "column": 17, "endline": 34, "endcolumn": 29, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "495": { "file": "stack.hny", "line": 34, "column": 17, "endline": 34, "endcolumn": 29, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "496": { "file": "stack.hny", "line": 34, "column": 29, "endline": 34, "endcolumn": 29, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "497": { "file": "stack.hny", "line": 34, "column": 17, "endline": 34, "endcolumn": 29, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "498": { "file": "stack.hny", "line": 34, "column": 17, "endline": 34, "endcolumn": 27, "stmt": [34,17,34,29], "code": "                s->valid += 1" },
    "499": { "file": "stack.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "500": { "file": "stack.hny", "line": 35, "column": 19, "endline": 35, "endcolumn": 22, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "501": { "file": "stack.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 22, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "502": { "file": "stack.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 22, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "503": { "file": "stack.hny", "line": 35, "column": 27, "endline": 35, "endcolumn": 27, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "504": { "file": "stack.hny", "line": 35, "column": 30, "endline": 35, "endcolumn": 42, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "505": { "file": "stack.hny", "line": 35, "column": 27, "endline": 35, "endcolumn": 42, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "506": { "file": "stack.hny", "line": 35, "column": 27, "endline": 35, "endcolumn": 42, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "507": { "file": "stack.hny", "line": 35, "column": 16, "endline": 35, "endcolumn": 42, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "508": { "file": "stack.hny", "line": 35, "column": 13, "endline": 35, "endcolumn": 14, "stmt": [35,13,35,43], "code": "            if s->size == s->problem_index:" },
    "509": { "file": "stack.hny", "line": 36, "column": 17, "endline": 36, "endcolumn": 17, "stmt": [36,17,36,37], "code": "                s->problem_index = -1" },
    "510": { "file": "stack.hny", "line": 36, "column": 20, "endline": 36, "endcolumn": 32, "stmt": [36,17,36,37], "code": "                s->problem_index = -1" },
    "511": { "file": "stack.hny", "line": 36, "column": 17, "endline": 36, "endcolumn": 32, "stmt": [36,17,36,37], "code": "                s->problem_index = -1" },
    "512": { "file": "stack.hny", "line": 36, "column": 36, "endline": 36, "endcolumn": 37, "stmt": [36,17,36,37], "code": "                s->problem_index = -1" },
    "513": { "file": "stack.hny", "line": 36, "column": 17, "endline": 36, "endcolumn": 34, "stmt": [36,17,36,37], "code": "                s->problem_index = -1" },
    "514": { "file": "stack.hny", "line": 37, "column": 17, "endline": 37, "endcolumn": 17, "stmt": [37,17,37,40], "code": "                s->ever_negative = False" },
    "515": { "file": "stack.hny", "line": 37, "column": 17, "endline": 37, "endcolumn": 17, "stmt": [37,17,37,40], "code": "                s->ever_negative = False" },
    "516": { "file": "stack.hny", "line": 37, "column": 20, "endline": 37, "endcolumn": 32, "stmt": [37,17,37,40], "code": "                s->ever_negative = False" },
    "517": { "file": "stack.hny", "line": 37, "column": 17, "endline": 37, "endcolumn": 32, "stmt": [37,17,37,40], "code": "                s->ever_negative = False" },
    "518": { "file": "stack.hny", "line": 37, "column": 36, "endline": 37, "endcolumn": 40, "stmt": [37,17,37,40], "code": "                s->ever_negative = False" },
    "519": { "file": "stack.hny", "line": 37, "column": 17, "endline": 37, "endcolumn": 34, "stmt": [37,17,37,40], "code": "                s->ever_negative = False" },
    "520": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "521": { "file": "stack.hny", "line": 26, "column": 16, "endline": 26, "endcolumn": 31, "stmt": [26,16,26,31], "code": "    atomically when s->size > 0:" },
    "522": { "file": "stack.hny", "line": 25, "column": 1, "endline": 25, "endcolumn": 11, "stmt": [25,1,25,11], "code": "def pop(s):" },
    "523": { "file": "stack.hny", "line": 39, "column": 1, "endline": 39, "endcolumn": 3, "stmt": [39,1,39,16], "code": "def validate(s):" },
    "524": { "file": "stack.hny", "line": 39, "column": 1, "endline": 39, "endcolumn": 16, "stmt": [39,1,39,16], "code": "def validate(s):" },
    "525": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 16, "stmt": [40,16,41,65], "code": "    atomically when s->size == s->max_size:" },
    "526": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 16, "stmt": [40,16,41,65], "code": "    atomically when s->size == s->max_size:" },
    "527": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 16, "stmt": [40,16,41,65], "code": "    atomically when s->size == s->max_size:" },
    "528": { "file": "stack.hny", "line": 40, "column": 21, "endline": 40, "endcolumn": 21, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "529": { "file": "stack.hny", "line": 40, "column": 24, "endline": 40, "endcolumn": 27, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "530": { "file": "stack.hny", "line": 40, "column": 21, "endline": 40, "endcolumn": 27, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "531": { "file": "stack.hny", "line": 40, "column": 21, "endline": 40, "endcolumn": 27, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "532": { "file": "stack.hny", "line": 40, "column": 32, "endline": 40, "endcolumn": 32, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "533": { "file": "stack.hny", "line": 40, "column": 35, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "534": { "file": "stack.hny", "line": 40, "column": 32, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "535": { "file": "stack.hny", "line": 40, "column": 32, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "536": { "file": "stack.hny", "line": 40, "column": 21, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "537": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "538": { "file": "stack.hny", "line": 40, "column": 42, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "539": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "540": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "541": { "file": "stack.hny", "line": 40, "column": 42, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "542": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "543": { "file": "stack.hny", "line": 41, "column": 23, "endline": 41, "endcolumn": 23, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "544": { "file": "stack.hny", "line": 41, "column": 26, "endline": 41, "endcolumn": 38, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "545": { "file": "stack.hny", "line": 41, "column": 23, "endline": 41, "endcolumn": 38, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "546": { "file": "stack.hny", "line": 41, "column": 23, "endline": 41, "endcolumn": 38, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "547": { "file": "stack.hny", "line": 41, "column": 19, "endline": 41, "endcolumn": 38, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "548": { "file": "stack.hny", "line": 41, "column": 18, "endline": 41, "endcolumn": 59, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "549": { "file": "stack.hny", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "550": { "file": "stack.hny", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "551": { "file": "stack.hny", "line": 41, "column": 49, "endline": 41, "endcolumn": 53, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "552": { "file": "stack.hny", "line": 41, "column": 46, "endline": 41, "endcolumn": 53, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "553": { "file": "stack.hny", "line": 41, "column": 46, "endline": 41, "endcolumn": 53, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "554": { "file": "stack.hny", "line": 41, "column": 58, "endline": 41, "endcolumn": 58, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "555": { "file": "stack.hny", "line": 41, "column": 46, "endline": 41, "endcolumn": 58, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "556": { "file": "stack.hny", "line": 41, "column": 41, "endline": 41, "endcolumn": 43, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "557": { "file": "stack.hny", "line": 41, "column": 18, "endline": 41, "endcolumn": 59, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "558": { "file": "stack.hny", "line": 41, "column": 18, "endline": 41, "endcolumn": 59, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "559": { "file": "stack.hny", "line": 41, "column": 9, "endline": 41, "endcolumn": 16, "stmt": [41,9,41,59], "code": "        result = (not s->ever_negative) and (s->valid == 0)" },
    "560": { "file": "stack.hny", "line": 40, "column": 16, "endline": 40, "endcolumn": 42, "stmt": [40,16,40,42], "code": "    atomically when s->size == s->max_size:" },
    "561": { "file": "stack.hny", "line": 39, "column": 1, "endline": 39, "endcolumn": 16, "stmt": [39,1,39,16], "code": "def validate(s):" },
    "562": { "file": "stacktest.hny", "line": 7, "column": 5, "endline": 7, "endcolumn": 15, "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "563": { "file": "stacktest.hny", "line": 7, "column": 17, "endline": 7, "endcolumn": 24, "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "564": { "file": "stacktest.hny", "line": 7, "column": 5, "endline": 7, "endcolumn": 25, "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "565": { "file": "stacktest.hny", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "566": { "file": "stacktest.hny", "line": 9, "column": 1, "endline": 9, "endcolumn": 3, "stmt": [9,1,9,26], "code": "def push_test(self, char):" },
    "567": { "file": "stacktest.hny", "line": 9, "column": 1, "endline": 9, "endcolumn": 26, "stmt": [9,1,9,26], "code": "def push_test(self, char):" },
    "568": { "file": "stacktest.hny", "line": 10, "column": 11, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "569": { "file": "stacktest.hny", "line": 10, "column": 11, "endline": 10, "endcolumn": 21, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "570": { "file": "stacktest.hny", "line": 10, "column": 11, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "571": { "file": "stacktest.hny", "line": 10, "column": 24, "endline": 10, "endcolumn": 27, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "572": { "file": "stacktest.hny", "line": 10, "column": 11, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "573": { "file": "stacktest.hny", "line": 10, "column": 30, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "574": { "file": "stacktest.hny", "line": 10, "column": 11, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "575": { "file": "stacktest.hny", "line": 10, "column": 5, "endline": 10, "endcolumn": 34, "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "576": { "file": "stacktest.hny", "line": 11, "column": 5, "endline": 11, "endcolumn": 14, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "577": { "file": "stacktest.hny", "line": 11, "column": 16, "endline": 11, "endcolumn": 23, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "578": { "file": "stacktest.hny", "line": 11, "column": 17, "endline": 11, "endcolumn": 17, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "579": { "file": "stacktest.hny", "line": 11, "column": 16, "endline": 11, "endcolumn": 23, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "580": { "file": "stacktest.hny", "line": 11, "column": 20, "endline": 11, "endcolumn": 23, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "581": { "file": "stacktest.hny", "line": 11, "column": 16, "endline": 11, "endcolumn": 23, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "582": { "file": "stacktest.hny", "line": 11, "column": 5, "endline": 11, "endcolumn": 24, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "583": { "file": "stacktest.hny", "line": 11, "column": 5, "endline": 11, "endcolumn": 24, "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "584": { "file": "stacktest.hny", "line": 12, "column": 11, "endline": 12, "endcolumn": 33, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "585": { "file": "stacktest.hny", "line": 12, "column": 11, "endline": 12, "endcolumn": 21, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "586": { "file": "stacktest.hny", "line": 12, "column": 11, "endline": 12, "endcolumn": 33, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "587": { "file": "stacktest.hny", "line": 12, "column": 24, "endline": 12, "endcolumn": 27, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "588": { "file": "stacktest.hny", "line": 12, "column": 24, "endline": 12, "endcolumn": 27, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "589": { "file": "stacktest.hny", "line": 12, "column": 11, "endline": 12, "endcolumn": 33, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "590": { "file": "stacktest.hny", "line": 12, "column": 30, "endline": 12, "endcolumn": 33, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "591": { "file": "stacktest.hny", "line": 12, "column": 30, "endline": 12, "endcolumn": 33, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "592": { "file": "stacktest.hny", "line": 12, "column": 11, "endline": 12, "endcolumn": 33, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "593": { "file": "stacktest.hny", "line": 12, "column": 5, "endline": 12, "endcolumn": 34, "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "594": { "file": "stacktest.hny", "line": 9, "column": 1, "endline": 9, "endcolumn": 26, "stmt": [9,1,9,26], "code": "def push_test(self, char):" },
    "595": { "file": "stacktest.hny", "line": 14, "column": 1, "endline": 14, "endcolumn": 3, "stmt": [14,1,14,19], "code": "def pop_test(self):" },
    "596": { "file": "stacktest.hny", "line": 14, "column": 1, "endline": 14, "endcolumn": 19, "stmt": [14,1,14,19], "code": "def pop_test(self):" },
    "597": { "file": "stacktest.hny", "line": 15, "column": 11, "endline": 15, "endcolumn": 26, "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "598": { "file": "stacktest.hny", "line": 15, "column": 11, "endline": 15, "endcolumn": 20, "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "599": { "file": "stacktest.hny", "line": 15, "column": 11, "endline": 15, "endcolumn": 26, "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "600": { "file": "stacktest.hny", "line": 15, "column": 23, "endline": 15, "endcolumn": 26, "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "601": { "file": "stacktest.hny", "line": 15, "column": 11, "endline": 15, "endcolumn": 26, "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "602": { "file": "stacktest.hny", "line": 15, "column": 5, "endline": 15, "endcolumn": 27, "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "603": { "file": "stacktest.hny", "line": 16, "column": 13, "endline": 16, "endcolumn": 21, "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "604": { "file": "stacktest.hny", "line": 16, "column": 24, "endline": 16, "endcolumn": 24, "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "605": { "file": "stacktest.hny", "line": 16, "column": 13, "endline": 16, "endcolumn": 25, "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "606": { "file": "stacktest.hny", "line": 16, "column": 5, "endline": 16, "endcolumn": 11, "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "607": { "file": "stacktest.hny", "line": 17, "column": 15, "endline": 17, "endcolumn": 33, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "608": { "file": "stacktest.hny", "line": 17, "column": 15, "endline": 17, "endcolumn": 24, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "609": { "file": "stacktest.hny", "line": 17, "column": 15, "endline": 17, "endcolumn": 33, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "610": { "file": "stacktest.hny", "line": 17, "column": 27, "endline": 17, "endcolumn": 30, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "611": { "file": "stacktest.hny", "line": 17, "column": 27, "endline": 17, "endcolumn": 30, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "612": { "file": "stacktest.hny", "line": 17, "column": 15, "endline": 17, "endcolumn": 33, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "613": { "file": "stacktest.hny", "line": 17, "column": 33, "endline": 17, "endcolumn": 33, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "614": { "file": "stacktest.hny", "line": 17, "column": 33, "endline": 17, "endcolumn": 33, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "615": { "file": "stacktest.hny", "line": 17, "column": 15, "endline": 17, "endcolumn": 33, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "616": { "file": "stacktest.hny", "line": 17, "column": 9, "endline": 17, "endcolumn": 34, "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "617": { "file": "stacktest.hny", "line": 14, "column": 1, "endline": 14, "endcolumn": 19, "stmt": [14,1,14,19], "code": "def pop_test(self):" },
    "618": { "file": "stacktest.hny", "line": 19, "column": 1, "endline": 19, "endcolumn": 3, "stmt": [19,1,19,20], "code": "def validate_test():" },
    "619": { "file": "stacktest.hny", "line": 19, "column": 1, "endline": 19, "endcolumn": 20, "stmt": [19,1,19,20], "code": "def validate_test():" },
    "620": { "file": "stacktest.hny", "line": 20, "column": 11, "endline": 20, "endcolumn": 25, "stmt": [20,5,20,26], "code": "    print(\"call validate\")" },
    "621": { "file": "stacktest.hny", "line": 20, "column": 5, "endline": 20, "endcolumn": 26, "stmt": [20,5,20,26], "code": "    print(\"call validate\")" },
    "622": { "file": "stacktest.hny", "line": 21, "column": 8, "endline": 21, "endcolumn": 21, "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "623": { "file": "stacktest.hny", "line": 21, "column": 24, "endline": 21, "endcolumn": 24, "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "624": { "file": "stacktest.hny", "line": 21, "column": 8, "endline": 21, "endcolumn": 25, "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "625": { "file": "stacktest.hny", "line": 21, "column": 5, "endline": 21, "endcolumn": 6, "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "626": { "file": "stacktest.hny", "line": 22, "column": 13, "endline": 22, "endcolumn": 23, "stmt": [22,7,22,24], "code": "      print(\"hooray :)\")" },
    "627": { "file": "stacktest.hny", "line": 22, "column": 7, "endline": 22, "endcolumn": 24, "stmt": [22,7,22,24], "code": "      print(\"hooray :)\")" },
    "628": { "file": "stacktest.hny", "line": 21, "column": 5, "endline": 21, "endcolumn": 26, "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "629": { "file": "stacktest.hny", "line": 24, "column": 13, "endline": 24, "endcolumn": 20, "stmt": [24,7,24,21], "code": "      print(\"boo :(\")" },
    "630": { "file": "stacktest.hny", "line": 24, "column": 7, "endline": 24, "endcolumn": 21, "stmt": [24,7,24,21], "code": "      print(\"boo :(\")" },
    "631": { "file": "stacktest.hny", "line": 19, "column": 1, "endline": 19, "endcolumn": 20, "stmt": [19,1,19,20], "code": "def validate_test():" },
    "632": { "file": "stacktest.hny", "line": 26, "column": 11, "endline": 26, "endcolumn": 23, "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "633": { "file": "stacktest.hny", "line": 26, "column": 1, "endline": 26, "endcolumn": 3, "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "634": { "file": "stacktest.hny", "line": 26, "column": 1, "endline": 26, "endcolumn": 3, "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "635": { "file": "stacktest.hny", "line": 26, "column": 1, "endline": 26, "endcolumn": 3, "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "636": { "file": "stacktest.hny", "line": 27, "column": 11, "endline": 27, "endcolumn": 19, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "637": { "file": "stacktest.hny", "line": 27, "column": 21, "endline": 27, "endcolumn": 26, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "638": { "file": "stacktest.hny", "line": 27, "column": 21, "endline": 27, "endcolumn": 21, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "639": { "file": "stacktest.hny", "line": 27, "column": 21, "endline": 27, "endcolumn": 21, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "640": { "file": "stacktest.hny", "line": 27, "column": 21, "endline": 27, "endcolumn": 26, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "641": { "file": "stacktest.hny", "line": 27, "column": 24, "endline": 27, "endcolumn": 26, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "642": { "file": "stacktest.hny", "line": 27, "column": 21, "endline": 27, "endcolumn": 26, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "643": { "file": "stacktest.hny", "line": 27, "column": 5, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "644": { "file": "stacktest.hny", "line": 27, "column": 5, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "645": { "file": "stacktest.hny", "line": 26, "column": 24, "endline": 26, "endcolumn": 24, "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "646": { "file": "stacktest.hny", "line": 28, "column": 11, "endline": 28, "endcolumn": 24, "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "647": { "file": "stacktest.hny", "line": 28, "column": 11, "endline": 28, "endcolumn": 24, "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "648": { "file": "stacktest.hny", "line": 28, "column": 1, "endline": 28, "endcolumn": 3, "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "649": { "file": "stacktest.hny", "line": 28, "column": 1, "endline": 28, "endcolumn": 3, "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "650": { "file": "stacktest.hny", "line": 28, "column": 1, "endline": 28, "endcolumn": 3, "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "651": { "file": "stacktest.hny", "line": 29, "column": 11, "endline": 29, "endcolumn": 19, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "652": { "file": "stacktest.hny", "line": 29, "column": 21, "endline": 29, "endcolumn": 26, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "653": { "file": "stacktest.hny", "line": 29, "column": 21, "endline": 29, "endcolumn": 21, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "654": { "file": "stacktest.hny", "line": 29, "column": 21, "endline": 29, "endcolumn": 21, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "655": { "file": "stacktest.hny", "line": 29, "column": 21, "endline": 29, "endcolumn": 26, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "656": { "file": "stacktest.hny", "line": 29, "column": 24, "endline": 29, "endcolumn": 26, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "657": { "file": "stacktest.hny", "line": 29, "column": 21, "endline": 29, "endcolumn": 26, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "658": { "file": "stacktest.hny", "line": 29, "column": 5, "endline": 29, "endcolumn": 27, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "659": { "file": "stacktest.hny", "line": 29, "column": 5, "endline": 29, "endcolumn": 27, "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "660": { "file": "stacktest.hny", "line": 28, "column": 25, "endline": 28, "endcolumn": 25, "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "661": { "file": "stacktest.hny", "line": 30, "column": 11, "endline": 30, "endcolumn": 17, "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "662": { "file": "stacktest.hny", "line": 30, "column": 11, "endline": 30, "endcolumn": 17, "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "663": { "file": "stacktest.hny", "line": 30, "column": 1, "endline": 30, "endcolumn": 3, "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "664": { "file": "stacktest.hny", "line": 30, "column": 1, "endline": 30, "endcolumn": 3, "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "665": { "file": "stacktest.hny", "line": 30, "column": 1, "endline": 30, "endcolumn": 3, "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "666": { "file": "stacktest.hny", "line": 31, "column": 11, "endline": 31, "endcolumn": 18, "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "667": { "file": "stacktest.hny", "line": 31, "column": 20, "endline": 31, "endcolumn": 20, "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "668": { "file": "stacktest.hny", "line": 31, "column": 20, "endline": 31, "endcolumn": 20, "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "669": { "file": "stacktest.hny", "line": 31, "column": 5, "endline": 31, "endcolumn": 21, "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "670": { "file": "stacktest.hny", "line": 31, "column": 5, "endline": 31, "endcolumn": 21, "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "671": { "file": "stacktest.hny", "line": 30, "column": 18, "endline": 30, "endcolumn": 18, "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "672": { "file": "stacktest.hny", "line": 33, "column": 7, "endline": 33, "endcolumn": 19, "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "673": { "file": "stacktest.hny", "line": 33, "column": 7, "endline": 33, "endcolumn": 19, "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "674": { "file": "stacktest.hny", "line": 33, "column": 20, "endline": 33, "endcolumn": 21, "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "675": { "file": "stacktest.hny", "line": 33, "column": 1, "endline": 33, "endcolumn": 21, "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "676": { "file": "stacktest.hny", "line": 33, "column": 1, "endline": 33, "endcolumn": 21, "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "677": { "file": "stacktest.hny", "line": 1, "column": 1, "endline": 33, "endcolumn": 28, "stmt": [1,1,33,28], "code": "import stack" },
    "678": { "file": "stacktest.hny", "line": 1, "column": 1, "endline": 33, "endcolumn": 28, "stmt": [1,1,33,28], "code": "import stack" }
  }
}
