{
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "1",
      "len": "0",
      "shared": { },
      "tid": "0",
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "600001a579f9",
        "fp": "1",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
          {
          "pc": "0",
          "xpc": "0",
          "method": "__init__()",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "atomic": "1",
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "method \"__init__\" with argument () set to []",
          "shared": { },
          "npc": "1",
          "fp": "1",
          "trace": [
            {
            "pc": "1",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "1",
          "pc": "0"
        },
        {
          "code": "Jump 52",
          "explain": "jump over method definition: set program counter to 52",
          "npc": "52",
          "push": [ ],
          "pc": "1"
        },
        {
          "code": "Push PC(55)",
          "explain": "push constant PC(55)",
          "npc": "53",
          "push": [ { "type": "pc", "value": "55" } ],
          "pc": "52"
        },
        {
          "code": "Builtin(list$tail)",
          "explain": "pop pc (PC(55)) and bind to built-in method list$tail",
          "npc": "54",
          "pop": "1",
          "push": [ ],
          "pc": "53"
        },
        {
          "code": "Jump 371",
          "explain": "jump over method definition: set program counter to 371",
          "npc": "371",
          "push": [ ],
          "pc": "54"
        },
        {
          "code": "Push PC(374)",
          "explain": "push constant PC(374)",
          "npc": "372",
          "push": [ { "type": "pc", "value": "374" } ],
          "pc": "371"
        },
        {
          "code": "Builtin(bag$multiplicity)",
          "explain": "pop pc (PC(374)) and bind to built-in method bag$multiplicity",
          "npc": "373",
          "pop": "1",
          "push": [ ],
          "pc": "372"
        },
        {
          "code": "Jump 392",
          "explain": "jump over method definition: set program counter to 392",
          "npc": "392",
          "push": [ ],
          "pc": "373"
        },
        {
          "code": "Push PC(395)",
          "explain": "push constant PC(395)",
          "npc": "393",
          "push": [ { "type": "pc", "value": "395" } ],
          "pc": "392"
        },
        {
          "code": "Builtin(bag$size)",
          "explain": "pop pc (PC(395)) and bind to built-in method bag$size",
          "npc": "394",
          "pop": "1",
          "push": [ ],
          "pc": "393"
        },
        {
          "code": "Jump 414",
          "explain": "jump over method definition: set program counter to 414",
          "npc": "414",
          "push": [ ],
          "pc": "394"
        },
        {
          "code": "Push PC(417)",
          "explain": "push constant PC(417)",
          "npc": "415",
          "push": [ { "type": "pc", "value": "417" } ],
          "pc": "414"
        },
        {
          "code": "Builtin(bag$bmin)",
          "explain": "pop pc (PC(417)) and bind to built-in method bag$bmin",
          "npc": "416",
          "pop": "1",
          "push": [ ],
          "pc": "415"
        },
        {
          "code": "Jump 433",
          "explain": "jump over method definition: set program counter to 433",
          "npc": "433",
          "push": [ ],
          "pc": "416"
        },
        {
          "code": "Push PC(436)",
          "explain": "push constant PC(436)",
          "npc": "434",
          "push": [ { "type": "pc", "value": "436" } ],
          "pc": "433"
        },
        {
          "code": "Builtin(bag$bmax)",
          "explain": "pop pc (PC(436)) and bind to built-in method bag$bmax",
          "npc": "435",
          "pop": "1",
          "push": [ ],
          "pc": "434"
        },
        {
          "code": "Jump 461",
          "explain": "jump over method definition: set program counter to 461",
          "npc": "461",
          "push": [ ],
          "pc": "435"
        },
        {
          "code": "Push PC(464)",
          "explain": "push constant PC(464)",
          "npc": "462",
          "push": [ { "type": "pc", "value": "464" } ],
          "pc": "461"
        },
        {
          "code": "Builtin(bag$add)",
          "explain": "pop pc (PC(464)) and bind to built-in method bag$add",
          "npc": "463",
          "pop": "1",
          "push": [ ],
          "pc": "462"
        },
        {
          "code": "Jump 490",
          "explain": "jump over method definition: set program counter to 490",
          "npc": "490",
          "push": [ ],
          "pc": "463"
        },
        {
          "code": "Push PC(493)",
          "explain": "push constant PC(493)",
          "npc": "491",
          "push": [ { "type": "pc", "value": "493" } ],
          "pc": "490"
        },
        {
          "code": "Builtin(bag$remove)",
          "explain": "pop pc (PC(493)) and bind to built-in method bag$remove",
          "npc": "492",
          "pop": "1",
          "push": [ ],
          "pc": "491"
        },
        {
          "code": "Jump 1303",
          "explain": "jump over method definition: set program counter to 1303",
          "npc": "1303",
          "push": [ ],
          "pc": "492"
        },
        {
          "code": "Push PC(944)",
          "explain": "push program counter constant 944 (\"Stack\")",
          "npc": "1304",
          "push": [ { "type": "pc", "value": "944" } ],
          "pc": "1303"
        },
        {
          "code": "Push 2",
          "explain": "push constant 2",
          "npc": "1305",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1304"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (2) and a program counter value (944: \"Stack\") and call the method",
          "npc": "944",
          "fp": "3",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "944",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "20898" }, { "type": "int", "value": "2" } ],
          "pc": "1305"
        },
        {
          "code": "Frame Stack(l)",
          "explain": "method \"Stack\" with argument l set to 2",
          "npc": "945",
          "local": { "l": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "944"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "946",
          "local": { "l": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "945"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "947",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "946"
        },
        {
          "code": "Push \"mutex\"",
          "explain": "push constant \"mutex\"",
          "npc": "948",
          "push": [ { "type": "atom", "value": "mutex" } ],
          "pc": "947"
        },
        {
          "code": "Push PC(679)",
          "explain": "push program counter constant 679 (\"Lock\")",
          "npc": "949",
          "push": [ { "type": "pc", "value": "679" } ],
          "pc": "948"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "950",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "949"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (679: \"Lock\") and call the method",
          "npc": "679",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "951",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "679",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15218" }, { "type": "list", "value": [] } ],
          "pc": "950"
        },
        {
          "code": "Frame Lock()",
          "explain": "method \"Lock\" with argument () set to []",
          "npc": "680",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "l" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "679"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "681",
          "local": { },
          "push": [ ],
          "pc": "680"
        },
        {
          "code": "Push PC(672)",
          "explain": "push program counter constant 672 (\"BinSema\")",
          "npc": "682",
          "push": [ { "type": "pc", "value": "672" } ],
          "pc": "681"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "683",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "682"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (False) and a program counter value (672: \"BinSema\") and call the method",
          "npc": "672",
          "fp": "9",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "951",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            },
            {
            "pc": "672",
            "xpc": "672",
            "method": "BinSema(False)",
            "calltype": "normal",
            "vars": { },
            "sp": 8
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "10946" }, { "type": "bool", "value": "False" } ],
          "pc": "683"
        },
        {
          "code": "Frame BinSema(acquired)",
          "explain": "method \"BinSema\" with argument acquired set to False",
          "npc": "673",
          "local": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "672"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "674",
          "local": { "acquired": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "673"
        },
        {
          "code": "LoadVar acquired",
          "explain": "push value (False) of variable \"acquired\"",
          "npc": "675",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "674"
        },
        {
          "code": "DelVar acquired",
          "explain": "delete method variable acquired",
          "npc": "676",
          "local": { },
          "push": [ ],
          "pc": "675"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "677",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "676"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "684",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "951",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "677"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "685",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "684"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "951",
          "fp": "3",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "951",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "l": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "685"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (False, \"mutex\", {:}); add key/value pair to dictionary; push result ({ \"mutex\": False })",
          "npc": "952",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "951"
        },
        {
          "code": "Push \"push_cond\"",
          "explain": "push constant \"push_cond\"",
          "npc": "953",
          "push": [ { "type": "atom", "value": "push_cond" } ],
          "pc": "952"
        },
        {
          "code": "Push PC(738)",
          "explain": "push program counter constant 738 (\"Condition\")",
          "npc": "954",
          "push": [ { "type": "pc", "value": "738" } ],
          "pc": "953"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "955",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "954"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (738: \"Condition\") and call the method",
          "npc": "738",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "956",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "738",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15298" }, { "type": "list", "value": [] } ],
          "pc": "955"
        },
        {
          "code": "Frame Condition()",
          "explain": "method \"Condition\" with argument () set to []",
          "npc": "739",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "l" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "738"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "740",
          "local": { },
          "push": [ ],
          "pc": "739"
        },
        {
          "code": "Push PC(310)",
          "explain": "push program counter constant 310 (\"empty\")",
          "npc": "741",
          "push": [ { "type": "pc", "value": "310" } ],
          "pc": "740"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "742",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "741"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (310: \"empty\") and call the method",
          "npc": "310",
          "fp": "9",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "956",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "743",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            },
            {
            "pc": "310",
            "xpc": "310",
            "method": "empty()",
            "calltype": "normal",
            "vars": { },
            "sp": 8
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "11890" }, { "type": "list", "value": [] } ],
          "pc": "742"
        },
        {
          "code": "Frame empty()",
          "explain": "method \"empty\" with argument () set to []",
          "npc": "311",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "310"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "312",
          "local": { },
          "push": [ ],
          "pc": "311"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "313",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "312"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \"result\"",
          "npc": "314",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "313"
        },
        {
          "code": "Return",
          "explain": "push result ({:}) and restore method variables",
          "npc": "743",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "956",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "743",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "314"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \"result\"",
          "npc": "744",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "743"
        },
        {
          "code": "Return",
          "explain": "push result ({:}) and restore method variables",
          "npc": "956",
          "fp": "3",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "956",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "l": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "744"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ({:}, \"push_cond\", { \"mutex\": False }); add key/value pair to dictionary; push result ({ \"mutex\": False, \"push_cond\": {:} })",
          "npc": "957",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "956"
        },
        {
          "code": "Push \"pop_cond\"",
          "explain": "push constant \"pop_cond\"",
          "npc": "958",
          "push": [ { "type": "atom", "value": "pop_cond" } ],
          "pc": "957"
        },
        {
          "code": "Push PC(738)",
          "explain": "push program counter constant 738 (\"Condition\")",
          "npc": "959",
          "push": [ { "type": "pc", "value": "738" } ],
          "pc": "958"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "960",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "959"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (738: \"Condition\") and call the method",
          "npc": "738",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "738",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15378" }, { "type": "list", "value": [] } ],
          "pc": "960"
        },
        {
          "code": "Frame Condition()",
          "explain": "method \"Condition\" with argument () set to []",
          "npc": "739",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "l" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "738"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "740",
          "local": { },
          "push": [ ],
          "pc": "739"
        },
        {
          "code": "Push PC(310)",
          "explain": "push program counter constant 310 (\"empty\")",
          "npc": "741",
          "push": [ { "type": "pc", "value": "310" } ],
          "pc": "740"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "742",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "741"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (310: \"empty\") and call the method",
          "npc": "310",
          "fp": "9",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "743",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            },
            {
            "pc": "310",
            "xpc": "310",
            "method": "empty()",
            "calltype": "normal",
            "vars": { },
            "sp": 8
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "11890" }, { "type": "list", "value": [] } ],
          "pc": "742"
        },
        {
          "code": "Frame empty()",
          "explain": "method \"empty\" with argument () set to []",
          "npc": "311",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "310"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "312",
          "local": { },
          "push": [ ],
          "pc": "311"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "313",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "312"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \"result\"",
          "npc": "314",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "313"
        },
        {
          "code": "Return",
          "explain": "push result ({:}) and restore method variables",
          "npc": "743",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "743",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "314"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \"result\"",
          "npc": "744",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "743"
        },
        {
          "code": "Return",
          "explain": "push result ({:}) and restore method variables",
          "npc": "961",
          "fp": "3",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "l": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "744"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ({:}, \"pop_cond\", { \"mutex\": False, \"push_cond\": {:} }); add key/value pair to dictionary; push result ({ \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:} })",
          "npc": "962",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "961"
        },
        {
          "code": "Push \"valid_cond\"",
          "explain": "push constant \"valid_cond\"",
          "npc": "963",
          "push": [ { "type": "atom", "value": "valid_cond" } ],
          "pc": "962"
        },
        {
          "code": "Push PC(738)",
          "explain": "push program counter constant 738 (\"Condition\")",
          "npc": "964",
          "push": [ { "type": "pc", "value": "738" } ],
          "pc": "963"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "965",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "964"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (738: \"Condition\") and call the method",
          "npc": "738",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "966",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "738",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15458" }, { "type": "list", "value": [] } ],
          "pc": "965"
        },
        {
          "code": "Frame Condition()",
          "explain": "method \"Condition\" with argument () set to []",
          "npc": "739",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "l" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "738"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "740",
          "local": { },
          "push": [ ],
          "pc": "739"
        },
        {
          "code": "Push PC(310)",
          "explain": "push program counter constant 310 (\"empty\")",
          "npc": "741",
          "push": [ { "type": "pc", "value": "310" } ],
          "pc": "740"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "742",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "741"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (310: \"empty\") and call the method",
          "npc": "310",
          "fp": "9",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "966",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "743",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            },
            {
            "pc": "310",
            "xpc": "310",
            "method": "empty()",
            "calltype": "normal",
            "vars": { },
            "sp": 8
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "11890" }, { "type": "list", "value": [] } ],
          "pc": "742"
        },
        {
          "code": "Frame empty()",
          "explain": "method \"empty\" with argument () set to []",
          "npc": "311",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "310"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "312",
          "local": { },
          "push": [ ],
          "pc": "311"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "313",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "312"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \"result\"",
          "npc": "314",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "313"
        },
        {
          "code": "Return",
          "explain": "push result ({:}) and restore method variables",
          "npc": "743",
          "fp": "7",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "966",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "743",
            "xpc": "738",
            "method": "Condition()",
            "calltype": "normal",
            "vars": { },
            "sp": 6
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "314"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \"result\"",
          "npc": "744",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "743"
        },
        {
          "code": "Return",
          "explain": "push result ({:}) and restore method variables",
          "npc": "966",
          "fp": "3",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "966",
            "xpc": "944",
            "method": "Stack(2)",
            "calltype": "normal",
            "vars": { "l": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "l": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "744"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ({:}, \"valid_cond\", { \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:} }); add key/value pair to dictionary; push result ({ \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"valid_cond\": {:} })",
          "npc": "967",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "966"
        },
        {
          "code": "Push \"stack\"",
          "explain": "push constant \"stack\"",
          "npc": "968",
          "push": [ { "type": "atom", "value": "stack" } ],
          "pc": "967"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "969",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "968"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([], \"stack\", { \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"valid_cond\": {:} }); add key/value pair to dictionary; push result ({ \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"stack\": [], \"valid_cond\": {:} })",
          "npc": "970",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "969"
        },
        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "npc": "971",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "970"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "972",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "971"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (0, \"size\", { \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"stack\": [], \"valid_cond\": {:} }); add key/value pair to dictionary; push result ({ \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid_cond\": {:} })",
          "npc": "973",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "972"
        },
        {
          "code": "Push \"max_size\"",
          "explain": "push constant \"max_size\"",
          "npc": "974",
          "push": [ { "type": "atom", "value": "max_size" } ],
          "pc": "973"
        },
        {
          "code": "LoadVar l",
          "explain": "push value (2) of variable \"l\"",
          "npc": "975",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "974"
        },
        {
          "code": "DelVar l",
          "explain": "delete method variable l",
          "npc": "976",
          "local": { },
          "push": [ ],
          "pc": "975"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (2, \"max_size\", { \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid_cond\": {:} }); add key/value pair to dictionary; push result ({ \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid_cond\": {:} })",
          "npc": "977",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "976"
        },
        {
          "code": "Push \"valid\"",
          "explain": "push constant \"valid\"",
          "npc": "978",
          "push": [ { "type": "atom", "value": "valid" } ],
          "pc": "977"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "979",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "978"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (0, \"valid\", { \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid_cond\": {:} }); add key/value pair to dictionary; push result ({ \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} })",
          "npc": "980",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "979"
        },
        {
          "code": "Push \"ever_negative\"",
          "explain": "push constant \"ever_negative\"",
          "npc": "981",
          "push": [ { "type": "atom", "value": "ever_negative" } ],
          "pc": "980"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "982",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "981"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (False, \"ever_negative\", { \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} }); add key/value pair to dictionary; push result ({ \"ever_negative\": False, \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} })",
          "npc": "983",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "982"
        },
        {
          "code": "Push \"problem_index\"",
          "explain": "push constant \"problem_index\"",
          "npc": "984",
          "push": [ { "type": "atom", "value": "problem_index" } ],
          "pc": "983"
        },
        {
          "code": "Push -1",
          "explain": "push constant -1",
          "npc": "985",
          "push": [ { "type": "int", "value": "-1" } ],
          "pc": "984"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (-1, \"problem_index\", { \"ever_negative\": False, \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} }); add key/value pair to dictionary; push result ({ \"ever_negative\": False, \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"problem_index\": -1, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} })",
          "npc": "986",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "985"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({ \"ever_negative\": False, \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"problem_index\": -1, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} }) and store locally in variable \"result\"",
          "npc": "987",
          "local": { "result": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "986"
        },
        {
          "code": "Return",
          "explain": "push result ({ \"ever_negative\": False, \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"problem_index\": -1, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} }) and restore method variables",
          "npc": "1306",
          "fp": "1",
          "trace": [
            {
            "pc": "1306",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "987"
        },
        {
          "code": "Store s",
          "explain": "pop value ({ \"ever_negative\": False, \"max_size\": 2, \"mutex\": False, \"pop_cond\": {:}, \"problem_index\": -1, \"push_cond\": {:}, \"size\": 0, \"stack\": [], \"valid\": 0, \"valid_cond\": {:} }) and store into variable s",
          "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
          "npc": "1307",
          "pop": "1",
          "push": [ ],
          "pc": "1306"
        },
        {
          "code": "Jump 1373",
          "explain": "jump over method definition: set program counter to 1373",
          "npc": "1373",
          "push": [ ],
          "pc": "1307"
        },
        {
          "code": "Push { 1, 2 }",
          "explain": "push constant { 1, 2 }",
          "npc": "1374",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1373"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1375",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1374"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1, 2 }); assign value (1) to i; push new index (1) and True",
          "npc": "1376",
          "local": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1375"
        },
        {
          "code": "JumpCond False 1387",
          "explain": "pop value (True), compare to False, and jump to 1387 if the same",
          "npc": "1377",
          "pop": "1",
          "push": [ ],
          "pc": "1376"
        },
        {
          "code": "Push PC(1308)",
          "explain": "push program counter constant 1308 (\"push_test\")",
          "npc": "1378",
          "push": [ { "type": "pc", "value": "1308" } ],
          "pc": "1377"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1379",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1378"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "npc": "1380",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1379"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1381",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1380"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "npc": "1382",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1381"
        },
        {
          "code": "Push \"(\"",
          "explain": "push constant \"(\"",
          "npc": "1383",
          "push": [ { "type": "atom", "value": "(" } ],
          "pc": "1382"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"(\", [1]); insert first value into the second; push result ([1, \"(\"])",
          "npc": "1384",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] } ],
          "pc": "1383"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1385",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1384"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([1, \"(\"]), and program counter (1308: \"push_test\"), and spawn thread",
          "npc": "1386",
          "pop": "3",
          "push": [ ],
          "contexts": "2",
          "pc": "1385"
        },
        {
          "code": "Jump 1375",
          "explain": "set program counter to 1375",
          "npc": "1375",
          "push": [ ],
          "pc": "1386"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1, 2 }); assign value (2) to i; push new index (2) and True",
          "npc": "1376",
          "local": { "i": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "1375"
        },
        {
          "code": "JumpCond False 1387",
          "explain": "pop value (True), compare to False, and jump to 1387 if the same",
          "npc": "1377",
          "pop": "1",
          "push": [ ],
          "pc": "1376"
        },
        {
          "code": "Push PC(1308)",
          "explain": "push program counter constant 1308 (\"push_test\")",
          "npc": "1378",
          "push": [ { "type": "pc", "value": "1308" } ],
          "pc": "1377"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1379",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1378"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (2) of variable \"i\"",
          "npc": "1380",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1379"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1381",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1380"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "npc": "1382",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1381"
        },
        {
          "code": "Push \"(\"",
          "explain": "push constant \"(\"",
          "npc": "1383",
          "push": [ { "type": "atom", "value": "(" } ],
          "pc": "1382"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"(\", [2]); insert first value into the second; push result ([2, \"(\"])",
          "npc": "1384",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "(" } ] } ],
          "pc": "1383"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1385",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1384"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([2, \"(\"]), and program counter (1308: \"push_test\"), and spawn thread",
          "npc": "1386",
          "pop": "3",
          "push": [ ],
          "contexts": "3",
          "pc": "1385"
        },
        {
          "code": "Jump 1375",
          "explain": "set program counter to 1375",
          "npc": "1375",
          "push": [ ],
          "pc": "1386"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (2) and value ({ 1, 2 }); out of range -> push False",
          "npc": "1376",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1375"
        },
        {
          "code": "JumpCond False 1387",
          "explain": "pop value (False), compare to False, and jump to 1387 if the same",
          "npc": "1387",
          "pop": "1",
          "push": [ ],
          "pc": "1376"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1388",
          "push": [ ],
          "pc": "1387"
        },
        {
          "code": "Push { 1 }",
          "explain": "push constant { 1 }",
          "npc": "1389",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1388"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1390",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1389"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "npc": "1391",
          "local": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1390"
        },
        {
          "code": "JumpCond False 1402",
          "explain": "pop value (True), compare to False, and jump to 1402 if the same",
          "npc": "1392",
          "pop": "1",
          "push": [ ],
          "pc": "1391"
        },
        {
          "code": "Push PC(1308)",
          "explain": "push program counter constant 1308 (\"push_test\")",
          "npc": "1393",
          "push": [ { "type": "pc", "value": "1308" } ],
          "pc": "1392"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1394",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1393"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "npc": "1395",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1394"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1396",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1395"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "npc": "1397",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1396"
        },
        {
          "code": "Push \")\"",
          "explain": "push constant \")\"",
          "npc": "1398",
          "push": [ { "type": "atom", "value": ")" } ],
          "pc": "1397"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\")\", [1]); insert first value into the second; push result ([1, \")\"])",
          "npc": "1399",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] } ],
          "pc": "1398"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1400",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1399"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([1, \")\"]), and program counter (1308: \"push_test\"), and spawn thread",
          "npc": "1401",
          "pop": "3",
          "push": [ ],
          "contexts": "4",
          "pc": "1400"
        },
        {
          "code": "Jump 1390",
          "explain": "set program counter to 1390",
          "npc": "1390",
          "push": [ ],
          "pc": "1401"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "npc": "1391",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1390"
        },
        {
          "code": "JumpCond False 1402",
          "explain": "pop value (False), compare to False, and jump to 1402 if the same",
          "npc": "1402",
          "pop": "1",
          "push": [ ],
          "pc": "1391"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1403",
          "push": [ ],
          "pc": "1402"
        },
        {
          "code": "Push { 1 }",
          "explain": "push constant { 1 }",
          "npc": "1404",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1403"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1405",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1404"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "npc": "1406",
          "local": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1405"
        },
        {
          "code": "JumpCond False 1413",
          "explain": "pop value (True), compare to False, and jump to 1413 if the same",
          "npc": "1407",
          "pop": "1",
          "push": [ ],
          "pc": "1406"
        },
        {
          "code": "Push PC(1337)",
          "explain": "push program counter constant 1337 (\"pop_test\")",
          "npc": "1408",
          "push": [ { "type": "pc", "value": "1337" } ],
          "pc": "1407"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "npc": "1409",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1408"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1410",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1409"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1411",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1410"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument (1), and program counter (1337: \"pop_test\"), and spawn thread",
          "npc": "1412",
          "pop": "3",
          "push": [ ],
          "contexts": "5",
          "pc": "1411"
        },
        {
          "code": "Jump 1405",
          "explain": "set program counter to 1405",
          "npc": "1405",
          "push": [ ],
          "pc": "1412"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "npc": "1406",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1405"
        },
        {
          "code": "JumpCond False 1413",
          "explain": "pop value (False), compare to False, and jump to 1413 if the same",
          "npc": "1413",
          "pop": "1",
          "push": [ ],
          "pc": "1406"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1414",
          "push": [ ],
          "pc": "1413"
        },
        {
          "code": "Push PC(1360)",
          "explain": "push program counter constant 1360 (\"validate_test\")",
          "npc": "1415",
          "push": [ { "type": "pc", "value": "1360" } ],
          "pc": "1414"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "1416",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1415"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1417",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1416"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([]), and program counter (1360: \"validate_test\"), and spawn thread",
          "npc": "1418",
          "pop": "3",
          "push": [ ],
          "contexts": "6",
          "pc": "1417"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1418",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1418"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "141260709": "1",
          "1412607c9": "1",
          "141260829": "1",
          "141260859": "1",
          "141260889": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "1412608b9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1418",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1418",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141260709",
          "fp": "1",
          "name": "push_test(1, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "1412607c9",
          "fp": "1",
          "name": "push_test(2, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "141260829",
          "fp": "1",
          "name": "push_test(1, \")\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \")\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141260859",
          "fp": "1",
          "name": "pop_test(1)",
          "entry": "1337",
          "pc": "1337",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1337",
            "xpc": "1337",
            "method": "pop_test(1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "141260889",
          "fp": "1",
          "name": "validate_test()",
          "entry": "1360",
          "pc": "1360",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1360",
            "xpc": "1360",
            "method": "validate_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "5",
      "len": "1",
      "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
      "tid": "2",
      "name": "push_test(2, \"(\")",
      "context": {
        "tid": "2",
        "hvalue": "1412607c9",
        "fp": "1",
        "name": "push_test(2, \"(\")",
        "entry": "1308",
        "pc": "1308",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "(" } ] }],
        "trace": [
          {
          "pc": "1308",
          "xpc": "1308",
          "method": "push_test(2, \"(\")",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame push_test(self, char)",
          "explain": "method \"push_test\" with argument (self, char) set to [2, \"(\"]",
          "npc": "1309",
          "fp": "1",
          "trace": [
            {
            "pc": "1309",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            }
          ],
          "local": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "5",
          "pc": "1308"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1310",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1309"
        },
        {
          "code": "Push \"call push\"",
          "explain": "push constant \"call push\"",
          "npc": "1311",
          "push": [ { "type": "atom", "value": "call push" } ],
          "pc": "1310"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"call push\", []); insert first value into the second; push result ([\"call push\"])",
          "npc": "1312",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call push" } ] } ],
          "pc": "1311"
        },
        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "npc": "1313",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1312"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [\"call push\"]); insert first value into the second; push result ([\"call push\", 2])",
          "npc": "1314",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call push" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1313"
        },
        {
          "code": "LoadVar char",
          "explain": "push value (\"(\") of variable \"char\"",
          "npc": "1315",
          "push": [ { "type": "atom", "value": "(" } ],
          "pc": "1314"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"(\", [\"call push\", 2]); insert first value into the second; push result ([\"call push\", 2, \"(\"])",
          "npc": "1316",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call push" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "(" } ] } ],
          "pc": "1315"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "141260709": "1",
          "141260829": "1",
          "141260859": "1",
          "141260889": "1",
          "141260ca9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "1412608b9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1418",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1418",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141260709",
          "fp": "1",
          "name": "push_test(1, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "141260ca9",
          "fp": "1",
          "name": "push_test(2, \"(\")",
          "entry": "1308",
          "pc": "1316",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call push" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1316",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "141260829",
          "fp": "1",
          "name": "push_test(1, \")\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \")\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141260859",
          "fp": "1",
          "name": "pop_test(1)",
          "entry": "1337",
          "pc": "1337",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1337",
            "xpc": "1337",
            "method": "pop_test(1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "141260889",
          "fp": "1",
          "name": "validate_test()",
          "entry": "1360",
          "pc": "1360",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1360",
            "xpc": "1360",
            "method": "validate_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8",
      "len": "1",
      "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
      "tid": "2",
      "name": "push_test(2, \"(\")",
      "context": {
        "tid": "2",
        "hvalue": "141260ca9",
        "fp": "1",
        "name": "push_test(2, \"(\")",
        "entry": "1308",
        "pc": "1316",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call push" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "(" } ] }],
        "trace": [
          {
          "pc": "1316",
          "xpc": "1308",
          "method": "push_test(2, \"(\")",
          "calltype": "process",
          "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"call push\", 2, \"(\"]) and add to print log",
          "print": { "type": "list", "value": [{ "type": "atom", "value": "call push" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "(" } ] },
          "npc": "1317",
          "fp": "1",
          "trace": [
            {
            "pc": "1317",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            }
          ],
          "pop": "1",
          "push": [ ],
          "contexts": "5",
          "pc": "1316"
        },
        {
          "code": "Push PC(989)",
          "explain": "push program counter constant 989 (\"push\")",
          "npc": "1318",
          "push": [ { "type": "pc", "value": "989" } ],
          "pc": "1317"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1319",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1318"
        },
        {
          "code": "Push ?s",
          "explain": "push constant ?s",
          "npc": "1320",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1319"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?s, []); insert first value into the second; push result ([?s])",
          "npc": "1321",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ] } ],
          "pc": "1320"
        },
        {
          "code": "LoadVar char",
          "explain": "push value (\"(\") of variable \"char\"",
          "npc": "1322",
          "push": [ { "type": "atom", "value": "(" } ],
          "pc": "1321"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"(\", [?s]); insert first value into the second; push result ([?s, \"(\"])",
          "npc": "1323",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" } ] }, { "type": "atom", "value": "(" } ] } ],
          "pc": "1322"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?s, \"(\"]) and a program counter value (989: \"push\") and call the method",
          "npc": "989",
          "fp": "3",
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21186" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" } ] }, { "type": "atom", "value": "(" } ] } ],
          "pc": "1323"
        },
        {
          "code": "Frame push(s, c)",
          "explain": "method \"push\" with argument (s, c) set to [?s, \"(\"]",
          "npc": "990",
          "local": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "989"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "991",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "990"
        },
        {
          "code": "LoadVar s",
          "explain": "push value (?s) of variable \"s\"",
          "npc": "992",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "991"
        },
        {
          "code": "Push \"mutex\"",
          "explain": "push constant \"mutex\"",
          "npc": "993",
          "push": [ { "type": "atom", "value": "mutex" } ],
          "pc": "992"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"mutex\") and an address (?s) and push the combined address (?s[\"mutex\"])",
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] } ],
          "pc": "993"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?s[\"mutex\"]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "995",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?s[\"mutex\"])",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15922" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] } ],
          "pc": "994"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?s[\"mutex\"]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "c" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "141260709": "1",
          "141260829": "1",
          "141260859": "1",
          "141260889": "1",
          "1412622d9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "1412608b9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1418",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1418",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141260709",
          "fp": "1",
          "name": "push_test(1, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "1412622d9",
          "fp": "5",
          "name": "push_test(2, \"(\")",
          "entry": "1308",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "c" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] }],
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "995",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?s[\"mutex\"])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "141260829",
          "fp": "1",
          "name": "push_test(1, \")\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \")\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141260859",
          "fp": "1",
          "name": "pop_test(1)",
          "entry": "1337",
          "pc": "1337",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1337",
            "xpc": "1337",
            "method": "pop_test(1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "141260889",
          "fp": "1",
          "name": "validate_test()",
          "entry": "1360",
          "pc": "1360",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1360",
            "xpc": "1360",
            "method": "validate_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "47",
      "len": "1",
      "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
      "tid": "2",
      "name": "push_test(2, \"(\")",
      "context": {
        "tid": "2",
        "hvalue": "1412622d9",
        "fp": "1",
        "name": "push_test(2, \"(\")",
        "entry": "1308",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21186" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "int", "value": "15922" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "c" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1308",
          "method": "push_test(2, \"(\")",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "995",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?s[\"mutex\"])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "5",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?s[\"mutex\"]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?s[\"mutex\"]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?s[\"mutex\"]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "mutex" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?s[\"mutex\"]) and store",
          "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "995",
          "fp": "3",
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "995",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "local": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "996",
          "pop": "1",
          "push": [ ],
          "pc": "995"
        },
        {
          "code": "LoadVar s",
          "explain": "push value (?s) of variable \"s\"",
          "npc": "997",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "996"
        },
        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "npc": "998",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "997"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"size\") and an address (?s) and push the combined address (?s[\"size\"])",
          "npc": "999",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "size" } ] } ],
          "pc": "998"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140c60a69": "1",
          "141260709": "1",
          "141260829": "1",
          "141260859": "1",
          "141260889": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "1412608b9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1418",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1418",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141260709",
          "fp": "1",
          "name": "push_test(1, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140c60a69",
          "fp": "3",
          "name": "push_test(2, \"(\")",
          "entry": "1308",
          "pc": "999",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "size" } ] }],
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "999",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "141260829",
          "fp": "1",
          "name": "push_test(1, \")\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \")\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141260859",
          "fp": "1",
          "name": "pop_test(1)",
          "entry": "1337",
          "pc": "1337",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1337",
            "xpc": "1337",
            "method": "pop_test(1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "141260889",
          "fp": "1",
          "name": "validate_test()",
          "entry": "1360",
          "pc": "1360",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1360",
            "xpc": "1360",
            "method": "validate_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "67",
      "len": "1",
      "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
      "tid": "2",
      "name": "push_test(2, \"(\")",
      "context": {
        "tid": "2",
        "hvalue": "140c60a69",
        "fp": "1",
        "name": "push_test(2, \"(\")",
        "entry": "1308",
        "pc": "999",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21186" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "size" } ] }],
        "trace": [
          {
          "pc": "999",
          "xpc": "1308",
          "method": "push_test(2, \"(\")",
          "calltype": "process",
          "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?s[\"size\"]) and push value (0)",
          "npc": "1000",
          "fp": "3",
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "1000",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "contexts": "5",
          "pc": "999"
        },
        {
          "code": "LoadVar s",
          "explain": "push value (?s) of variable \"s\"",
          "npc": "1001",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1000"
        },
        {
          "code": "Push \"max_size\"",
          "explain": "push constant \"max_size\"",
          "npc": "1002",
          "push": [ { "type": "atom", "value": "max_size" } ],
          "pc": "1001"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"max_size\") and an address (?s) and push the combined address (?s[\"max_size\"])",
          "npc": "1003",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "max_size" } ] } ],
          "pc": "1002"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d652e9": "1",
          "141260709": "1",
          "141260829": "1",
          "141260859": "1",
          "141260889": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "1412608b9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1418",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1418",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141260709",
          "fp": "1",
          "name": "push_test(1, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d652e9",
          "fp": "3",
          "name": "push_test(2, \"(\")",
          "entry": "1308",
          "pc": "1003",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "int", "value": "0" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "max_size" } ] }],
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "1003",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "141260829",
          "fp": "1",
          "name": "push_test(1, \")\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \")\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141260859",
          "fp": "1",
          "name": "pop_test(1)",
          "entry": "1337",
          "pc": "1337",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1337",
            "xpc": "1337",
            "method": "pop_test(1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "141260889",
          "fp": "1",
          "name": "validate_test()",
          "entry": "1360",
          "pc": "1360",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1360",
            "xpc": "1360",
            "method": "validate_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "220",
      "len": "1",
      "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
      "tid": "2",
      "name": "push_test(2, \"(\")",
      "context": {
        "tid": "2",
        "hvalue": "140d652e9",
        "fp": "1",
        "name": "push_test(2, \"(\")",
        "entry": "1308",
        "pc": "1003",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21186" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "int", "value": "0" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "max_size" } ] }],
        "trace": [
          {
          "pc": "1003",
          "xpc": "1308",
          "method": "push_test(2, \"(\")",
          "calltype": "process",
          "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?s[\"max_size\"]) and push value (2)",
          "npc": "1004",
          "fp": "3",
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "1004",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "contexts": "5",
          "pc": "1003"
        },
        {
          "code": "2-ary >=",
          "explain": "pop 2 values (2, 0); check if second value is greater than or equal to the first; push result (False)",
          "npc": "1005",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1004"
        },
        {
          "code": "JumpCond False 1019",
          "explain": "pop value (False), compare to False, and jump to 1019 if the same",
          "npc": "1019",
          "pop": "1",
          "push": [ ],
          "pc": "1005"
        },
        {
          "code": "LoadVar s",
          "explain": "push value (?s) of variable \"s\"",
          "npc": "1020",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1019"
        },
        {
          "code": "Push \"stack\"",
          "explain": "push constant \"stack\"",
          "npc": "1021",
          "push": [ { "type": "atom", "value": "stack" } ],
          "pc": "1020"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"stack\") and an address (?s) and push the combined address (?s[\"stack\"])",
          "npc": "1022",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] } ],
          "pc": "1021"
        },
        {
          "code": "Push ?stack$list",
          "explain": "push constant ?stack$list",
          "npc": "1023",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "stack$list" } ] } ],
          "pc": "1022"
        },
        {
          "code": "Push \"append\"",
          "explain": "push constant \"append\"",
          "npc": "1024",
          "push": [ { "type": "atom", "value": "append" } ],
          "pc": "1023"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"append\") and an address (?stack$list) and push the combined address (?stack$list[\"append\"])",
          "npc": "1025",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "stack$list" }, { "type": "atom", "value": "append" } ] } ],
          "pc": "1024"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1026",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1025"
        },
        {
          "code": "LoadVar s",
          "explain": "push value (?s) of variable \"s\"",
          "npc": "1027",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1026"
        },
        {
          "code": "Push \"stack\"",
          "explain": "push constant \"stack\"",
          "npc": "1028",
          "push": [ { "type": "atom", "value": "stack" } ],
          "pc": "1027"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"stack\") and an address (?s) and push the combined address (?s[\"stack\"])",
          "npc": "1029",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] } ],
          "pc": "1028"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?s[\"stack\"], []); insert first value into the second; push result ([?s[\"stack\"]])",
          "npc": "1030",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] } ] } ],
          "pc": "1029"
        },
        {
          "code": "LoadVar c",
          "explain": "push value (\"(\") of variable \"c\"",
          "npc": "1031",
          "push": [ { "type": "atom", "value": "(" } ],
          "pc": "1030"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"(\", [?s[\"stack\"]]); insert first value into the second; push result ([?s[\"stack\"], \"(\"])",
          "npc": "1032",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] }, { "type": "atom", "value": "(" } ] } ],
          "pc": "1031"
        },
        {
          "code": "Address",
          "explain": "pop a key ([?s[\"stack\"], \"(\"]) and an address (?stack$list[\"append\"]) and push the combined address (?stack$list[\"append\"][[?s[\"stack\"], \"(\"]])",
          "npc": "1033",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "stack$list" }, { "type": "atom", "value": "append" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] }, { "type": "atom", "value": "(" } ] } ] } ],
          "pc": "1032"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d692b9": "1",
          "141260709": "1",
          "141260829": "1",
          "141260859": "1",
          "141260889": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "1412608b9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1418",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1418",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141260709",
          "fp": "1",
          "name": "push_test(1, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d692b9",
          "fp": "3",
          "name": "push_test(2, \"(\")",
          "entry": "1308",
          "pc": "1033",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "stack$list" }, { "type": "atom", "value": "append" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] }, { "type": "atom", "value": "(" } ] } ] }],
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "1033",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "141260829",
          "fp": "1",
          "name": "push_test(1, \")\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \")\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141260859",
          "fp": "1",
          "name": "pop_test(1)",
          "entry": "1337",
          "pc": "1337",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1337",
            "xpc": "1337",
            "method": "pop_test(1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "141260889",
          "fp": "1",
          "name": "validate_test()",
          "entry": "1360",
          "pc": "1360",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1360",
            "xpc": "1360",
            "method": "validate_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "257",
      "len": "1",
      "shared": { "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "ever_negative" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "max_size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "mutex" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "pop_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "problem_index" }, "value": { "type": "int", "value": "-1" } }, { "key": { "type": "atom", "value": "push_cond" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "stack" }, "value": { "type": "list", "value": [] } }, { "key": { "type": "atom", "value": "valid" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "valid_cond" }, "value": { "type": "dict", "value": [] } } ] } },
      "tid": "2",
      "name": "push_test(2, \"(\")",
      "context": {
        "tid": "2",
        "hvalue": "140d692b9",
        "fp": "1",
        "name": "push_test(2, \"(\")",
        "entry": "1308",
        "pc": "1033",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21186" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "stack$list" }, { "type": "atom", "value": "append" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] }, { "type": "atom", "value": "(" } ] } ] }],
        "trace": [
          {
          "pc": "1033",
          "xpc": "1308",
          "method": "push_test(2, \"(\")",
          "calltype": "process",
          "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop an address and push the value at the address",
          "npc": "1033",
          "fp": "3",
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "1033",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "failure": "Load: unknown address ?stack$list[\"append\"][[?s[\"stack\"], \"(\"]]",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "contexts": "5",
          "pc": "1033"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140c73639": "1",
          "141260709": "1",
          "141260829": "1",
          "141260859": "1",
          "141260889": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "1412608b9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1418",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1418",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141260709",
          "fp": "1",
          "name": "push_test(1, \"(\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": "(" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \"(\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140c73639",
          "fp": "3",
          "name": "push_test(2, \"(\")",
          "entry": "1308",
          "pc": "1033",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "char" }, "value": { "type": "atom", "value": "(" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "stack" } ] }],
          "trace": [
            {
            "pc": "1324",
            "xpc": "1308",
            "method": "push_test(2, \"(\")",
            "calltype": "process",
            "vars": { "char": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "2" } },
            "sp": 0
            },
            {
            "pc": "1033",
            "xpc": "989",
            "method": "push(?s, \"(\")",
            "calltype": "normal",
            "vars": { "c": { "type": "atom", "value": "(" }, "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
            "sp": 2
            }
          ],
          "failure": "Load: unknown address ?stack$list[\"append\"][[?s[\"stack\"], \"(\"]]",
          "this": { "type": "dict", "value": [] },
          "mode": "failed"
        },
        {
          "tid": "3",
          "hvalue": "141260829",
          "fp": "1",
          "name": "push_test(1, \")\")",
          "entry": "1308",
          "pc": "1308",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "atom", "value": ")" } ] }],
          "trace": [
            {
            "pc": "1308",
            "xpc": "1308",
            "method": "push_test(1, \")\")",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141260859",
          "fp": "1",
          "name": "pop_test(1)",
          "entry": "1337",
          "pc": "1337",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1337",
            "xpc": "1337",
            "method": "pop_test(1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "141260889",
          "fp": "1",
          "name": "validate_test()",
          "entry": "1360",
          "pc": "1360",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1360",
            "xpc": "1360",
            "method": "validate_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    }
  ],
  "code": [
    "Frame __init__()",
    "Jump 52",
    "Frame subseq(s, b, e)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu3",
    "LoadVar b",
    "DelVar b",
    "LoadVar e",
    "DelVar e",
    "Push 1",
    "2-ary -",
    "2-ary ..",
    "Push 0",
    "Cut(x)",
    "JumpCond False 25",
    "LoadVar $accu3",
    "DelVar $accu3",
    "LoadVar s",
    "LoadVar x",
    "DelVar x",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu3",
    "Jump 14",
    "DelVar s",
    "DelVar x",
    "LoadVar $accu3",
    "DelVar $accu3",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame append(s, e)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "2-ary +",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame head(s)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Apply",
    "StoreVar result",
    "Return",
    "Push PC(55)",
    "Builtin(list$tail)",
    "Jump 371",
    "Frame tail(s)",
    "DelVar result",
    "Push PC(2)",
    "Push ()",
    "LoadVar s",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "LoadVar s",
    "DelVar s",
    "1-ary len",
    "2-ary ListAdd",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sum(a)",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 87",
    "LoadVar result",
    "DelVar result",
    "LoadVar v",
    "DelVar v",
    "2-ary +",
    "StoreVar result",
    "Jump 78",
    "DelVar v",
    "Return",
    "Jump 371",
    "Frame set(a)",
    "DelVar result",
    "Push {}",
    "StoreVar $accu71",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 106",
    "LoadVar $accu71",
    "DelVar $accu71",
    "LoadVar v",
    "DelVar v",
    "2-ary SetAdd",
    "StoreVar $accu71",
    "Jump 97",
    "DelVar v",
    "LoadVar $accu71",
    "DelVar $accu71",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame list(a)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu87",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 128",
    "LoadVar $accu87",
    "DelVar $accu87",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu87",
    "Jump 119",
    "DelVar v",
    "LoadVar $accu87",
    "DelVar $accu87",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame values(d)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu103",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(_, v)",
    "DelVar _",
    "JumpCond False 151",
    "LoadVar $accu103",
    "DelVar $accu103",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu103",
    "Jump 141",
    "DelVar v",
    "LoadVar $accu103",
    "DelVar $accu103",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame items(d)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu119",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(k, v)",
    "JumpCond False 178",
    "LoadVar $accu119",
    "DelVar $accu119",
    "Push ()",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "2-ary ListAdd",
    "StoreVar $accu119",
    "Jump 164",
    "DelVar k",
    "DelVar v",
    "LoadVar $accu119",
    "DelVar $accu119",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame qsort(a)",
    "DelVar result",
    "LoadVar a",
    "Push ()",
    "2-ary ==",
    "JumpCond False 195",
    "DelVar a",
    "Push ()",
    "StoreVar result",
    "Jump 265",
    "Push ()",
    "Push PC(44)",
    "LoadVar a",
    "Apply",
    "2-ary ListAdd",
    "Push PC(55)",
    "LoadVar a",
    "DelVar a",
    "Apply",
    "2-ary ListAdd",
    "StoreVar (pivot, rest)",
    "Push ()",
    "StoreVar $accu156",
    "LoadVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 224",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary <",
    "JumpCond False 210",
    "LoadVar $accu156",
    "DelVar $accu156",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu156",
    "Jump 210",
    "DelVar v",
    "LoadVar $accu156",
    "DelVar $accu156",
    "StoreVar lower",
    "Push ()",
    "StoreVar $accu173",
    "LoadVar rest",
    "DelVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 247",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary >=",
    "JumpCond False 233",
    "LoadVar $accu173",
    "DelVar $accu173",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu173",
    "Jump 233",
    "DelVar v",
    "LoadVar $accu173",
    "DelVar $accu173",
    "StoreVar higher",
    "Push PC(185)",
    "LoadVar lower",
    "DelVar lower",
    "Apply",
    "Push ()",
    "LoadVar pivot",
    "DelVar pivot",
    "2-ary ListAdd",
    "Push PC(185)",
    "LoadVar higher",
    "DelVar higher",
    "Apply",
    "3-ary +",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sorted(d)",
    "DelVar result",
    "Push PC(185)",
    "Push PC(112)",
    "LoadVar d",
    "DelVar d",
    "Apply",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame reversed(d)",
    "DelVar result",
    "LoadVar d",
    "1-ary len",
    "StoreVar n",
    "Push ()",
    "StoreVar $accu216",
    "Push 1",
    "LoadVar n",
    "2-ary ..",
    "Push 0",
    "Cut(i)",
    "JumpCond False 302",
    "LoadVar $accu216",
    "DelVar $accu216",
    "LoadVar d",
    "LoadVar n",
    "LoadVar i",
    "DelVar i",
    "2-ary -",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu216",
    "Jump 289",
    "DelVar d",
    "DelVar i",
    "DelVar n",
    "LoadVar $accu216",
    "DelVar $accu216",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame empty()",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromSet(s)",
    "DelVar result",
    "Push {:}",
    "StoreVar $accu243",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Cut(elt)",
    "JumpCond False 333",
    "LoadVar $accu243",
    "DelVar $accu243",
    "LoadVar elt",
    "DelVar elt",
    "Push 1",
    "3-ary DictAdd",
    "StoreVar $accu243",
    "Jump 323",
    "DelVar elt",
    "LoadVar $accu243",
    "DelVar $accu243",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromList(a)",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 369",
    "LoadVar v",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 362",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 346",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Jump 346",
    "DelVar v",
    "Return",
    "Push PC(374)",
    "Builtin(bag$multiplicity)",
    "Jump 392",
    "Frame multiplicity(bg, elt)",
    "DelVar result",
    "LoadVar elt",
    "LoadVar bg",
    "2-ary in",
    "JumpCond False 387",
    "LoadVar bg",
    "DelVar bg",
    "LoadVar elt",
    "DelVar elt",
    "Apply",
    "StoreVar result",
    "Jump 391",
    "DelVar bg",
    "DelVar elt",
    "Push 0",
    "StoreVar result",
    "Return",
    "Push PC(395)",
    "Builtin(bag$size)",
    "Jump 414",
    "Frame size(bg)",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar bg",
    "DelVar bg",
    "Push 0",
    "Cut(_, c)",
    "DelVar _",
    "JumpCond False 412",
    "LoadVar result",
    "DelVar result",
    "LoadVar c",
    "DelVar c",
    "2-ary +",
    "StoreVar result",
    "Jump 402",
    "DelVar c",
    "Return",
    "Push PC(417)",
    "Builtin(bag$bmin)",
    "Jump 433",
    "Frame bmin(bg)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary min",
    "StoreVar result",
    "Return",
    "Push PC(436)",
    "Builtin(bag$bmax)",
    "Jump 461",
    "Frame bmax(bg)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary max",
    "StoreVar result",
    "Return",
    "Jump 461",
    "Frame bchoose(bg)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "Choose",
    "StoreVar result",
    "Return",
    "Push PC(464)",
    "Builtin(bag$add)",
    "Jump 490",
    "Frame add(bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 483",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 489",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Return",
    "Push PC(493)",
    "Builtin(bag$remove)",
    "Jump 1303",
    "Frame remove(bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 510",
    "Push ?result",
    "LoadVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary -",
    "StoreVar [result]",
    "LoadVar result",
    "LoadVar elt",
    "Apply",
    "Push 0",
    "2-ary <=",
    "JumpCond False 521",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "DelVar [result]",
    "DelVar elt",
    "Return",
    "Jump 1303",
    "Frame combinations(bg, k)",
    "DelVar result",
    "LoadVar k",
    "Push 0",
    "2-ary ==",
    "JumpCond False 535",
    "DelVar bg",
    "DelVar k",
    "Push { {:} }",
    "StoreVar result",
    "Jump 616",
    "Push PC(395)",
    "LoadVar bg",
    "Apply",
    "StoreVar n",
    "LoadVar k",
    "LoadVar n",
    "2-ary >",
    "JumpCond False 549",
    "DelVar bg",
    "DelVar k",
    "DelVar n",
    "Push {}",
    "StoreVar result",
    "Jump 616",
    "LoadVar k",
    "LoadVar n",
    "DelVar n",
    "2-ary ==",
    "JumpCond False 561",
    "DelVar k",
    "Push {}",
    "LoadVar bg",
    "DelVar bg",
    "2-ary SetAdd",
    "StoreVar result",
    "Jump 616",
    "Push PC(417)",
    "LoadVar bg",
    "Apply",
    "StoreVar hd",
    "Push PC(493)",
    "Push ()",
    "LoadVar bg",
    "DelVar bg",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "StoreVar tl",
    "Push {}",
    "StoreVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "Push 1",
    "2-ary -",
    "2-ary ListAdd",
    "Apply",
    "Push 0",
    "Cut(x)",
    "JumpCond False 601",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(464)",
    "Push ()",
    "LoadVar x",
    "DelVar x",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "2-ary SetAdd",
    "StoreVar $accu454",
    "Jump 586",
    "DelVar hd",
    "DelVar x",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "DelVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "Apply",
    "2-ary |",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame atomic_load(p)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "Load",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame atomic_store(p, v)",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "LoadVar v",
    "DelVar v",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame tas(lk)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar lk",
    "Load",
    "StoreVar result",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame cas(p, old, new)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "Load",
    "LoadVar old",
    "DelVar old",
    "2-ary ==",
    "StoreVar result",
    "LoadVar result",
    "JumpCond False 667",
    "LoadVar p",
    "DelVar p",
    "LoadVar new",
    "DelVar new",
    "Store",
    "DelVar new",
    "DelVar p",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame BinSema(acquired)",
    "DelVar result",
    "LoadVar acquired",
    "DelVar acquired",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame Lock()",
    "DelVar result",
    "Push PC(672)",
    "Push False",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame acquired(binsema)",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame acquire(binsema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar binsema",
    "Load",
    "1-ary not",
    "JumpCond False 703",
    "Jump 706",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 696",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame release(binsema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar binsema",
    "Load",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push False",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame held(binsema)",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame Condition()",
    "DelVar result",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame wait(c, lk)",
    "Push 0",
    "StoreVar cnt",
    "DelVar cnt",
    "Push ()",
    "Save",
    "Continue",
    "StoreVar ((), ctx)",
    "AtomicInc(lazy)",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "StoreVar cnt",
    "LoadVar c",
    "Push PC(464)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "LoadVar lk",
    "Push False",
    "Store",
    "AtomicDec",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar lk",
    "Load",
    "1-ary not",
    "JumpCond False 795",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "LoadVar cnt",
    "2-ary <=",
    "Jump 796",
    "Push False",
    "JumpCond False 801",
    "DelVar c",
    "DelVar cnt",
    "DelVar ctx",
    "Jump 804",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 778",
    "ReadonlyDec",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame notify(c)",
    "AtomicInc(lazy)",
    "LoadVar c",
    "Load",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "2-ary !=",
    "JumpCond False 835",
    "LoadVar c",
    "Push PC(493)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "Push PC(453)",
    "LoadVar c",
    "DelVar c",
    "Load",
    "Apply",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "DelVar c",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame notifyAll(c)",
    "AtomicInc(lazy)",
    "LoadVar c",
    "DelVar c",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame Semaphore(cnt)",
    "DelVar result",
    "LoadVar cnt",
    "DelVar cnt",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame P(sema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar sema",
    "Load",
    "Push 0",
    "2-ary >",
    "JumpCond False 866",
    "Jump 869",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 858",
    "ReadonlyDec",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame V(sema)",
    "AtomicInc(lazy)",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame Queue()",
    "DelVar result",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame get(q)",
    "DelVar result",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar q",
    "Load",
    "Push ()",
    "2-ary !=",
    "JumpCond False 908",
    "Jump 911",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 899",
    "ReadonlyDec",
    "Push PC(44)",
    "LoadVar q",
    "Load",
    "Apply",
    "StoreVar result",
    "LoadVar q",
    "Push PC(55)",
    "LoadVar q",
    "DelVar q",
    "Load",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame put(q, item)",
    "AtomicInc(lazy)",
    "LoadVar q",
    "Push PC(32)",
    "Push ()",
    "LoadVar q",
    "DelVar q",
    "Load",
    "2-ary ListAdd",
    "LoadVar item",
    "DelVar item",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1303",
    "Frame Stack(l)",
    "DelVar result",
    "Push {:}",
    "Push \"mutex\"",
    "Push PC(679)",
    "Push ()",
    "Apply",
    "3-ary DictAdd",
    "Push \"push_cond\"",
    "Push PC(738)",
    "Push ()",
    "Apply",
    "3-ary DictAdd",
    "Push \"pop_cond\"",
    "Push PC(738)",
    "Push ()",
    "Apply",
    "3-ary DictAdd",
    "Push \"valid_cond\"",
    "Push PC(738)",
    "Push ()",
    "Apply",
    "3-ary DictAdd",
    "Push \"stack\"",
    "Push ()",
    "3-ary DictAdd",
    "Push \"size\"",
    "Push 0",
    "3-ary DictAdd",
    "Push \"max_size\"",
    "LoadVar l",
    "DelVar l",
    "3-ary DictAdd",
    "Push \"valid\"",
    "Push 0",
    "3-ary DictAdd",
    "Push \"ever_negative\"",
    "Push False",
    "3-ary DictAdd",
    "Push \"problem_index\"",
    "Push -1",
    "3-ary DictAdd",
    "StoreVar result",
    "Return",
    "Jump 1303",
    "Frame push(s, c)",
    "Push PC(695)",
    "LoadVar s",
    "Push \"mutex\"",
    "Address",
    "Apply",
    "Pop",
    "LoadVar s",
    "Push \"size\"",
    "Address",
    "Load",
    "LoadVar s",
    "Push \"max_size\"",
    "Address",
    "Load",
    "2-ary >=",
    "JumpCond False 1019",
    "Push PC(746)",
    "Push ()",
    "LoadVar s",
    "Push \"push_cond\"",
    "Address",
    "2-ary ListAdd",
    "LoadVar s",
    "Push \"mutex\"",
    "Address",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Jump 996",
    "LoadVar s",
    "Push \"stack\"",
    "Address",
    "Push ?stack$list",
    "Push \"append\"",
    "Address",
    "Push ()",
    "LoadVar s",
    "Push \"stack\"",
    "Address",
    "2-ary ListAdd",
    "LoadVar c",
    "2-ary ListAdd",
    "Address",
    "Load",
    "Store",
    "LoadVar s",
    "Push \"size\"",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "LoadVar c",
    "Push \"(\"",
    "2-ary ==",
    "JumpCond False 1057",
    "DelVar c",
    "LoadVar s",
    "Push \"valid\"",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "Jump 1070",
    "LoadVar c",
    "DelVar c",
    "Push \")\"",
    "2-ary ==",
    "JumpCond False 1070",
    "LoadVar s",
    "Push \"valid\"",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "Load stack$valid",
    "Push 0",
    "2-ary <",
    "JumpCond False 1079",
    "LoadVar s",
    "Push \"ever_negative\"",
    "Apply",
    "1-ary not",
    "Jump 1080",
    "Push False",
    "JumpCond False 1095",
    "LoadVar s",
    "Push \"ever_negative\"",
    "Address",
    "Push True",
    "Store",
    "LoadVar s",
    "Push \"problem_index\"",
    "Address",
    "LoadVar s",
    "Push \"size\"",
    "Apply",
    "Push 1",
    "2-ary -",
    "Store",
    "Push PC(812)",
    "LoadVar s",
    "Push \"pop_cond\"",
    "Address",
    "Apply",
    "Pop",
    "LoadVar s",
    "Push \"size\"",
    "Apply",
    "LoadVar s",
    "Push \"max_size\"",
    "Apply",
    "2-ary ==",
    "JumpCond False 1115",
    "Push PC(812)",
    "LoadVar s",
    "Push \"valid_cond\"",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar s",
    "DelVar s",
    "Push \"mutex\"",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1303",
    "Frame pop(s)",
    "DelVar result",
    "Push PC(695)",
    "LoadVar s",
    "Push \"mutex\"",
    "Address",
    "Apply",
    "Pop",
    "LoadVar s",
    "Push \"size\"",
    "Address",
    "Load",
    "Push 0",
    "2-ary <=",
    "JumpCond False 1152",
    "Push PC(746)",
    "Push ()",
    "LoadVar s",
    "Push \"pop_cond\"",
    "Address",
    "2-ary ListAdd",
    "LoadVar s",
    "Push \"mutex\"",
    "Address",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Jump 1132",
    "Push ?stack$list",
    "Push \"reversed\"",
    "Address",
    "LoadVar s",
    "Push \"stack\"",
    "Apply",
    "Address",
    "Load",
    "StoreVar rev",
    "Push ?stack$list",
    "Push \"head\"",
    "Address",
    "LoadVar rev",
    "Address",
    "Load",
    "StoreVar result",
    "LoadVar s",
    "Push \"stack\"",
    "Address",
    "Push ?stack$list",
    "Push \"reversed\"",
    "Address",
    "Push ?stack$list",
    "Push \"tail\"",
    "Address",
    "LoadVar rev",
    "DelVar rev",
    "Address",
    "Load",
    "Address",
    "Load",
    "Store",
    "LoadVar s",
    "Push \"size\"",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "LoadVar result",
    "Push \"(\"",
    "2-ary ==",
    "JumpCond False 1205",
    "LoadVar s",
    "Push \"valid\"",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "Jump 1217",
    "LoadVar result",
    "Push \")\"",
    "2-ary ==",
    "JumpCond False 1217",
    "LoadVar s",
    "Push \"valid\"",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "LoadVar s",
    "Push \"size\"",
    "Apply",
    "LoadVar s",
    "Push \"problem_index\"",
    "Apply",
    "2-ary ==",
    "JumpCond False 1235",
    "LoadVar s",
    "Push \"problem_index\"",
    "Address",
    "Push -1",
    "Store",
    "LoadVar s",
    "Push \"ever_negative\"",
    "Address",
    "Push False",
    "Store",
    "Push PC(812)",
    "LoadVar s",
    "Push \"push_cond\"",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar s",
    "DelVar s",
    "Push \"mutex\"",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1303",
    "Frame validate(s)",
    "DelVar result",
    "Push PC(695)",
    "LoadVar s",
    "Push \"mutex\"",
    "Address",
    "Apply",
    "Pop",
    "LoadVar s",
    "Push \"size\"",
    "Address",
    "Load",
    "LoadVar s",
    "Push \"max_size\"",
    "Address",
    "Load",
    "2-ary !=",
    "JumpCond False 1281",
    "Push PC(746)",
    "Push ()",
    "LoadVar s",
    "Push \"valid_cond\"",
    "Address",
    "2-ary ListAdd",
    "LoadVar s",
    "Push \"mutex\"",
    "Address",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Jump 1258",
    "LoadVar s",
    "Push \"ever_negative\"",
    "Apply",
    "Load stack$false",
    "2-ary ==",
    "JumpCond False 1293",
    "LoadVar s",
    "Push \"valid\"",
    "Apply",
    "Push 0",
    "2-ary ==",
    "Jump 1294",
    "Push False",
    "StoreVar result",
    "Push PC(714)",
    "LoadVar s",
    "DelVar s",
    "Push \"mutex\"",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Push PC(944)",
    "Push 2",
    "Apply",
    "Store s",
    "Jump 1373",
    "Frame push_test(self, char)",
    "Push ()",
    "Push \"call push\"",
    "2-ary ListAdd",
    "LoadVar self",
    "2-ary ListAdd",
    "LoadVar char",
    "2-ary ListAdd",
    "Print",
    "Push PC(989)",
    "Push ()",
    "Push ?s",
    "2-ary ListAdd",
    "LoadVar char",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push ()",
    "Push \"done push\"",
    "2-ary ListAdd",
    "LoadVar self",
    "DelVar self",
    "2-ary ListAdd",
    "LoadVar char",
    "DelVar char",
    "2-ary ListAdd",
    "Print",
    "Return",
    "Jump 1373",
    "Frame pop_test(self)",
    "Push ()",
    "Push \"call pop\"",
    "2-ary ListAdd",
    "LoadVar self",
    "2-ary ListAdd",
    "Print",
    "Push PC(1124)",
    "Push ?s",
    "Apply",
    "StoreVar v",
    "Push ()",
    "Push \"done pop\"",
    "2-ary ListAdd",
    "LoadVar self",
    "DelVar self",
    "2-ary ListAdd",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "Print",
    "Return",
    "Jump 1373",
    "Frame validate_test()",
    "Push \"call validate\"",
    "Print",
    "Push PC(1250)",
    "Push ?s",
    "Apply",
    "JumpCond False 1370",
    "Push \"hooray :)\"",
    "Print",
    "Jump 1372",
    "Push \"boo :(\"",
    "Print",
    "Return",
    "Push { 1, 2 }",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1387",
    "Push PC(1308)",
    "Push ()",
    "LoadVar i",
    "DelVar i",
    "2-ary ListAdd",
    "Push \"(\"",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Jump 1375",
    "DelVar i",
    "Push { 1 }",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1402",
    "Push PC(1308)",
    "Push ()",
    "LoadVar i",
    "DelVar i",
    "2-ary ListAdd",
    "Push \")\"",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Jump 1390",
    "DelVar i",
    "Push { 1 }",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1413",
    "Push PC(1337)",
    "LoadVar i",
    "DelVar i",
    "Push {:}",
    "Spawn",
    "Jump 1405",
    "DelVar i",
    "Push PC(1360)",
    "Push ()",
    "Push {:}",
    "Spawn",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "jump over method definition: set program counter to 52",
    "start of method subseq",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu3",
    "push the value of b",
    "delete method variable b",
    "push the value of e",
    "delete method variable e",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to x; push False or True depending on success",
    "check if loop is done: pop a value and jump to 25 if the value is False",
    "load accumulator: push the value of $accu3",
    "delete method variable $accu3",
    "push the value of s",
    "push the value of x",
    "delete method variable x",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu3",
    "set program counter to 14",
    "delete method variable s",
    "delete method variable x",
    "load final accumulator result: push the value of $accu3",
    "delete method variable $accu3",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 52",
    "start of method append",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "building a tuple: push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 52",
    "start of method head",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(55)",
    "top of stack is a built-in operation called list$tail",
    "jump over method definition: set program counter to 371",
    "start of method tail",
    "delete method variable result",
    "push constant PC(2)",
    "building a tuple: push constant ()",
    "push the value of s",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of s",
    "delete method variable s",
    "pop 1 value and push the result of applying len",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method sum",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 87 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 78",
    "delete method variable v",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method set",
    "delete method variable result",
    "initialize accumulator for set comprehension: push constant {}",
    "initialize accumulator for set comprehension: pop a value and store in $accu71",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 106 if the value is False",
    "load accumulator: push the value of $accu71",
    "delete method variable $accu71",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying SetAdd",
    "update accumulator: pop a value and store in $accu71",
    "set program counter to 97",
    "delete method variable v",
    "load final accumulator result: push the value of $accu71",
    "delete method variable $accu71",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method list",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu87",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 128 if the value is False",
    "load accumulator: push the value of $accu87",
    "delete method variable $accu87",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu87",
    "set program counter to 119",
    "delete method variable v",
    "load final accumulator result: push the value of $accu87",
    "delete method variable $accu87",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method values",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu103",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to _:v; push False or True depending on success",
    "delete method variable _",
    "check if loop is done: pop a value and jump to 151 if the value is False",
    "load accumulator: push the value of $accu103",
    "delete method variable $accu103",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu103",
    "set program counter to 141",
    "delete method variable v",
    "load final accumulator result: push the value of $accu103",
    "delete method variable $accu103",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method items",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu119",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to k:v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 178 if the value is False",
    "load accumulator: push the value of $accu119",
    "delete method variable $accu119",
    "building a tuple: push constant ()",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu119",
    "set program counter to 164",
    "delete method variable k",
    "delete method variable v",
    "load final accumulator result: push the value of $accu119",
    "delete method variable $accu119",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method qsort",
    "delete method variable result",
    "push the value of a",
    "push constant ()",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 195 if the value is False",
    "delete method variable a",
    "push constant ()",
    "pop a value and store in result",
    "set program counter to 265",
    "building a tuple: push constant ()",
    "push constant PC(44)",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(55)",
    "push the value of a",
    "delete method variable a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in (pivot, rest)",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu156",
    "push the value of rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 224 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 210 if the value is False",
    "load accumulator: push the value of $accu156",
    "delete method variable $accu156",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu156",
    "set program counter to 210",
    "delete method variable v",
    "load final accumulator result: push the value of $accu156",
    "delete method variable $accu156",
    "pop a value and store in lower",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu173",
    "push the value of rest",
    "delete method variable rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 247 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying >=",
    "pop a value and jump to 233 if the value is False",
    "load accumulator: push the value of $accu173",
    "delete method variable $accu173",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu173",
    "set program counter to 233",
    "delete method variable v",
    "load final accumulator result: push the value of $accu173",
    "delete method variable $accu173",
    "pop a value and store in higher",
    "push constant PC(185)",
    "push the value of lower",
    "delete method variable lower",
    "pop a pc or dictionary f and an index i and push f(i)",
    "building a tuple: push constant ()",
    "push the value of pivot",
    "delete method variable pivot",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(185)",
    "push the value of higher",
    "delete method variable higher",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method sorted",
    "delete method variable result",
    "push constant PC(185)",
    "push constant PC(112)",
    "push the value of d",
    "delete method variable d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method reversed",
    "delete method variable result",
    "push the value of d",
    "pop 1 value and push the result of applying len",
    "pop a value and store in n",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu216",
    "push constant 1",
    "push the value of n",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 302 if the value is False",
    "load accumulator: push the value of $accu216",
    "delete method variable $accu216",
    "push the value of d",
    "push the value of n",
    "push the value of i",
    "delete method variable i",
    "pop 2 values and push the result of applying -",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu216",
    "set program counter to 289",
    "delete method variable d",
    "delete method variable i",
    "delete method variable n",
    "load final accumulator result: push the value of $accu216",
    "delete method variable $accu216",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method empty",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method fromSet",
    "delete method variable result",
    "initialize accumulator for dict comprehension: push constant {:}",
    "initialize accumulator for dict comprehension: pop a value and store in $accu243",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "get next element and assign to elt; push False or True depending on success",
    "check if loop is done: pop a value and jump to 333 if the value is False",
    "load accumulator: push the value of $accu243",
    "delete method variable $accu243",
    "push the value of elt",
    "delete method variable elt",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "update accumulator: pop a value and store in $accu243",
    "set program counter to 323",
    "delete method variable elt",
    "load final accumulator result: push the value of $accu243",
    "delete method variable $accu243",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method fromList",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 369 if the value is False",
    "push the value of v",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 362 if the value is False",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "delete method variable v",
    "restore caller method state and push result",
    "push constant PC(374)",
    "top of stack is a built-in operation called bag$multiplicity",
    "jump over method definition: set program counter to 392",
    "start of method multiplicity",
    "delete method variable result",
    "push the value of elt",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 387 if the value is False",
    "push the value of bg",
    "delete method variable bg",
    "push the value of elt",
    "delete method variable elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "set program counter to 391",
    "delete method variable bg",
    "delete method variable elt",
    "push constant 0",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(395)",
    "top of stack is a built-in operation called bag$size",
    "jump over method definition: set program counter to 414",
    "start of method size",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of bg",
    "delete method variable bg",
    "push constant 0",
    "get next element and assign to _:c; push False or True depending on success",
    "delete method variable _",
    "check if loop is done: pop a value and jump to 412 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of c",
    "delete method variable c",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 402",
    "delete method variable c",
    "restore caller method state and push result",
    "push constant PC(417)",
    "top of stack is a built-in operation called bag$bmin",
    "jump over method definition: set program counter to 433",
    "start of method bmin",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying min",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(436)",
    "top of stack is a built-in operation called bag$bmax",
    "jump over method definition: set program counter to 461",
    "start of method bmax",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying max",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 461",
    "start of method bchoose",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop a set value and push one of its elements",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(464)",
    "top of stack is a built-in operation called bag$add",
    "jump over method definition: set program counter to 490",
    "start of method add",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 483 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 489",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "restore caller method state and push result",
    "push constant PC(493)",
    "top of stack is a built-in operation called bag$remove",
    "jump over method definition: set program counter to 1303",
    "start of method remove",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 510 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and the address of a method variable and store the value at that address",
    "push the value of result",
    "push the value of elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying <=",
    "pop a value and jump to 521 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "pop an address of a method variable and delete that variable",
    "delete method variable elt",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method combinations",
    "delete method variable result",
    "push the value of k",
    "push constant 0",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 535 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "push constant { {:} }",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(395)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in n",
    "push the value of k",
    "push the value of n",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 549 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "delete method variable n",
    "push constant {}",
    "pop a value and store in result",
    "set program counter to 616",
    "push the value of k",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 561 if the value is False",
    "delete method variable k",
    "push constant {}",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(417)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in hd",
    "push constant PC(493)",
    "building a tuple: push constant ()",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in tl",
    "initialize accumulator for set comprehension: push constant {}",
    "initialize accumulator for set comprehension: pop a value and store in $accu454",
    "push constant PC(524)",
    "building a tuple: push constant ()",
    "push the value of tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "get next element and assign to x; push False or True depending on success",
    "check if loop is done: pop a value and jump to 601 if the value is False",
    "load accumulator: push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(464)",
    "building a tuple: push constant ()",
    "push the value of x",
    "delete method variable x",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying SetAdd",
    "update accumulator: pop a value and store in $accu454",
    "set program counter to 586",
    "delete method variable hd",
    "delete method variable x",
    "load final accumulator result: push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(524)",
    "building a tuple: push constant ()",
    "push the value of tl",
    "delete method variable tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying |",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method atomic_load",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method atomic_store",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "push the value of v",
    "delete method variable v",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method tas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method cas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "pop an address and push the value at the address",
    "push the value of old",
    "delete method variable old",
    "pop 2 values and push the result of applying ==",
    "pop a value and store in result",
    "push the value of result",
    "pop a value and jump to 667 if the value is False",
    "push the value of p",
    "delete method variable p",
    "push the value of new",
    "delete method variable new",
    "pop a value and an address and store the value at the address",
    "delete method variable new",
    "delete method variable p",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method BinSema",
    "delete method variable result",
    "push the value of acquired",
    "delete method variable acquired",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method Lock",
    "delete method variable result",
    "push constant PC(672)",
    "push constant False",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method acquired",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method acquire",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 703 if the value is False",
    "set program counter to 706",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 696",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method release",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method held",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method Condition",
    "delete method variable result",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method wait",
    "push constant 0",
    "pop a value and store in cnt",
    "delete method variable cnt",
    "push constant ()",
    "pop a value and save context",
    "a no-op, must follow a Stop operation",
    "pop a value and store in ((), ctx)",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(374)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in cnt",
    "push the value of c",
    "push constant PC(464)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "push the value of lk",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 795 if the value is False",
    "push constant PC(374)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of cnt",
    "pop 2 values and push the result of applying <=",
    "set program counter to 796",
    "push constant False",
    "pop a value and jump to 801 if the value is False",
    "delete method variable c",
    "delete method variable cnt",
    "delete method variable ctx",
    "set program counter to 804",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 778",
    "decrement readonly counter of context",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method notify",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 835 if the value is False",
    "push the value of c",
    "push constant PC(493)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(453)",
    "push the value of c",
    "delete method variable c",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "delete method variable c",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method notifyAll",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "delete method variable c",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method Semaphore",
    "delete method variable result",
    "push the value of cnt",
    "delete method variable cnt",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method P",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of sema",
    "pop an address and push the value at the address",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 866 if the value is False",
    "set program counter to 869",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 858",
    "decrement readonly counter of context",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method V",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method Queue",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method get",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant ()",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 908 if the value is False",
    "set program counter to 911",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 899",
    "decrement readonly counter of context",
    "push constant PC(44)",
    "push the value of q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "push the value of q",
    "push constant PC(55)",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method put",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of q",
    "push constant PC(32)",
    "building a tuple: push constant ()",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of item",
    "delete method variable item",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method Stack",
    "delete method variable result",
    "push constant {:}",
    "push constant \"mutex\"",
    "push constant PC(679)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"push_cond\"",
    "push constant PC(738)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"pop_cond\"",
    "push constant PC(738)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"valid_cond\"",
    "push constant PC(738)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"stack\"",
    "push constant ()",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"size\"",
    "push constant 0",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"max_size\"",
    "push the value of l",
    "delete method variable l",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"valid\"",
    "push constant 0",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"ever_negative\"",
    "push constant False",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"problem_index\"",
    "push constant -1",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method push",
    "push constant PC(695)",
    "push the value of s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of s",
    "push constant \"size\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of s",
    "push constant \"max_size\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying >=",
    "pop a value and jump to 1019 if the value is False",
    "push constant PC(746)",
    "building a tuple: push constant ()",
    "push the value of s",
    "push constant \"push_cond\"",
    "combine the top two values on the stack into an address and push the result",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "set program counter to 996",
    "push the value of s",
    "push constant \"stack\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant ?stack$list",
    "push constant \"append\"",
    "combine the top two values on the stack into an address and push the result",
    "building a tuple: push constant ()",
    "push the value of s",
    "push constant \"stack\"",
    "combine the top two values on the stack into an address and push the result",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of c",
    "pop 2 values and push the result of applying ListAdd",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and an address and store the value at the address",
    "push the value of s",
    "push constant \"size\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push the value of c",
    "push constant \"(\"",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1057 if the value is False",
    "delete method variable c",
    "push the value of s",
    "push constant \"valid\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "set program counter to 1070",
    "push the value of c",
    "delete method variable c",
    "push constant \")\"",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1070 if the value is False",
    "push the value of s",
    "push constant \"valid\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push value of shared variable valid",
    "push constant 0",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 1079 if the value is False",
    "push the value of s",
    "push constant \"ever_negative\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 1 value and push the result of applying not",
    "set program counter to 1080",
    "push constant False",
    "pop a value and jump to 1095 if the value is False",
    "push the value of s",
    "push constant \"ever_negative\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "push the value of s",
    "push constant \"problem_index\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of s",
    "push constant \"size\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push constant PC(812)",
    "push the value of s",
    "push constant \"pop_cond\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of s",
    "push constant \"size\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of s",
    "push constant \"max_size\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1115 if the value is False",
    "push constant PC(812)",
    "push the value of s",
    "push constant \"valid_cond\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of s",
    "delete method variable s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method pop",
    "delete method variable result",
    "push constant PC(695)",
    "push the value of s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of s",
    "push constant \"size\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push constant 0",
    "pop 2 values and push the result of applying <=",
    "pop a value and jump to 1152 if the value is False",
    "push constant PC(746)",
    "building a tuple: push constant ()",
    "push the value of s",
    "push constant \"pop_cond\"",
    "combine the top two values on the stack into an address and push the result",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "set program counter to 1132",
    "push constant ?stack$list",
    "push constant \"reversed\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of s",
    "push constant \"stack\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in rev",
    "push constant ?stack$list",
    "push constant \"head\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of rev",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of s",
    "push constant \"stack\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant ?stack$list",
    "push constant \"reversed\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant ?stack$list",
    "push constant \"tail\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of rev",
    "delete method variable rev",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and an address and store the value at the address",
    "push the value of s",
    "push constant \"size\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push the value of result",
    "push constant \"(\"",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1205 if the value is False",
    "push the value of s",
    "push constant \"valid\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "set program counter to 1217",
    "push the value of result",
    "push constant \")\"",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1217 if the value is False",
    "push the value of s",
    "push constant \"valid\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push the value of s",
    "push constant \"size\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of s",
    "push constant \"problem_index\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1235 if the value is False",
    "push the value of s",
    "push constant \"problem_index\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant -1",
    "pop a value and an address and store the value at the address",
    "push the value of s",
    "push constant \"ever_negative\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "push constant PC(812)",
    "push the value of s",
    "push constant \"push_cond\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of s",
    "delete method variable s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1303",
    "start of method validate",
    "delete method variable result",
    "push constant PC(695)",
    "push the value of s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of s",
    "push constant \"size\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of s",
    "push constant \"max_size\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 1281 if the value is False",
    "push constant PC(746)",
    "building a tuple: push constant ()",
    "push the value of s",
    "push constant \"valid_cond\"",
    "combine the top two values on the stack into an address and push the result",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "set program counter to 1258",
    "push the value of s",
    "push constant \"ever_negative\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push value of shared variable false",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1293 if the value is False",
    "push the value of s",
    "push constant \"valid\"",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying ==",
    "set program counter to 1294",
    "push constant False",
    "pop a value and store in result",
    "push constant PC(714)",
    "push the value of s",
    "delete method variable s",
    "push constant \"mutex\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "push constant PC(944)",
    "push constant 2",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable s",
    "jump over method definition: set program counter to 1373",
    "start of method push_test",
    "building a tuple: push constant ()",
    "push constant \"call push\"",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of self",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of char",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and add to print history",
    "push constant PC(989)",
    "building a tuple: push constant ()",
    "push constant ?s",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of char",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "building a tuple: push constant ()",
    "push constant \"done push\"",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of self",
    "delete method variable self",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of char",
    "delete method variable char",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1373",
    "start of method pop_test",
    "building a tuple: push constant ()",
    "push constant \"call pop\"",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of self",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and add to print history",
    "push constant PC(1124)",
    "push constant ?s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in v",
    "building a tuple: push constant ()",
    "push constant \"done pop\"",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of self",
    "delete method variable self",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1373",
    "start of method validate_test",
    "push constant \"call validate\"",
    "pop a value and add to print history",
    "push constant PC(1250)",
    "push constant ?s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and jump to 1370 if the value is False",
    "push constant \"hooray :)\"",
    "pop a value and add to print history",
    "set program counter to 1372",
    "push constant \"boo :(\"",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "push constant { 1, 2 }",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 1387 if the value is False",
    "push constant PC(1308)",
    "building a tuple: push constant ()",
    "push the value of i",
    "delete method variable i",
    "pop 2 values and push the result of applying ListAdd",
    "push constant \"(\"",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 1375",
    "delete method variable i",
    "push constant { 1 }",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 1402 if the value is False",
    "push constant PC(1308)",
    "building a tuple: push constant ()",
    "push the value of i",
    "delete method variable i",
    "pop 2 values and push the result of applying ListAdd",
    "push constant \")\"",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 1390",
    "delete method variable i",
    "push constant { 1 }",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 1413 if the value is False",
    "push constant PC(1337)",
    "push the value of i",
    "delete method variable i",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 1405",
    "delete method variable i",
    "push constant PC(1360)",
    "push constant ()",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "398": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "12", "stmt": [24,5,24,14], "code": "    result = 0" },
    "1114": { "file": "stackmon.hny", "line": "43", "column": "9", "endline": "43", "endcolumn": "30", "stmt": [43,9,43,30], "code": "        notify(?s->valid_cond)" },
    "813": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "16", "stmt": [56,16,58,6], "code": "    atomically if !c != bag.empty():" },
    "115": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1321": { "file": "stacktest.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "23", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "209": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "193": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "9", "endline": "40", "endcolumn": "16", "stmt": [40,9,40,19], "code": "        result = []" },
    "1410": { "file": "stacktest.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "21", "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "895": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "12", "stmt": [73,5,73,15], "code": "    result = []" },
    "72": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "stmt": [17,5,17,14], "code": "    result = 0" },
    "1032": { "file": "stackmon.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "40", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "829": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "143": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "307": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "9", "endline": "54", "endcolumn": "16", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "263": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "60", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1389": { "file": "stacktest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "3", "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "845": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "590": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1401": { "file": "stacktest.hny", "line": "28", "column": "25", "endline": "28", "endcolumn": "25", "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "43": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "3", "stmt": [8,1,8,12], "code": "def head(s):" },
    "1159": { "file": "stackmon.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "36", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "1148": { "file": "stackmon.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "36", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "879": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "3", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "835": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "36", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "50": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "12", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "993": { "file": "stackmon.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "21", "stmt": [25,5,25,22], "code": "    acquire(?s->mutex)" },
    "540": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "20", "endline": "63", "endcolumn": "20", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "665": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "stmt": [19,13,19,20], "code": "            !p = new" },
    "259": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "52", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "705": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "32", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "1136": { "file": "stackmon.hny", "line": "50", "column": "22", "endline": "50", "endcolumn": "22", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "889": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "943": { "file": "stackmon.hny", "line": "3", "column": "1", "endline": "3", "endcolumn": "3", "stmt": [3,1,3,13], "code": "def Stack(l):" },
    "530": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "188": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "13", "endline": "39", "endcolumn": "14", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "942": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "17", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "454": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "357": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1373": { "file": "stacktest.hny", "line": "26", "column": "11", "endline": "26", "endcolumn": "23", "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "755": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "34", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "650": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "3", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "1336": { "file": "stacktest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "3", "stmt": [14,1,14,19], "code": "def pop_test(self):" },
    "1303": { "file": "stacktest.hny", "line": "7", "column": "5", "endline": "7", "endcolumn": "15", "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "932": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "354": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "338": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "1310": { "file": "stacktest.hny", "line": "10", "column": "11", "endline": "10", "endcolumn": "21", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "933": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "600": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "74", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1125": { "file": "stackmon.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "11", "stmt": [49,5,49,22], "code": "    acquire(?s->mutex)" },
    "878": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "12", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "418": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "348": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "12", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "304": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "992": { "file": "stackmon.hny", "line": "25", "column": "17", "endline": "25", "endcolumn": "21", "stmt": [25,5,25,22], "code": "    acquire(?s->mutex)" },
    "1362": { "file": "stacktest.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "26", "stmt": [20,5,20,26], "code": "    print(\"call validate\")" },
    "888": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "23", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "404": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1158": { "file": "stackmon.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "36", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "1261": { "file": "stackmon.hny", "line": "73", "column": "9", "endline": "73", "endcolumn": "15", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "1235": { "file": "stackmon.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "10", "stmt": [67,5,67,25], "code": "    notify(?s->push_cond)" },
    "62": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "419": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "1124": { "file": "stackmon.hny", "line": "47", "column": "1", "endline": "47", "endcolumn": "11", "stmt": [47,1,47,11], "code": "def pop(s):" },
    "914": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "28", "endline": "77", "endcolumn": "29", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "828": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "42": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "17", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "754": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "48", "endcolumn": "18", "stmt": [48,9,48,19], "code": "        atomically:" },
    "1372": { "file": "stacktest.hny", "line": "19", "column": "1", "endline": "19", "endcolumn": "20", "stmt": [19,1,19,20], "code": "def validate_test():" },
    "403": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1031": { "file": "stackmon.hny", "line": "29", "column": "28", "endline": "29", "endcolumn": "39", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "128": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "114": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1311": { "file": "stacktest.hny", "line": "10", "column": "11", "endline": "10", "endcolumn": "33", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "453": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "16", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "1201": { "file": "stackmon.hny", "line": "60", "column": "25", "endline": "60", "endcolumn": "25", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "566": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "178": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1320": { "file": "stacktest.hny", "line": "11", "column": "16", "endline": "11", "endcolumn": "23", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "931": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1023": { "file": "stackmon.hny", "line": "29", "column": "20", "endline": "29", "endcolumn": "26", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "591": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "564": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "17", "endline": "68", "endcolumn": "24", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "704": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "915": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "30", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "1213": { "file": "stackmon.hny", "line": "62", "column": "13", "endline": "62", "endcolumn": "25", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "768": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "27", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "707": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "208": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "34", "endline": "43", "endcolumn": "37", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1337": { "file": "stacktest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "19", "stmt": [14,1,14,19], "code": "def pop_test(self):" },
    "1223": { "file": "stackmon.hny", "line": "63", "column": "12", "endline": "63", "endcolumn": "36", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "565": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "49", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "531": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "1302": { "file": "stackmon.hny", "line": "70", "column": "1", "endline": "70", "endcolumn": "16", "stmt": [70,1,70,16], "code": "def validate(s):" },
    "757": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "37", "endline": "49", "endcolumn": "37", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1388": { "file": "stacktest.hny", "line": "28", "column": "11", "endline": "28", "endcolumn": "24", "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "1271": { "file": "stackmon.hny", "line": "74", "column": "16", "endline": "74", "endcolumn": "25", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "258": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1013": { "file": "stackmon.hny", "line": "27", "column": "31", "endline": "27", "endcolumn": "35", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "541": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "20", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "1402": { "file": "stacktest.hny", "line": "30", "column": "11", "endline": "30", "endcolumn": "17", "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "452": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "1370": { "file": "stacktest.hny", "line": "24", "column": "13", "endline": "24", "endcolumn": "20", "stmt": [24,7,24,21], "code": "      print(\"boo :(\")" },
    "847": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "1137": { "file": "stackmon.hny", "line": "50", "column": "11", "endline": "50", "endcolumn": "22", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "897": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "3", "stmt": [75,1,75,11], "code": "def get(q):" },
    "1220": { "file": "stackmon.hny", "line": "63", "column": "22", "endline": "63", "endcolumn": "22", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "509": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "22", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1174": { "file": "stackmon.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "37", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "811": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "3", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "559": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "17", "endline": "66", "endcolumn": "24", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "2": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "20", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "1363": { "file": "stacktest.hny", "line": "21", "column": "8", "endline": "21", "endcolumn": "21", "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "837": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "14", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "1003": { "file": "stackmon.hny", "line": "26", "column": "22", "endline": "26", "endcolumn": "32", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "834": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "9", "endline": "57", "endcolumn": "12", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1203": { "file": "stackmon.hny", "line": "60", "column": "13", "endline": "60", "endcolumn": "23", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "1234": { "file": "stackmon.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "30", "stmt": [65,13,65,36], "code": "            s->ever_negative = False" },
    "51": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "12", "stmt": [8,1,8,12], "code": "def head(s):" },
    "1273": { "file": "stackmon.hny", "line": "74", "column": "12", "endline": "74", "endcolumn": "36", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "3": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1104": { "file": "stackmon.hny", "line": "42", "column": "18", "endline": "42", "endcolumn": "18", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "894": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "stmt": [73,5,73,15], "code": "    result = []" },
    "12": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1073": { "file": "stackmon.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "45", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "1211": { "file": "stackmon.hny", "line": "62", "column": "13", "endline": "62", "endcolumn": "20", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "1030": { "file": "stackmon.hny", "line": "29", "column": "39", "endline": "29", "endcolumn": "39", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "567": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1260": { "file": "stackmon.hny", "line": "73", "column": "9", "endline": "73", "endcolumn": "15", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "844": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "30", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "1210": { "file": "stackmon.hny", "line": "62", "column": "16", "endline": "62", "endcolumn": "20", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "830": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "41", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "568": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1300": { "file": "stackmon.hny", "line": "78", "column": "3", "endline": "78", "endcolumn": "20", "stmt": [78,3,78,20], "code": "  release(?s->mutex)" },
    "56": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1400": { "file": "stacktest.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "27", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "1360": { "file": "stacktest.hny", "line": "19", "column": "1", "endline": "19", "endcolumn": "20", "stmt": [19,1,19,20], "code": "def validate_test():" },
    "896": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "12", "stmt": [72,1,72,12], "code": "def Queue():" },
    "840": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "16", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "890": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "12", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "1334": { "file": "stacktest.hny", "line": "12", "column": "5", "endline": "12", "endcolumn": "34", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "1270": { "file": "stackmon.hny", "line": "74", "column": "13", "endline": "74", "endcolumn": "13", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "1411": { "file": "stacktest.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "21", "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "1313": { "file": "stacktest.hny", "line": "10", "column": "11", "endline": "10", "endcolumn": "33", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "1130": { "file": "stackmon.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "22", "stmt": [49,5,49,22], "code": "    acquire(?s->mutex)" },
    "1198": { "file": "stackmon.hny", "line": "60", "column": "13", "endline": "60", "endcolumn": "20", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "1200": { "file": "stackmon.hny", "line": "60", "column": "13", "endline": "60", "endcolumn": "25", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "1323": { "file": "stacktest.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "24", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "1237": { "file": "stackmon.hny", "line": "67", "column": "16", "endline": "67", "endcolumn": "24", "stmt": [67,5,67,25], "code": "    notify(?s->push_cond)" },
    "846": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "19", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "812": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "14", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "1164": { "file": "stackmon.hny", "line": "55", "column": "28", "endline": "55", "endcolumn": "30", "stmt": [55,9,55,31], "code": "        result = list.head(rev)" },
    "836": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "36", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "1343": { "file": "stacktest.hny", "line": "15", "column": "5", "endline": "15", "endcolumn": "27", "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "709": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "20", "endline": "32", "endcolumn": "23", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "450": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "12", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "997": { "file": "stackmon.hny", "line": "26", "column": "14", "endline": "26", "endcolumn": "17", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "71": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1037": { "file": "stackmon.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "11", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "1119": { "file": "stackmon.hny", "line": "44", "column": "14", "endline": "44", "endcolumn": "21", "stmt": [44,5,44,22], "code": "    release(?s->mutex)" },
    "361": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "23", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "9": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "533": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "9", "endline": "60", "endcolumn": "16", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "457": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "21", "endline": "39", "endcolumn": "28", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "1322": { "file": "stacktest.hny", "line": "11", "column": "16", "endline": "11", "endcolumn": "23", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "400": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1350": { "file": "stacktest.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "33", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "937": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "407": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "947": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "8", "endcolumn": "10", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "618": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "1250": { "file": "stackmon.hny", "line": "70", "column": "1", "endline": "70", "endcolumn": "16", "stmt": [70,1,70,16], "code": "def validate(s):" },
    "119": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1335": { "file": "stacktest.hny", "line": "9", "column": "1", "endline": "9", "endcolumn": "26", "stmt": [9,1,9,26], "code": "def push_test(self, char):" },
    "1221": { "file": "stackmon.hny", "line": "63", "column": "23", "endline": "63", "endcolumn": "36", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "111": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "3", "stmt": [26,1,26,12], "code": "def list(a):" },
    "1108": { "file": "stackmon.hny", "line": "42", "column": "5", "endline": "42", "endcolumn": "6", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "507": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "24", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1404": { "file": "stacktest.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "1241": { "file": "stackmon.hny", "line": "68", "column": "5", "endline": "68", "endcolumn": "11", "stmt": [68,5,68,22], "code": "    release(?s->mutex)" },
    "1178": { "file": "stackmon.hny", "line": "56", "column": "44", "endline": "56", "endcolumn": "46", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "1413": { "file": "stacktest.hny", "line": "33", "column": "7", "endline": "33", "endcolumn": "19", "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "1131": { "file": "stackmon.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "22", "stmt": [49,5,49,22], "code": "    acquire(?s->mutex)" },
    "543": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "759": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "936": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "593": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "756": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1312": { "file": "stacktest.hny", "line": "10", "column": "24", "endline": "10", "endcolumn": "27", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "401": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "990": { "file": "stackmon.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "11", "stmt": [25,5,25,22], "code": "    acquire(?s->mutex)" },
    "946": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "41": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "5", "endline": "6", "endcolumn": "12", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "706": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "264": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "13", "endline": "45", "endcolumn": "20", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "532": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "996": { "file": "stackmon.hny", "line": "26", "column": "11", "endline": "26", "endcolumn": "11", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "369": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "366": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "25", "endline": "13", "endcolumn": "25", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "8": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "604": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "542": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "14", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "1199": { "file": "stackmon.hny", "line": "60", "column": "13", "endline": "60", "endcolumn": "25", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "1129": { "file": "stackmon.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "21", "stmt": [49,5,49,22], "code": "    acquire(?s->mutex)" },
    "654": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "19", "endline": "17", "endcolumn": "19", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "451": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "1412": { "file": "stacktest.hny", "line": "30", "column": "18", "endline": "30", "endcolumn": "18", "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "266": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "3", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "592": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "557": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "1236": { "file": "stackmon.hny", "line": "67", "column": "13", "endline": "67", "endcolumn": "13", "stmt": [67,5,67,25], "code": "    notify(?s->push_cond)" },
    "61": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "24", "endline": "13", "endcolumn": "24", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "606": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "13": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "558": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "607": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "656": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1036": { "file": "stackmon.hny", "line": "31", "column": "8", "endline": "31", "endcolumn": "11", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "508": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "657": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1405": { "file": "stacktest.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "1240": { "file": "stackmon.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "25", "stmt": [67,5,67,25], "code": "    notify(?s->push_cond)" },
    "930": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "31", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "267": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "14", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "1353": { "file": "stacktest.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "33", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "940": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "19", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1392": { "file": "stacktest.hny", "line": "29", "column": "11", "endline": "29", "endcolumn": "19", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "998": { "file": "stackmon.hny", "line": "26", "column": "11", "endline": "26", "endcolumn": "17", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "602": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1088": { "file": "stackmon.hny", "line": "38", "column": "9", "endline": "38", "endcolumn": "24", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "402": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1179": { "file": "stackmon.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "47", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "1251": { "file": "stackmon.hny", "line": "72", "column": "3", "endline": "72", "endcolumn": "9", "stmt": [72,3,72,20], "code": "  acquire(?s->mutex)" },
    "265": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "13", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "384": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "24", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "229": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "991": { "file": "stackmon.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "14", "stmt": [25,5,25,22], "code": "    acquire(?s->mutex)" },
    "938": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "163": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1168": { "file": "stackmon.hny", "line": "56", "column": "9", "endline": "56", "endcolumn": "9", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "363": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "941": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "41", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "374": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "26", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1132": { "file": "stackmon.hny", "line": "50", "column": "11", "endline": "50", "endcolumn": "11", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "948": { "file": "stackmon.hny", "line": "8", "column": "13", "endline": "8", "endcolumn": "16", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "1352": { "file": "stacktest.hny", "line": "17", "column": "27", "endline": "17", "endcolumn": "30", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "1149": { "file": "stackmon.hny", "line": "51", "column": "9", "endline": "51", "endcolumn": "37", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "261": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "959": { "file": "stackmon.hny", "line": "10", "column": "25", "endline": "10", "endcolumn": "26", "stmt": [5,3,20,3], "code": "    .pop_cond: Condition()," },
    "405": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "324": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "112": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "12", "stmt": [26,1,26,12], "code": "def list(a):" },
    "974": { "file": "stackmon.hny", "line": "16", "column": "16", "endline": "16", "endcolumn": "16", "stmt": [5,3,20,3], "code": "    .max_size: l, # capture maxSize parameter" },
    "1239": { "file": "stackmon.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "25", "stmt": [67,5,67,25], "code": "    notify(?s->push_cond)" },
    "702": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "32", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "601": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "506": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "327": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "909": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "455": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "52": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "11", "column": "9", "endline": "11", "endcolumn": "12", "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "924": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "819": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "818": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "752": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "651": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "21", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "63": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "619": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "16", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "360": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "24", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "73": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "stmt": [17,5,17,14], "code": "    result = 0" },
    "11": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1035": { "file": "stackmon.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "5", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "556": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "377": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "16", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "40": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "21", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1109": { "file": "stackmon.hny", "line": "43", "column": "9", "endline": "43", "endcolumn": "14", "stmt": [43,9,43,30], "code": "        notify(?s->valid_cond)" },
    "701": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "158": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "53": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "11", "column": "1", "endline": "11", "endcolumn": "24", "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "1403": { "file": "stacktest.hny", "line": "30", "column": "11", "endline": "30", "endcolumn": "17", "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "387": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "228": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "262": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "60", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "10": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "36", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "925": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "11", "stmt": [75,1,75,11], "code": "def get(q):" },
    "278": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "16", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "703": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "555": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "110": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "11", "stmt": [22,1,22,11], "code": "def set(a):" },
    "653": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "14", "stmt": [16,5,16,15], "code": "    atomically:" },
    "1291": { "file": "stackmon.hny", "line": "76", "column": "45", "endline": "76", "endcolumn": "56", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "288": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "751": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "505": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "70": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "984": { "file": "stackmon.hny", "line": "19", "column": "21", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .problem_index: -1" },
    "116": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "603": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "318": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1118": { "file": "stackmon.hny", "line": "44", "column": "17", "endline": "44", "endcolumn": "21", "stmt": [44,5,44,22], "code": "    release(?s->mutex)" },
    "375": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "362": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "18", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "289": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1133": { "file": "stackmon.hny", "line": "50", "column": "14", "endline": "50", "endcolumn": "17", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "406": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "798": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1393": { "file": "stacktest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "26", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "279": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "1414": { "file": "stacktest.hny", "line": "33", "column": "7", "endline": "33", "endcolumn": "19", "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "753": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "5", "endline": "47", "endcolumn": "17", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "695": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "21", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "1128": { "file": "stackmon.hny", "line": "49", "column": "17", "endline": "49", "endcolumn": "21", "stmt": [49,5,49,22], "code": "    acquire(?s->mutex)" },
    "1089": { "file": "stackmon.hny", "line": "38", "column": "29", "endline": "38", "endcolumn": "29", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "748": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "46", "column": "5", "endline": "46", "endcolumn": "15", "stmt": [46,5,46,15], "code": "    var cnt = 0" },
    "456": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "325": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1169": { "file": "stackmon.hny", "line": "56", "column": "12", "endline": "56", "endcolumn": "16", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "975": { "file": "stackmon.hny", "line": "16", "column": "16", "endline": "16", "endcolumn": "16", "stmt": [5,3,20,3], "code": "    .max_size: l, # capture maxSize parameter" },
    "645": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "750": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "60": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1342": { "file": "stacktest.hny", "line": "15", "column": "11", "endline": "15", "endcolumn": "26", "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "385": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "16", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "260": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "652": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "14", "stmt": [16,5,16,15], "code": "    atomically:" },
    "108": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "985": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "635": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "117": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "700": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "21", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "504": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "19", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "961": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "681": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "343": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "554": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "711": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "976": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "694": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "1238": { "file": "stackmon.hny", "line": "67", "column": "13", "endline": "67", "endcolumn": "24", "stmt": [67,5,67,25], "code": "    notify(?s->push_cond)" },
    "777": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "48", "endcolumn": "19", "stmt": [48,9,48,19], "code": "        atomically:" },
    "762": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "43", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "194": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "15", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "67": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "33", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "462": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "21", "stmt": [41,1,41,21], "code": "builtin add \"bag$add\"" },
    "20": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1138": { "file": "stackmon.hny", "line": "50", "column": "5", "endline": "50", "endcolumn": "9", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "1112": { "file": "stackmon.hny", "line": "43", "column": "17", "endline": "43", "endcolumn": "29", "stmt": [43,9,43,30], "code": "        notify(?s->valid_cond)" },
    "1277": { "file": "stackmon.hny", "line": "74", "column": "12", "endline": "74", "endcolumn": "36", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "1025": { "file": "stackmon.hny", "line": "29", "column": "28", "endline": "29", "endcolumn": "39", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "1346": { "file": "stacktest.hny", "line": "16", "column": "13", "endline": "16", "endcolumn": "25", "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "738": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "16", "stmt": [42,1,42,16], "code": "def Condition():" },
    "547": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "17", "endline": "64", "endcolumn": "24", "stmt": [64,17,64,27], "code": "                result = {}" },
    "1379": { "file": "stacktest.hny", "line": "27", "column": "21", "endline": "27", "endcolumn": "21", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "822": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "23", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "814": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "20", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "286": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "41", "endline": "54", "endcolumn": "41", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1229": { "file": "stackmon.hny", "line": "64", "column": "13", "endline": "64", "endcolumn": "30", "stmt": [64,13,64,33], "code": "            s->problem_index = -1" },
    "376": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "634": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "19", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "268": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1034": { "file": "stackmon.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "14", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "511": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "17", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "109": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "12", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "227": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "9", "endline": "43", "endcolumn": "19", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "126": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1077": { "file": "stackmon.hny", "line": "36", "column": "26", "endline": "36", "endcolumn": "44", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "226": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "579": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1255": { "file": "stackmon.hny", "line": "72", "column": "12", "endline": "72", "endcolumn": "19", "stmt": [72,3,72,20], "code": "  acquire(?s->mutex)" },
    "1364": { "file": "stacktest.hny", "line": "21", "column": "24", "endline": "21", "endcolumn": "24", "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "235": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1309": { "file": "stacktest.hny", "line": "10", "column": "11", "endline": "10", "endcolumn": "33", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "621": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "287": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "41", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "449": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "14", "endline": "36", "endcolumn": "26", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "463": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1416": { "file": "stacktest.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "21", "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "1051": { "file": "stackmon.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "21", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "4": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1007": { "file": "stackmon.hny", "line": "27", "column": "12", "endline": "27", "endcolumn": "35", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "475": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "295": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "134": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "14", "stmt": [30,1,30,14], "code": "def values(d):" },
    "447": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1356": { "file": "stacktest.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "33", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "697": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,16,33,6], "code": "    atomically when not !binsema:" },
    "476": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "19", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "292": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "371": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "15", "column": "9", "endline": "15", "endcolumn": "20", "stmt": [15,1,15,39], "code": "builtin multiplicity \"bag$multiplicity\"" },
    "680": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "30": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "20", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "201": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1207": { "file": "stackmon.hny", "line": "61", "column": "14", "endline": "61", "endcolumn": "26", "stmt": [61,9,61,27], "code": "        elif result == \")\":" },
    "1015": { "file": "stackmon.hny", "line": "27", "column": "12", "endline": "27", "endcolumn": "35", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "763": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "13", "endline": "49", "endcolumn": "17", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1245": { "file": "stackmon.hny", "line": "68", "column": "14", "endline": "68", "endcolumn": "21", "stmt": [68,5,68,22], "code": "    release(?s->mutex)" },
    "1194": { "file": "stackmon.hny", "line": "59", "column": "12", "endline": "59", "endcolumn": "24", "stmt": [59,9,59,25], "code": "        if result == \"(\":" },
    "962": { "file": "stackmon.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "15", "stmt": [5,3,20,3], "code": "    .valid_cond: Condition()," },
    "1390": { "file": "stacktest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "3", "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "1156": { "file": "stackmon.hny", "line": "54", "column": "30", "endline": "54", "endcolumn": "35", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "1098": { "file": "stackmon.hny", "line": "41", "column": "13", "endline": "41", "endcolumn": "23", "stmt": [41,5,41,24], "code": "    notify(?s->pop_cond)" },
    "186": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "608": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "7": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1100": { "file": "stackmon.hny", "line": "41", "column": "5", "endline": "41", "endcolumn": "24", "stmt": [41,5,41,24], "code": "    notify(?s->pop_cond)" },
    "342": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "5", "endline": "8", "endcolumn": "12", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "620": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "16", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "866": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1160": { "file": "stackmon.hny", "line": "54", "column": "5", "endline": "54", "endcolumn": "13", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "1041": { "file": "stackmon.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "340": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "127": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1369": { "file": "stacktest.hny", "line": "21", "column": "5", "endline": "21", "endcolumn": "26", "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "881": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "16", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "180": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1374": { "file": "stacktest.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "3", "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "860": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "22", "endline": "66", "endcolumn": "25", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "609": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1304": { "file": "stacktest.hny", "line": "7", "column": "17", "endline": "7", "endcolumn": "24", "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "1067": { "file": "stackmon.hny", "line": "35", "column": "21", "endline": "35", "endcolumn": "21", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "224": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1146": { "file": "stackmon.hny", "line": "51", "column": "32", "endline": "51", "endcolumn": "36", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "882": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "187": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "1293": { "file": "stackmon.hny", "line": "76", "column": "13", "endline": "76", "endcolumn": "57", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "232": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "833": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "44", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "195": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "908": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "200": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "41", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "113": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "821": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "10", "endline": "57", "endcolumn": "10", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "815": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "20", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "1170": { "file": "stackmon.hny", "line": "56", "column": "9", "endline": "56", "endcolumn": "16", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "120": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1267": { "file": "stackmon.hny", "line": "73", "column": "3", "endline": "73", "endcolumn": "7", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "6": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "233": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1122": { "file": "stackmon.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "15", "stmt": [23,1,23,15], "code": "def push(s, c):" },
    "893": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "stmt": [73,5,73,15], "code": "    result = []" },
    "867": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1219": { "file": "stackmon.hny", "line": "63", "column": "12", "endline": "63", "endcolumn": "17", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "949": { "file": "stackmon.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "18", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "935": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "775": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "19", "endline": "51", "endcolumn": "23", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "655": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "19", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "464": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "17", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1189": { "file": "stackmon.hny", "line": "58", "column": "20", "endline": "58", "endcolumn": "20", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "627": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "865": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "293": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "713": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "370": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "1217": { "file": "stackmon.hny", "line": "63", "column": "12", "endline": "63", "endcolumn": "12", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "1005": { "file": "stackmon.hny", "line": "26", "column": "5", "endline": "26", "endcolumn": "9", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "545": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "687": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "22", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "963": { "file": "stackmon.hny", "line": "11", "column": "18", "endline": "11", "endcolumn": "26", "stmt": [5,3,20,3], "code": "    .valid_cond: Condition()," },
    "368": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "211": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "513": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "23", "endline": "54", "endcolumn": "23", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "1093": { "file": "stackmon.hny", "line": "38", "column": "29", "endline": "38", "endcolumn": "36", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "446": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "85": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "17", "stmt": [19,9,19,19], "code": "        result += v" },
    "1319": { "file": "stacktest.hny", "line": "11", "column": "17", "endline": "11", "endcolumn": "17", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "135": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1209": { "file": "stackmon.hny", "line": "62", "column": "13", "endline": "62", "endcolumn": "13", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "1017": { "file": "stackmon.hny", "line": "27", "column": "7", "endline": "27", "endcolumn": "36", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "1243": { "file": "stackmon.hny", "line": "68", "column": "14", "endline": "68", "endcolumn": "14", "stmt": [68,5,68,22], "code": "    release(?s->mutex)" },
    "1172": { "file": "stackmon.hny", "line": "56", "column": "24", "endline": "56", "endcolumn": "32", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "1110": { "file": "stackmon.hny", "line": "43", "column": "17", "endline": "43", "endcolumn": "17", "stmt": [43,9,43,30], "code": "        notify(?s->valid_cond)" },
    "823": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1048": { "file": "stackmon.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "9", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "1102": { "file": "stackmon.hny", "line": "42", "column": "9", "endline": "42", "endcolumn": "13", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "779": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "20", "stmt": [52,20,54,6], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1340": { "file": "stacktest.hny", "line": "15", "column": "11", "endline": "15", "endcolumn": "26", "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "478": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "181": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "234": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "883": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1332": { "file": "stacktest.hny", "line": "12", "column": "30", "endline": "12", "endcolumn": "33", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "995": { "file": "stackmon.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "22", "stmt": [25,5,25,22], "code": "    acquire(?s->mutex)" },
    "341": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "47": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1144": { "file": "stackmon.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "36", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "548": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "21", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "510": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "13", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "269": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "710": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "18", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "17": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1027": { "file": "stackmon.hny", "line": "29", "column": "32", "endline": "29", "endcolumn": "36", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "864": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1329": { "file": "stacktest.hny", "line": "12", "column": "24", "endline": "12", "endcolumn": "27", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "624": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "23", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "960": { "file": "stackmon.hny", "line": "10", "column": "16", "endline": "10", "endcolumn": "26", "stmt": [5,3,20,3], "code": "    .pop_cond: Condition()," },
    "774": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "686": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "3", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "1227": { "file": "stackmon.hny", "line": "64", "column": "13", "endline": "64", "endcolumn": "28", "stmt": [64,13,64,33], "code": "            s->problem_index = -1" },
    "1053": { "file": "stackmon.hny", "line": "33", "column": "21", "endline": "33", "endcolumn": "21", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "546": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "544": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "139": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "77": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "346": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "237": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "808": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "17", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "966": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "708": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "626": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "294": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "22", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1406": { "file": "stacktest.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,18], "code": "for i in {1..NPOP}:" },
    "1396": { "file": "stacktest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "26", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "1154": { "file": "stackmon.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "27", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "479": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "24", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "460": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "16", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "22": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1231": { "file": "stackmon.hny", "line": "65", "column": "16", "endline": "65", "endcolumn": "28", "stmt": [65,13,65,36], "code": "            s->ever_negative = False" },
    "297": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "296": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "994": { "file": "stackmon.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "22", "stmt": [25,5,25,22], "code": "    acquire(?s->mutex)" },
    "776": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "13", "endline": "51", "endcolumn": "17", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "359": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1162": { "file": "stackmon.hny", "line": "55", "column": "22", "endline": "55", "endcolumn": "26", "stmt": [55,9,55,31], "code": "        result = list.head(rev)" },
    "1043": { "file": "stackmon.hny", "line": "32", "column": "8", "endline": "32", "endcolumn": "8", "stmt": [32,5,32,16], "code": "    if c == \"(\":" },
    "967": { "file": "stackmon.hny", "line": "14", "column": "5", "endline": "14", "endcolumn": "10", "stmt": [5,3,20,3], "code": "    .stack: []," },
    "445": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "712": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "21", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "236": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "46", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "569": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "934": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "684": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "12", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "461": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "41", "column": "9", "endline": "41", "endcolumn": "11", "stmt": [41,1,41,21], "code": "builtin add \"bag$add\"" },
    "32": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "17", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "1253": { "file": "stackmon.hny", "line": "72", "column": "12", "endline": "72", "endcolumn": "12", "stmt": [72,3,72,20], "code": "  acquire(?s->mutex)" },
    "809": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "512": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "18", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "199": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "576": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "63", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "122": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "904": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "27", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "831": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1106": { "file": "stackmon.hny", "line": "42", "column": "18", "endline": "42", "endcolumn": "27", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "1063": { "file": "stackmon.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "16", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "979": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "898": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "11", "stmt": [75,1,75,11], "code": "def get(q):" },
    "0": { "file": "stacktest.hny", "line": "1", "column": "1", "endline": "33", "endcolumn": "28", "stmt": [1,1,33,28], "code": "import stack" },
    "1047": { "file": "stackmon.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "9", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "466": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "1196": { "file": "stackmon.hny", "line": "60", "column": "13", "endline": "60", "endcolumn": "13", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "350": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "22", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "15": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "137": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1306": { "file": "stacktest.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "1263": { "file": "stackmon.hny", "line": "73", "column": "23", "endline": "73", "endcolumn": "30", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "699": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "25", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "205": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "9", "endline": "42", "endcolumn": "27", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "838": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "3", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "910": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "28", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "715": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "14", "stmt": [35,5,35,15], "code": "    atomically:" },
    "817": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "471": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "20", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "103": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "39": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "197": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "34", "endline": "42", "endcolumn": "34", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "218": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1091": { "file": "stackmon.hny", "line": "38", "column": "29", "endline": "38", "endcolumn": "34", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "639": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "14", "stmt": [11,5,11,15], "code": "    atomically:" },
    "1011": { "file": "stackmon.hny", "line": "27", "column": "12", "endline": "27", "endcolumn": "35", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "1120": { "file": "stackmon.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "22", "stmt": [44,5,44,22], "code": "    release(?s->mutex)" },
    "810": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "16", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "805": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "562": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "31", "endline": "68", "endcolumn": "32", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "291": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "29": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "5", "endline": "3", "endcolumn": "12", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1349": { "file": "stacktest.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "24", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "182": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "12", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1376": { "file": "stacktest.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "3", "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "82": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "353": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1295": { "file": "stackmon.hny", "line": "78", "column": "3", "endline": "78", "endcolumn": "9", "stmt": [78,3,78,20], "code": "  release(?s->mutex)" },
    "918": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "22", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "891": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "3", "stmt": [72,1,72,12], "code": "def Queue():" },
    "1324": { "file": "stacktest.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "24", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "1247": { "file": "stackmon.hny", "line": "68", "column": "5", "endline": "68", "endcolumn": "22", "stmt": [68,5,68,22], "code": "    release(?s->mutex)" },
    "190": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "6", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "766": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "231": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "458": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "14", "endline": "39", "endcolumn": "29", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "378": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "16", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "121": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "92": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "465": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "290": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "832": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "130": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "3", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "1085": { "file": "stackmon.hny", "line": "37", "column": "9", "endline": "37", "endcolumn": "26", "stmt": [37,9,37,31], "code": "        s->ever_negative = True" },
    "804": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1314": { "file": "stacktest.hny", "line": "10", "column": "30", "endline": "10", "endcolumn": "33", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "905": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "803": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "772": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "33", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "770": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "30", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "682": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "26", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "230": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "892": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "12", "stmt": [72,1,72,12], "code": "def Queue():" },
    "549": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "18", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "638": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "12", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "623": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "25", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "196": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "32", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "57": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1359": { "file": "stacktest.hny", "line": "19", "column": "1", "endline": "19", "endcolumn": "3", "stmt": [19,1,19,20], "code": "def validate_test():" },
    "816": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "33", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "622": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "1057": { "file": "stackmon.hny", "line": "34", "column": "10", "endline": "34", "endcolumn": "10", "stmt": [34,5,34,18], "code": "    elif c == \")\":" },
    "773": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "13", "endline": "50", "endcolumn": "16", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "698": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "26", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "1134": { "file": "stackmon.hny", "line": "50", "column": "11", "endline": "50", "endcolumn": "17", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "219": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "761": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "477": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "683": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "27", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "136": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1330": { "file": "stacktest.hny", "line": "12", "column": "11", "endline": "12", "endcolumn": "33", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "1289": { "file": "stackmon.hny", "line": "76", "column": "45", "endline": "76", "endcolumn": "51", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "1038": { "file": "stackmon.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "459": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "12", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "802": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1150": { "file": "stackmon.hny", "line": "51", "column": "9", "endline": "51", "endcolumn": "37", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "352": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "18", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1225": { "file": "stackmon.hny", "line": "64", "column": "13", "endline": "64", "endcolumn": "13", "stmt": [64,13,64,33], "code": "            s->problem_index = -1" },
    "912": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "26", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "129": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "560": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "24", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "718": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "17", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "688": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "131": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "5", "endline": "27", "endcolumn": "12", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1166": { "file": "stackmon.hny", "line": "55", "column": "18", "endline": "55", "endcolumn": "31", "stmt": [55,9,55,31], "code": "        result = list.head(rev)" },
    "578": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "66", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "574": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "99": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1233": { "file": "stackmon.hny", "line": "65", "column": "32", "endline": "65", "endcolumn": "36", "stmt": [65,13,65,36], "code": "            s->ever_negative = False" },
    "760": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "40", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "448": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "18", "endline": "36", "endcolumn": "25", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1182": { "file": "stackmon.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "48", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "207": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "769": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "355": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "21", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1257": { "file": "stackmon.hny", "line": "72", "column": "3", "endline": "72", "endcolumn": "20", "stmt": [72,3,72,20], "code": "  acquire(?s->mutex)" },
    "191": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "stmt": [40,9,40,19], "code": "        result = []" },
    "1366": { "file": "stacktest.hny", "line": "21", "column": "5", "endline": "21", "endcolumn": "6", "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "1126": { "file": "stackmon.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "11", "stmt": [49,5,49,22], "code": "    acquire(?s->mutex)" },
    "5": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1190": { "file": "stackmon.hny", "line": "58", "column": "9", "endline": "58", "endcolumn": "20", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "771": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "202": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "806": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "75": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "1265": { "file": "stackmon.hny", "line": "73", "column": "20", "endline": "73", "endcolumn": "30", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "1033": { "file": "stackmon.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "40", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "917": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "10", "endline": "78", "endcolumn": "10", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "916": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "9", "endline": "77", "endcolumn": "16", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "125": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "203": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "467": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "563": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "33", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "470": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "15", "endline": "44", "endcolumn": "20", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "1394": { "file": "stacktest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "21", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "1354": { "file": "stacktest.hny", "line": "17", "column": "33", "endline": "17", "endcolumn": "33", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "1021": { "file": "stackmon.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "12", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "189": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "14", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "185": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "13", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "575": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "628": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "23", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "65": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "27", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "206": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1176": { "file": "stackmon.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "42", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "184": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "969": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "913": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "29", "endline": "77", "endcolumn": "29", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "192": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "stmt": [40,9,40,19], "code": "        result = []" },
    "1399": { "file": "stacktest.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "27", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "1344": { "file": "stacktest.hny", "line": "16", "column": "13", "endline": "16", "endcolumn": "21", "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "839": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "17", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "1297": { "file": "stackmon.hny", "line": "78", "column": "12", "endline": "78", "endcolumn": "12", "stmt": [78,3,78,20], "code": "  release(?s->mutex)" },
    "765": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "24", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "577": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "689": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "349": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "17", "endline": "10", "endcolumn": "22", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "561": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "29", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "132": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "12", "stmt": [26,1,26,12], "code": "def list(a):" },
    "55": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "12", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "1061": { "file": "stackmon.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "8", "stmt": [34,5,34,18], "code": "    elif c == \")\":" },
    "899": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "807": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "19", "endline": "53", "endcolumn": "22", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "1140": { "file": "stackmon.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "36", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "767": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "27", "endline": "50", "endcolumn": "27", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "1215": { "file": "stackmon.hny", "line": "62", "column": "13", "endline": "62", "endcolumn": "25", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "474": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "801": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "629": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "16", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "356": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1316": { "file": "stacktest.hny", "line": "10", "column": "5", "endline": "10", "endcolumn": "34", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "1275": { "file": "stackmon.hny", "line": "74", "column": "32", "endline": "74", "endcolumn": "36", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "472": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "6", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "45": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "351": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "10", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "1071": { "file": "stackmon.hny", "line": "36", "column": "18", "endline": "36", "endcolumn": "18", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "1326": { "file": "stacktest.hny", "line": "12", "column": "11", "endline": "12", "endcolumn": "21", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "1001": { "file": "stackmon.hny", "line": "26", "column": "25", "endline": "26", "endcolumn": "32", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "204": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1116": { "file": "stackmon.hny", "line": "44", "column": "14", "endline": "44", "endcolumn": "14", "stmt": [44,5,44,22], "code": "    release(?s->mutex)" },
    "800": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "124": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "968": { "file": "stackmon.hny", "line": "14", "column": "13", "endline": "14", "endcolumn": "14", "stmt": [5,3,20,3], "code": "    .stack: []," },
    "473": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "14", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "133": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,14], "code": "def values(d):" },
    "764": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "14", "endline": "50", "endcolumn": "14", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "89": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "3", "stmt": [22,1,22,11], "code": "def set(a):" },
    "1097": { "file": "stackmon.hny", "line": "41", "column": "16", "endline": "41", "endcolumn": "23", "stmt": [41,5,41,24], "code": "    notify(?s->pop_cond)" },
    "1205": { "file": "stackmon.hny", "line": "61", "column": "14", "endline": "61", "endcolumn": "19", "stmt": [61,9,61,27], "code": "        elif result == \")\":" },
    "911": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "150": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "214": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1044": { "file": "stackmon.hny", "line": "32", "column": "13", "endline": "32", "endcolumn": "15", "stmt": [32,5,32,16], "code": "    if c == \"(\":" },
    "1191": { "file": "stackmon.hny", "line": "58", "column": "9", "endline": "58", "endcolumn": "18", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "18": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1287": { "file": "stackmon.hny", "line": "76", "column": "45", "endline": "76", "endcolumn": "45", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "1087": { "file": "stackmon.hny", "line": "38", "column": "12", "endline": "38", "endcolumn": "24", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "441": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "18", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1395": { "file": "stacktest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "21", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "522": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "518": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "100": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "790": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "69": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "12", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "431": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1096": { "file": "stackmon.hny", "line": "41", "column": "13", "endline": "41", "endcolumn": "13", "stmt": [41,5,41,24], "code": "    notify(?s->pop_cond)" },
    "900": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "740": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "617": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "743": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "96": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1180": { "file": "stackmon.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "47", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "950": { "file": "stackmon.hny", "line": "8", "column": "13", "endline": "8", "endcolumn": "18", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "1009": { "file": "stackmon.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "24", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "733": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "1143": { "file": "stackmon.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "25", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "1296": { "file": "stackmon.hny", "line": "78", "column": "12", "endline": "78", "endcolumn": "12", "stmt": [78,3,78,20], "code": "  release(?s->mutex)" },
    "1248": { "file": "stackmon.hny", "line": "47", "column": "1", "endline": "47", "endcolumn": "11", "stmt": [47,1,47,11], "code": "def pop(s):" },
    "1079": { "file": "stackmon.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "45", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "730": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "1018": { "file": "stackmon.hny", "line": "26", "column": "33", "endline": "26", "endcolumn": "9", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "416": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "3", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "81": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "79": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "793": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "71", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "616": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "24", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "430": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "14", "endline": "31", "endcolumn": "26", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "217": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "719": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "16", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "25": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1028": { "file": "stackmon.hny", "line": "29", "column": "29", "endline": "29", "endcolumn": "36", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "957": { "file": "stackmon.hny", "line": "10", "column": "5", "endline": "10", "endcolumn": "13", "stmt": [5,3,20,3], "code": "    .pop_cond: Condition()," },
    "1384": { "file": "stacktest.hny", "line": "27", "column": "5", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "91": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "583": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "572": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "57", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1258": { "file": "stackmon.hny", "line": "73", "column": "9", "endline": "73", "endcolumn": "9", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "614": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "30", "endline": "70", "endcolumn": "53", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "582": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "169": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "732": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "907": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "28", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "491": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "49", "column": "1", "endline": "49", "endcolumn": "27", "stmt": [49,1,49,27], "code": "builtin remove \"bag$remove\"" },
    "1192": { "file": "stackmon.hny", "line": "59", "column": "12", "endline": "59", "endcolumn": "17", "stmt": [59,9,59,25], "code": "        if result == \"(\":" },
    "523": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "3", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "517": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "906": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "490": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "49", "column": "9", "endline": "49", "endcolumn": "14", "stmt": [49,1,49,27], "code": "builtin remove \"bag$remove\"" },
    "1054": { "file": "stackmon.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "21", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "716": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "1284": { "file": "stackmon.hny", "line": "76", "column": "33", "endline": "76", "endcolumn": "37", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "1080": { "file": "stackmon.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "6", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "573": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "35", "endline": "68", "endcolumn": "42", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "956": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "440": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "13", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1387": { "file": "stacktest.hny", "line": "28", "column": "11", "endline": "28", "endcolumn": "24", "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "164": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "35": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "379": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "6", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "220": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "49": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "17", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1142": { "file": "stackmon.hny", "line": "51", "column": "18", "endline": "51", "endcolumn": "25", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "248": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "106": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1153": { "file": "stackmon.hny", "line": "54", "column": "19", "endline": "54", "endcolumn": "27", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "1095": { "file": "stackmon.hny", "line": "41", "column": "5", "endline": "41", "endcolumn": "10", "stmt": [41,5,41,24], "code": "    notify(?s->pop_cond)" },
    "669": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "1078": { "file": "stackmon.hny", "line": "36", "column": "21", "endline": "36", "endcolumn": "23", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "389": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "298": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "25", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "270": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "23", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "216": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1187": { "file": "stackmon.hny", "line": "58", "column": "9", "endline": "58", "endcolumn": "20", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "581": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "73", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "611": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "329": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "20", "endline": "5", "endcolumn": "20", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1069": { "file": "stackmon.hny", "line": "35", "column": "9", "endline": "35", "endcolumn": "19", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "742": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "24", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "78": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "731": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "415": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "23", "stmt": [28,1,28,23], "code": "builtin bmin \"bag$bmin\"" },
    "152": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "964": { "file": "stackmon.hny", "line": "11", "column": "27", "endline": "11", "endcolumn": "28", "stmt": [5,3,20,3], "code": "    .valid_cond: Condition()," },
    "1299": { "file": "stackmon.hny", "line": "78", "column": "12", "endline": "78", "endcolumn": "19", "stmt": [78,3,78,20], "code": "  release(?s->mutex)" },
    "792": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "69", "endline": "52", "endcolumn": "71", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "919": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "102": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1081": { "file": "stackmon.hny", "line": "37", "column": "9", "endline": "37", "endcolumn": "9", "stmt": [37,9,37,31], "code": "        s->ever_negative = True" },
    "951": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "1338": { "file": "stacktest.hny", "line": "15", "column": "11", "endline": "15", "endcolumn": "26", "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "714": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "21", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "643": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "9", "endline": "12", "endcolumn": "16", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "492": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "3", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "717": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "395": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "692": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "12", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "433": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "12", "stmt": [33,1,33,23], "code": "builtin bmax \"bag$bmax\"" },
    "901": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "571": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "633": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "442": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "345": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "642": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "18", "endline": "12", "endcolumn": "20", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "443": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "10", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "156": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,13], "code": "def items(d):" },
    "432": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "13", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "316": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "15", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "312": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "68": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "5", "endline": "13", "endcolumn": "12", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "632": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "493": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "280": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "693": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "22", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "238": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "521": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "978": { "file": "stackmon.hny", "line": "17", "column": "13", "endline": "17", "endcolumn": "13", "stmt": [5,3,20,3], "code": "    .valid: 0,#+1 to this when '(' and -1 when ')'" },
    "173": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "107": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1298": { "file": "stackmon.hny", "line": "78", "column": "15", "endline": "78", "endcolumn": "19", "stmt": [78,3,78,20], "code": "  release(?s->mutex)" },
    "1008": { "file": "stackmon.hny", "line": "27", "column": "13", "endline": "27", "endcolumn": "13", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "80": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "610": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "988": { "file": "stackmon.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "3", "stmt": [23,1,23,15], "code": "def push(s, c):" },
    "580": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "69", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "157": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def items(d):" },
    "123": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "151": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1259": { "file": "stackmon.hny", "line": "73", "column": "12", "endline": "73", "endcolumn": "15", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "1068": { "file": "stackmon.hny", "line": "35", "column": "9", "endline": "35", "endcolumn": "21", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "668": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "902": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "22", "endline": "76", "endcolumn": "22", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "570": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "55", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "335": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "249": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "215": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1193": { "file": "stackmon.hny", "line": "59", "column": "22", "endline": "59", "endcolumn": "24", "stmt": [59,9,59,25], "code": "        if result == \"(\":" },
    "928": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "16", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "183": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def items(d):" },
    "520": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "9", "endline": "55", "endcolumn": "23", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "1055": { "file": "stackmon.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "19", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "311": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "239": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "213": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "45", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1285": { "file": "stackmon.hny", "line": "76", "column": "14", "endline": "76", "endcolumn": "37", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "417": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "13", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "434": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "23", "stmt": [33,1,33,23], "code": "builtin bmax \"bag$bmax\"" },
    "281": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "18", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "394": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "3", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "347": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "313": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "5", "endline": "2", "endcolumn": "12", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "308": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "16", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "791": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "64", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1386": { "file": "stacktest.hny", "line": "26", "column": "24", "endline": "26", "endcolumn": "24", "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "952": { "file": "stackmon.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "14", "stmt": [5,3,20,3], "code": "    .push_cond: Condition()," },
    "1029": { "file": "stackmon.hny", "line": "29", "column": "28", "endline": "29", "endcolumn": "39", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "444": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "271": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "34": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1249": { "file": "stackmon.hny", "line": "70", "column": "1", "endline": "70", "endcolumn": "3", "stmt": [70,1,70,16], "code": "def validate(s):" },
    "358": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "26", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "344": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "337": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "15", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "1019": { "file": "stackmon.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "5", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "741": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "24", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "953": { "file": "stackmon.hny", "line": "9", "column": "17", "endline": "9", "endcolumn": "25", "stmt": [5,3,20,3], "code": "    .push_cond: Condition()," },
    "101": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "24": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "37", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1152": { "file": "stackmon.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "18", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "1094": { "file": "stackmon.hny", "line": "38", "column": "9", "endline": "38", "endcolumn": "26", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "19": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "334": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "221": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "90": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "11", "stmt": [22,1,22,11], "code": "def set(a):" },
    "903": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "22", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "1186": { "file": "stackmon.hny", "line": "58", "column": "9", "endline": "58", "endcolumn": "15", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "165": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "397": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "stmt": [24,5,24,14], "code": "    result = 0" },
    "310": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "12", "stmt": [1,1,1,12], "code": "def empty():" },
    "212": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "48": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "16", "endline": "9", "endcolumn": "16", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1045": { "file": "stackmon.hny", "line": "32", "column": "8", "endline": "32", "endcolumn": "15", "stmt": [32,5,32,16], "code": "    if c == \"(\":" },
    "876": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "16", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "138": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "613": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "53", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1269": { "file": "stackmon.hny", "line": "74", "column": "12", "endline": "74", "endcolumn": "36", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "794": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "35", "endline": "52", "endcolumn": "37", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1282": { "file": "stackmon.hny", "line": "76", "column": "15", "endline": "76", "endcolumn": "28", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "272": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1082": { "file": "stackmon.hny", "line": "37", "column": "12", "endline": "37", "endcolumn": "24", "stmt": [37,9,37,31], "code": "        s->ever_negative = True" },
    "826": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1339": { "file": "stacktest.hny", "line": "15", "column": "11", "endline": "15", "endcolumn": "20", "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "982": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "1408": { "file": "stacktest.hny", "line": "31", "column": "20", "endline": "31", "endcolumn": "20", "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "413": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "282": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "5", "endline": "53", "endcolumn": "11", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "1058": { "file": "stackmon.hny", "line": "34", "column": "10", "endline": "34", "endcolumn": "10", "stmt": [34,5,34,18], "code": "    elif c == \")\":" },
    "734": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "14", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "322": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "166": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "148": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "27": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "886": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "25", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1278": { "file": "stackmon.hny", "line": "74", "column": "7", "endline": "74", "endcolumn": "37", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "1049": { "file": "stackmon.hny", "line": "33", "column": "12", "endline": "33", "endcolumn": "16", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "744": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "16", "stmt": [42,1,42,16], "code": "def Condition():" },
    "690": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "222": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "198": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "35", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "965": { "file": "stackmon.hny", "line": "11", "column": "18", "endline": "11", "endcolumn": "28", "stmt": [5,3,20,3], "code": "    .valid_cond: Condition()," },
    "1185": { "file": "stackmon.hny", "line": "58", "column": "12", "endline": "58", "endcolumn": "15", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "728": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "21", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "685": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "11", "stmt": [24,1,24,11], "code": "def Lock():" },
    "382": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "84": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1004": { "file": "stackmon.hny", "line": "26", "column": "11", "endline": "26", "endcolumn": "32", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "210": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "862": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "675": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "514": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "23", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "299": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1074": { "file": "stackmon.hny", "line": "36", "column": "30", "endline": "36", "endcolumn": "30", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "372": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "39", "stmt": [15,1,15,39], "code": "builtin multiplicity \"bag$multiplicity\"" },
    "515": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "5", "endline": "54", "endcolumn": "6", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "551": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "95": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1208": { "file": "stackmon.hny", "line": "61", "column": "9", "endline": "61", "endcolumn": "12", "stmt": [61,9,61,27], "code": "        elif result == \")\":" },
    "788": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "625": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "37": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1065": { "file": "stackmon.hny", "line": "35", "column": "9", "endline": "35", "endcolumn": "21", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "778": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "20", "stmt": [52,20,54,6], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "737": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "stmt": [42,1,42,16], "code": "def Condition():" },
    "827": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "39", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "26": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "285": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "38", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "223": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1279": { "file": "stackmon.hny", "line": "74", "column": "7", "endline": "74", "endcolumn": "37", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "795": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "747": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "46", "column": "15", "endline": "46", "endcolumn": "15", "stmt": [46,5,46,15], "code": "    var cnt = 0" },
    "323": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1163": { "file": "stackmon.hny", "line": "55", "column": "18", "endline": "55", "endcolumn": "26", "stmt": [55,9,55,31], "code": "        result = list.head(rev)" },
    "877": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "501": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "6", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "414": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "28", "column": "9", "endline": "28", "endcolumn": "12", "stmt": [28,1,28,23], "code": "builtin bmin \"bag$bmin\"" },
    "273": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "26", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "797": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "412": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "981": { "file": "stackmon.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "25", "stmt": [5,3,20,3], "code": "    .ever_negative: False, #whenever pushing, check after if valid is negative and if so make True" },
    "373": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1381": { "file": "stacktest.hny", "line": "27", "column": "21", "endline": "27", "endcolumn": "26", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "105": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "283": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1409": { "file": "stacktest.hny", "line": "31", "column": "20", "endline": "31", "endcolumn": "20", "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "1075": { "file": "stackmon.hny", "line": "36", "column": "31", "endline": "36", "endcolumn": "44", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "983": { "file": "stackmon.hny", "line": "19", "column": "5", "endline": "19", "endcolumn": "18", "stmt": [5,3,20,3], "code": "    .problem_index: -1" },
    "971": { "file": "stackmon.hny", "line": "15", "column": "12", "endline": "15", "endcolumn": "12", "stmt": [5,3,20,3], "code": "    .size: 0, # how do we make sure the max size is l" },
    "383": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "155": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "14", "stmt": [30,1,30,14], "code": "def values(d):" },
    "1103": { "file": "stackmon.hny", "line": "42", "column": "8", "endline": "42", "endcolumn": "13", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "973": { "file": "stackmon.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "13", "stmt": [5,3,20,3], "code": "    .max_size: l, # capture maxSize parameter" },
    "921": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "24", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "1283": { "file": "stackmon.hny", "line": "76", "column": "14", "endline": "76", "endcolumn": "28", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "869": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "154": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "923": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "9", "endline": "78", "endcolumn": "12", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "640": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "14", "stmt": [11,5,11,15], "code": "    atomically:" },
    "550": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "516": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "18", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "94": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "104": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1064": { "file": "stackmon.hny", "line": "35", "column": "9", "endline": "35", "endcolumn": "16", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "631": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "630": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "1083": { "file": "stackmon.hny", "line": "37", "column": "9", "endline": "37", "endcolumn": "24", "stmt": [37,9,37,31], "code": "        s->ever_negative = True" },
    "500": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "20", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "972": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "380": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "225": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "735": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "5", "endline": "40", "endcolumn": "12", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "641": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "19", "endline": "12", "endcolumn": "20", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "59": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "21", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "868": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1173": { "file": "stackmon.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "32", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "922": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "26", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "691": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "14", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "275": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "12", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1268": { "file": "stackmon.hny", "line": "74", "column": "7", "endline": "74", "endcolumn": "10", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "1059": { "file": "stackmon.hny", "line": "34", "column": "15", "endline": "34", "endcolumn": "17", "stmt": [34,5,34,18], "code": "    elif c == \")\":" },
    "745": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "3", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "502": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "14", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "970": { "file": "stackmon.hny", "line": "15", "column": "5", "endline": "15", "endcolumn": "9", "stmt": [5,3,20,3], "code": "    .size: 0, # how do we make sure the max size is l" },
    "696": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,16,33,6], "code": "    atomically when not !binsema:" },
    "1218": { "file": "stackmon.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "17", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "820": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "17", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "284": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1184": { "file": "stackmon.hny", "line": "58", "column": "9", "endline": "58", "endcolumn": "9", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "980": { "file": "stackmon.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "18", "stmt": [5,3,20,3], "code": "    .ever_negative: False, #whenever pushing, check after if valid is negative and if so make True" },
    "884": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "552": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "97": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "870": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "86": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "1014": { "file": "stackmon.hny", "line": "27", "column": "28", "endline": "27", "endcolumn": "35", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "746": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "16", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "636": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "23", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "880": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "12", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "36": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "646": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "15", "endline": "13", "endcolumn": "18", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "469": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "10", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "736": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "274": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "27", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1419": { "file": "stacktest.hny", "line": "1", "column": "1", "endline": "33", "endcolumn": "28", "stmt": [1,1,33,28], "code": "import stack" },
    "861": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "25", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "796": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "887": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "637": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "3", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "411": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "17", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1380": { "file": "stacktest.hny", "line": "27", "column": "21", "endline": "27", "endcolumn": "21", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "1113": { "file": "stackmon.hny", "line": "43", "column": "9", "endline": "43", "endcolumn": "30", "stmt": [43,9,43,30], "code": "        notify(?s->valid_cond)" },
    "920": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "647": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "9", "endline": "13", "endcolumn": "13", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "519": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "23", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "1228": { "file": "stackmon.hny", "line": "64", "column": "32", "endline": "64", "endcolumn": "33", "stmt": [64,13,64,33], "code": "            s->problem_index = -1" },
    "553": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "16", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "927": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "17", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "885": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1280": { "file": "stackmon.hny", "line": "73", "column": "31", "endline": "73", "endcolumn": "7", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "87": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1418": { "file": "stacktest.hny", "line": "1", "column": "1", "endline": "33", "endcolumn": "28", "stmt": [1,1,33,28], "code": "import stack" },
    "977": { "file": "stackmon.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "10", "stmt": [5,3,20,3], "code": "    .valid: 0,#+1 to this when '(' and -1 when ')'" },
    "875": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "863": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "825": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "26", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "410": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "17", "stmt": [26,9,26,19], "code": "        result += c" },
    "503": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "16", "endline": "53", "endcolumn": "18", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1383": { "file": "stacktest.hny", "line": "27", "column": "21", "endline": "27", "endcolumn": "26", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "31": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "3", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "799": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "21": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "19", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1099": { "file": "stackmon.hny", "line": "41", "column": "5", "endline": "41", "endcolumn": "24", "stmt": [41,5,41,24], "code": "    notify(?s->pop_cond)" },
    "874": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "18", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "749": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "824": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "26", "endline": "57", "endcolumn": "26", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "739": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "1024": { "file": "stackmon.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "26", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "468": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "stmt": [43,5,43,15], "code": "    result = bg" },
    "1290": { "file": "stackmon.hny", "line": "76", "column": "56", "endline": "76", "endcolumn": "56", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "386": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "17", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "926": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "3", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "644": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "485": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "727": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "15", "stmt": [35,5,35,15], "code": "    atomically:" },
    "1368": { "file": "stacktest.hny", "line": "22", "column": "7", "endline": "22", "endcolumn": "24", "stmt": [22,7,22,24], "code": "      print(\"hooray :)\")" },
    "393": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "23", "stmt": [22,1,22,23], "code": "builtin size \"bag$size\"" },
    "1101": { "file": "stackmon.hny", "line": "42", "column": "8", "endline": "42", "endcolumn": "8", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "1060": { "file": "stackmon.hny", "line": "34", "column": "10", "endline": "34", "endcolumn": "17", "stmt": [34,5,34,18], "code": "    elif c == \")\":" },
    "597": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "41", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "326": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "662": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "stmt": [19,13,19,20], "code": "            !p = new" },
    "159": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "787": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "58", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "250": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "20", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1357": { "file": "stacktest.hny", "line": "17", "column": "9", "endline": "17", "endcolumn": "34", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "986": { "file": "stackmon.hny", "line": "5", "column": "3", "endline": "5", "endcolumn": "10", "stmt": [5,3,20,3], "code": "  result = {" },
    "16": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1305": { "file": "stacktest.hny", "line": "7", "column": "5", "endline": "7", "endcolumn": "25", "stmt": [7,1,7,25], "code": "s = stack.Stack(MAX_SIZE)" },
    "1264": { "file": "stackmon.hny", "line": "73", "column": "20", "endline": "73", "endcolumn": "30", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "537": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "24", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "276": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "14", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "529": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "6", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "499": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "20", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "1123": { "file": "stackmon.hny", "line": "47", "column": "1", "endline": "47", "endcolumn": "3", "stmt": [47,1,47,11], "code": "def pop(s):" },
    "1016": { "file": "stackmon.hny", "line": "27", "column": "7", "endline": "27", "endcolumn": "36", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "1407": { "file": "stacktest.hny", "line": "31", "column": "11", "endline": "31", "endcolumn": "18", "stmt": [31,5,31,21], "code": "    spawn pop_test(i)" },
    "1242": { "file": "stackmon.hny", "line": "68", "column": "14", "endline": "68", "endcolumn": "14", "stmt": [68,5,68,22], "code": "    release(?s->mutex)" },
    "176": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "658": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1281": { "file": "stackmon.hny", "line": "76", "column": "14", "endline": "76", "endcolumn": "14", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "784": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "55", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "589": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "319": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "663": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "stmt": [19,13,19,20], "code": "            !p = new" },
    "425": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "245": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1042": { "file": "stackmon.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "14", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "987": { "file": "stackmon.hny", "line": "3", "column": "1", "endline": "3", "endcolumn": "13", "stmt": [3,1,3,13], "code": "def Stack(l):" },
    "144": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "671": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "3", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "497": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "12", "stmt": [51,5,51,15], "code": "    result = bg" },
    "277": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "3", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "1375": { "file": "stacktest.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "3", "stmt": [26,1,26,24], "code": "for i in {1..NPUSH_OPEN}:" },
    "365": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "21", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "439": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1378": { "file": "stacktest.hny", "line": "27", "column": "21", "endline": "27", "endcolumn": "26", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "1415": { "file": "stacktest.hny", "line": "33", "column": "20", "endline": "33", "endcolumn": "21", "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "251": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "26", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "390": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "9", "endline": "20", "endcolumn": "16", "stmt": [20,9,20,18], "code": "        result = 0" },
    "437": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1382": { "file": "stacktest.hny", "line": "27", "column": "24", "endline": "27", "endcolumn": "26", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "1070": { "file": "stackmon.hny", "line": "36", "column": "10", "endline": "36", "endcolumn": "14", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "486": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "381": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "670": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "21", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "242": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "958": { "file": "stackmon.hny", "line": "10", "column": "16", "endline": "10", "endcolumn": "24", "stmt": [5,3,20,3], "code": "    .pop_cond: Condition()," },
    "364": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "330": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "64": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "426": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "332": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "44": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "12", "stmt": [8,1,8,12], "code": "def head(s):" },
    "872": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "1052": { "file": "stackmon.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "21", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "145": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "939": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "41", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "843": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "29", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "177": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "161": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "659": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "9", "endline": "17", "endcolumn": "16", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "498": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "10", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "392": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "12", "stmt": [22,1,22,23], "code": "builtin size \"bag$size\"" },
    "999": { "file": "stackmon.hny", "line": "26", "column": "11", "endline": "26", "endcolumn": "17", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "162": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "871": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "170": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1139": { "file": "stackmon.hny", "line": "51", "column": "9", "endline": "51", "endcolumn": "12", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "333": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "74": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "12", "stmt": [17,5,17,14], "code": "    result = 0" },
    "321": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "243": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "496": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "859": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "16", "stmt": [66,16,68,6], "code": "    atomically when !sema > 0:" },
    "320": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "391": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "26", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1365": { "file": "stacktest.hny", "line": "21", "column": "8", "endline": "21", "endcolumn": "25", "stmt": [21,5,21,26], "code": "    if stack.validate(?s):" },
    "595": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "39", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "785": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "677": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "22", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "605": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "46", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "945": { "file": "stackmon.hny", "line": "8", "column": "5", "endline": "19", "endcolumn": "22", "stmt": [5,3,20,3], "code": "    .mutex: Lock()," },
    "367": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "23", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "436": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "33": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1417": { "file": "stacktest.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "21", "stmt": [33,1,33,21], "code": "spawn validate_test()" },
    "1252": { "file": "stackmon.hny", "line": "72", "column": "3", "endline": "72", "endcolumn": "9", "stmt": [72,3,72,20], "code": "  acquire(?s->mutex)" },
    "1121": { "file": "stackmon.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "22", "stmt": [44,5,44,22], "code": "    release(?s->mutex)" },
    "535": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "20", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "488": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "21", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "538": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "9", "endline": "62", "endcolumn": "15", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "244": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "66": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1195": { "file": "stackmon.hny", "line": "59", "column": "9", "endline": "59", "endcolumn": "10", "stmt": [59,9,59,25], "code": "        if result == \"(\":" },
    "1351": { "file": "stacktest.hny", "line": "17", "column": "27", "endline": "17", "endcolumn": "30", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "331": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "167": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "76": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "14": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1266": { "file": "stackmon.hny", "line": "73", "column": "9", "endline": "73", "endcolumn": "30", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "1026": { "file": "stackmon.hny", "line": "29", "column": "29", "endline": "29", "endcolumn": "29", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "729": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "3", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "160": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1226": { "file": "stackmon.hny", "line": "64", "column": "16", "endline": "64", "endcolumn": "28", "stmt": [64,13,64,33], "code": "            s->problem_index = -1" },
    "598": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1161": { "file": "stackmon.hny", "line": "55", "column": "18", "endline": "55", "endcolumn": "21", "stmt": [55,9,55,31], "code": "        result = list.head(rev)" },
    "118": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1391": { "file": "stacktest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "3", "stmt": [28,1,28,25], "code": "for i in {1..NPUSH_CLOSE}:" },
    "1155": { "file": "stackmon.hny", "line": "54", "column": "29", "endline": "54", "endcolumn": "29", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "873": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "23": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "725": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "24", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "1145": { "file": "stackmon.hny", "line": "51", "column": "29", "endline": "51", "endcolumn": "29", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "1092": { "file": "stackmon.hny", "line": "38", "column": "36", "endline": "38", "endcolumn": "36", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "676": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "5", "endline": "22", "endcolumn": "12", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "724": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "596": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "149": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "534": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "14", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "612": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1171": { "file": "stackmon.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "23", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "1111": { "file": "stackmon.hny", "line": "43", "column": "20", "endline": "43", "endcolumn": "29", "stmt": [43,9,43,30], "code": "        notify(?s->valid_cond)" },
    "674": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "758": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "37", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "428": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1292": { "file": "stackmon.hny", "line": "76", "column": "40", "endline": "76", "endcolumn": "42", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "726": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "9", "endline": "37", "endcolumn": "18", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "594": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1216": { "file": "stackmon.hny", "line": "62", "column": "13", "endline": "62", "endcolumn": "23", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "1006": { "file": "stackmon.hny", "line": "27", "column": "7", "endline": "27", "endcolumn": "10", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "858": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "16", "stmt": [66,16,68,6], "code": "    atomically when !sema > 0:" },
    "489": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "17", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1066": { "file": "stackmon.hny", "line": "35", "column": "9", "endline": "35", "endcolumn": "21", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "396": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "stmt": [24,5,24,14], "code": "    result = 0" },
    "58": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "789": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "61", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "786": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "58", "endline": "52", "endcolumn": "58", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1325": { "file": "stacktest.hny", "line": "12", "column": "11", "endline": "12", "endcolumn": "33", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "1206": { "file": "stackmon.hny", "line": "61", "column": "24", "endline": "61", "endcolumn": "26", "stmt": [61,9,61,27], "code": "        elif result == \")\":" },
    "309": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "3", "stmt": [1,1,1,12], "code": "def empty():" },
    "1084": { "file": "stackmon.hny", "line": "37", "column": "28", "endline": "37", "endcolumn": "31", "stmt": [37,9,37,31], "code": "        s->ever_negative = True" },
    "435": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "429": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "18", "endline": "31", "endcolumn": "25", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1188": { "file": "stackmon.hny", "line": "58", "column": "9", "endline": "58", "endcolumn": "20", "stmt": [58,9,58,20], "code": "        s->size -= 1" },
    "1276": { "file": "stackmon.hny", "line": "74", "column": "29", "endline": "74", "endcolumn": "36", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "247": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "246": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "46": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1341": { "file": "stacktest.hny", "line": "15", "column": "23", "endline": "15", "endcolumn": "26", "stmt": [15,5,15,27], "code": "    print(\"call pop\", self)" },
    "944": { "file": "stackmon.hny", "line": "3", "column": "1", "endline": "3", "endcolumn": "13", "stmt": [3,1,3,13], "code": "def Stack(l):" },
    "536": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "22", "endline": "62", "endcolumn": "23", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "1315": { "file": "stacktest.hny", "line": "10", "column": "11", "endline": "10", "endcolumn": "33", "stmt": [10,5,10,34], "code": "    print(\"call push\", self, char)" },
    "1076": { "file": "stackmon.hny", "line": "36", "column": "30", "endline": "36", "endcolumn": "44", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "495": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "989": { "file": "stackmon.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "15", "stmt": [23,1,23,15], "code": "def push(s, c):" },
    "1056": { "file": "stackmon.hny", "line": "32", "column": "5", "endline": "32", "endcolumn": "16", "stmt": [32,5,32,16], "code": "    if c == \"(\":" },
    "848": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "17", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "314": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "12", "stmt": [1,1,1,12], "code": "def empty():" },
    "409": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "783": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "526": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "666": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "13", "endline": "19", "endcolumn": "16", "stmt": [19,13,19,20], "code": "            !p = new" },
    "1317": { "file": "stacktest.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "14", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "1272": { "file": "stackmon.hny", "line": "74", "column": "13", "endline": "74", "endcolumn": "25", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "841": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "649": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "12", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "1072": { "file": "stackmon.hny", "line": "36", "column": "10", "endline": "36", "endcolumn": "18", "stmt": [36,5,36,47], "code": "    if ((valid < 0) and (not s.ever_negative)):" },
    "494": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "1288": { "file": "stackmon.hny", "line": "76", "column": "46", "endline": "76", "endcolumn": "51", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "1039": { "file": "stackmon.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "1333": { "file": "stacktest.hny", "line": "12", "column": "11", "endline": "12", "endcolumn": "33", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "1117": { "file": "stackmon.hny", "line": "44", "column": "14", "endline": "44", "endcolumn": "14", "stmt": [44,5,44,22], "code": "    release(?s->mutex)" },
    "1020": { "file": "stackmon.hny", "line": "29", "column": "8", "endline": "29", "endcolumn": "12", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "147": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1328": { "file": "stacktest.hny", "line": "12", "column": "24", "endline": "12", "endcolumn": "27", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "586": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1361": { "file": "stacktest.hny", "line": "20", "column": "11", "endline": "20", "endcolumn": "25", "stmt": [20,5,20,26], "code": "    print(\"call validate\")" },
    "855": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "19", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "300": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "336": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "5", "endline": "5", "endcolumn": "12", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "303": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "93": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1183": { "file": "stackmon.hny", "line": "56", "column": "9", "endline": "56", "endcolumn": "18", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "929": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "17", "endline": "81", "endcolumn": "17", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1256": { "file": "stackmon.hny", "line": "72", "column": "3", "endline": "72", "endcolumn": "20", "stmt": [72,3,72,20], "code": "  acquire(?s->mutex)" },
    "1002": { "file": "stackmon.hny", "line": "26", "column": "22", "endline": "26", "endcolumn": "32", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "140": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "241": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "172": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "954": { "file": "stackmon.hny", "line": "9", "column": "26", "endline": "9", "endcolumn": "27", "stmt": [5,3,20,3], "code": "    .push_cond: Condition()," },
    "481": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "22", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "153": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "782": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "26", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "525": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "240": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1246": { "file": "stackmon.hny", "line": "68", "column": "5", "endline": "68", "endcolumn": "22", "stmt": [68,5,68,22], "code": "    release(?s->mutex)" },
    "1202": { "file": "stackmon.hny", "line": "60", "column": "13", "endline": "60", "endcolumn": "25", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "317": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1127": { "file": "stackmon.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "14", "stmt": [49,5,49,22], "code": "    acquire(?s->mutex)" },
    "1397": { "file": "stacktest.hny", "line": "29", "column": "24", "endline": "29", "endcolumn": "26", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "1355": { "file": "stacktest.hny", "line": "17", "column": "33", "endline": "17", "endcolumn": "33", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "408": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "1262": { "file": "stackmon.hny", "line": "73", "column": "20", "endline": "73", "endcolumn": "20", "stmt": [73,3,73,31], "code": "  while s->size != s->max_size:" },
    "1230": { "file": "stackmon.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "13", "stmt": [65,13,65,36], "code": "            s->ever_negative = False" },
    "388": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "315": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "1165": { "file": "stackmon.hny", "line": "55", "column": "18", "endline": "55", "endcolumn": "31", "stmt": [55,9,55,31], "code": "        result = list.head(rev)" },
    "853": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "780": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "31", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "722": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "171": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1327": { "file": "stacktest.hny", "line": "12", "column": "11", "endline": "12", "endcolumn": "33", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "842": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "615": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "21", "endline": "69", "endcolumn": "28", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1046": { "file": "stackmon.hny", "line": "32", "column": "5", "endline": "32", "endcolumn": "6", "stmt": [32,5,32,16], "code": "    if c == \"(\":" },
    "539": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "16", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "28": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1371": { "file": "stacktest.hny", "line": "24", "column": "7", "endline": "24", "endcolumn": "21", "stmt": [24,7,24,21], "code": "      print(\"boo :(\")" },
    "1151": { "file": "stackmon.hny", "line": "50", "column": "23", "endline": "50", "endcolumn": "9", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "955": { "file": "stackmon.hny", "line": "9", "column": "17", "endline": "9", "endcolumn": "27", "stmt": [5,3,20,3], "code": "    .push_cond: Condition()," },
    "1141": { "file": "stackmon.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "15", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "720": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "14", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "672": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "22", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "168": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1294": { "file": "stackmon.hny", "line": "76", "column": "3", "endline": "76", "endcolumn": "10", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "1214": { "file": "stackmon.hny", "line": "62", "column": "25", "endline": "62", "endcolumn": "25", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "854": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "5", "endline": "63", "endcolumn": "12", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "599": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1175": { "file": "stackmon.hny", "line": "56", "column": "38", "endline": "56", "endcolumn": "42", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "83": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1224": { "file": "stackmon.hny", "line": "63", "column": "9", "endline": "63", "endcolumn": "10", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "487": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "23", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "1345": { "file": "stacktest.hny", "line": "16", "column": "24", "endline": "16", "endcolumn": "24", "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "1105": { "file": "stackmon.hny", "line": "42", "column": "19", "endline": "42", "endcolumn": "27", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "1318": { "file": "stacktest.hny", "line": "11", "column": "16", "endline": "11", "endcolumn": "23", "stmt": [11,5,11,24], "code": "    stack.push(?s, char)" },
    "1010": { "file": "stackmon.hny", "line": "27", "column": "13", "endline": "27", "endcolumn": "24", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "1197": { "file": "stackmon.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "20", "stmt": [60,13,60,25], "code": "            s->valid -= 1" },
    "723": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "673": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "648": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "15", "stmt": [11,5,11,15], "code": "    atomically:" },
    "146": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1301": { "file": "stackmon.hny", "line": "78", "column": "3", "endline": "78", "endcolumn": "20", "stmt": [78,3,78,20], "code": "  release(?s->mutex)" },
    "1062": { "file": "stackmon.hny", "line": "35", "column": "9", "endline": "35", "endcolumn": "9", "stmt": [35,9,35,21], "code": "        s->valid -= 1" },
    "427": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "328": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "305": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "88": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1012": { "file": "stackmon.hny", "line": "27", "column": "28", "endline": "27", "endcolumn": "28", "stmt": [27,7,27,36], "code": "      wait(?s->push_cond, ?s->mutex)" },
    "1000": { "file": "stackmon.hny", "line": "26", "column": "22", "endline": "26", "endcolumn": "22", "stmt": [26,5,26,33], "code": "    while s->size >= s->max_size:" },
    "141": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "588": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "524": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "24", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "1377": { "file": "stacktest.hny", "line": "27", "column": "11", "endline": "27", "endcolumn": "19", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "852": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "302": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "38": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "660": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "18", "column": "12", "endline": "18", "endcolumn": "17", "stmt": [18,9,18,18], "code": "        if result:" },
    "257": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1090": { "file": "stackmon.hny", "line": "38", "column": "30", "endline": "38", "endcolumn": "34", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "1204": { "file": "stackmon.hny", "line": "59", "column": "9", "endline": "59", "endcolumn": "25", "stmt": [59,9,59,25], "code": "        if result == \"(\":" },
    "1244": { "file": "stackmon.hny", "line": "68", "column": "17", "endline": "68", "endcolumn": "21", "stmt": [68,5,68,22], "code": "    release(?s->mutex)" },
    "1308": { "file": "stacktest.hny", "line": "9", "column": "1", "endline": "9", "endcolumn": "26", "stmt": [9,1,9,26], "code": "def push_test(self, char):" },
    "584": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1177": { "file": "stackmon.hny", "line": "56", "column": "44", "endline": "56", "endcolumn": "46", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "438": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1398": { "file": "stacktest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "26", "stmt": [29,5,29,27], "code": "    spawn push_test(i, \")\")" },
    "1286": { "file": "stackmon.hny", "line": "76", "column": "13", "endline": "76", "endcolumn": "57", "stmt": [76,3,76,58], "code": "  result = ((s.ever_negative == false) and (s.valid == 0))" },
    "480": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "721": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "339": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "252": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1115": { "file": "stackmon.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "11", "stmt": [44,5,44,22], "code": "    release(?s->mutex)" },
    "175": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1147": { "file": "stackmon.hny", "line": "51", "column": "29", "endline": "51", "endcolumn": "36", "stmt": [51,9,51,37], "code": "        wait(?s->pop_cond, ?s->mutex)" },
    "585": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "253": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1212": { "file": "stackmon.hny", "line": "62", "column": "13", "endline": "62", "endcolumn": "25", "stmt": [62,13,62,25], "code": "            s->valid += 1" },
    "678": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "3", "stmt": [24,1,24,11], "code": "def Lock():" },
    "1086": { "file": "stackmon.hny", "line": "38", "column": "9", "endline": "38", "endcolumn": "9", "stmt": [38,9,38,37], "code": "        s->problem_index = (s.size-1)" },
    "420": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "856": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "3", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "781": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "30", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "664": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "stmt": [19,13,19,20], "code": "            !p = new" },
    "256": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1274": { "file": "stackmon.hny", "line": "74", "column": "29", "endline": "74", "endcolumn": "29", "stmt": [74,7,74,37], "code": "      wait(?s->valid_cond, ?s->mutex)" },
    "179": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "54": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "3", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "1347": { "file": "stacktest.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "11", "stmt": [16,5,16,25], "code": "    let v = stack.pop(?s):" },
    "1107": { "file": "stackmon.hny", "line": "42", "column": "8", "endline": "42", "endcolumn": "27", "stmt": [42,5,42,28], "code": "    if s.size == s.max_size:" },
    "1181": { "file": "stackmon.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "48", "stmt": [56,9,56,48], "code": "        s->stack = list.reversed(list.tail(rev))" },
    "587": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1331": { "file": "stacktest.hny", "line": "12", "column": "30", "endline": "12", "endcolumn": "33", "stmt": [12,5,12,34], "code": "    print(\"done push\", self, char)" },
    "1254": { "file": "stackmon.hny", "line": "72", "column": "15", "endline": "72", "endcolumn": "19", "stmt": [72,3,72,20], "code": "  acquire(?s->mutex)" },
    "484": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "851": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "679": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "11", "stmt": [24,1,24,11], "code": "def Lock():" },
    "98": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "174": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1022": { "file": "stackmon.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "19", "stmt": [29,5,29,40], "code": "    s->stack = list.append(?s->stack, c)" },
    "661": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "10", "stmt": [18,9,18,18], "code": "        if result:" },
    "142": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1307": { "file": "stacktest.hny", "line": "9", "column": "1", "endline": "9", "endcolumn": "3", "stmt": [9,1,9,26], "code": "def push_test(self, char):" },
    "849": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "3", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "1358": { "file": "stacktest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "19", "stmt": [14,1,14,19], "code": "def pop_test(self):" },
    "527": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "13", "endline": "59", "endcolumn": "13", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "1050": { "file": "stackmon.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "16", "stmt": [33,9,33,21], "code": "        s->valid += 1" },
    "424": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "10", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "421": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "13", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "667": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "399": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1135": { "file": "stackmon.hny", "line": "50", "column": "11", "endline": "50", "endcolumn": "17", "stmt": [50,5,50,23], "code": "    while s->size <= 0:" },
    "1222": { "file": "stackmon.hny", "line": "63", "column": "22", "endline": "63", "endcolumn": "36", "stmt": [63,9,63,37], "code": "        if s.size == s.problem_index:" },
    "857": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "12", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "482": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "21", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "301": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "43", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "255": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1167": { "file": "stackmon.hny", "line": "55", "column": "9", "endline": "55", "endcolumn": "16", "stmt": [55,9,55,31], "code": "        result = list.head(rev)" },
    "1040": { "file": "stackmon.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,16], "code": "    s->size += 1" },
    "1348": { "file": "stacktest.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "33", "stmt": [17,9,17,34], "code": "        print(\"done pop\", self, v)" },
    "1157": { "file": "stackmon.hny", "line": "54", "column": "29", "endline": "54", "endcolumn": "35", "stmt": [54,5,54,36], "code": "    let rev = list.reversed(s.stack):" },
    "254": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "33", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "423": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "422": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "18", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "1385": { "file": "stacktest.hny", "line": "27", "column": "5", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,27], "code": "    spawn push_test(i, \"(\")" },
    "1367": { "file": "stacktest.hny", "line": "22", "column": "13", "endline": "22", "endcolumn": "23", "stmt": [22,7,22,24], "code": "      print(\"hooray :)\")" },
    "528": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "13", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "306": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "850": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "19", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "1232": { "file": "stackmon.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "28", "stmt": [65,13,65,36], "code": "            s->ever_negative = False" },
    "483": { "file": "/opt/homebrew/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "14", "stmt": [47,9,47,23], "code": "        result[elt] = 1" }
  }
}
