from synch import BinSema, acquire, release
import list

def Stack(l):
  # return an empty stack with maximum size l
  result = {

    # EVERYTHING HERE HAS TO DO WITH BINARY SEMAPHORE LOCKING:
    .mutex: BinSema(False), #main gate
    .push_gate: { .sema: BinSema(True), .count: 0 },
    .pop_gate: { .sema: BinSema(True), .count: 0 },
    .validate_gate: { .sema: BinSema(True), .count: 0 },

    # EVERYTHING HERE HAS TO DO WITH STACK:
    .stack: [],
    .size: 0, # how do we make sure the max size is l
    .max_size: l, # capture maxSize parameter
    .valid: 0,#+1 to this when '(' and -1 when ')'
    .ever_negative: False, #whenever pushing, check after if valid is negative and if so make True
    .problem_index: -1

  }

def push(s, c):
  # wait until the stack is not full, then push c onto !s
  acquire(?s->mutex)
  if (not (s->size < s->max_size)):
    s->push_gate.count += 1
    release(?s->mutex)
    acquire(?s->push_gate.sema)
    s->push_gate.count -= 1

  # BEGIN push logic
  s->stack = list.append(s->stack, c)
  # update stack auxillary variables
  s->size += 1
  if c == "(":
      s->valid += 1
  elif c == ")":
      s->valid -= 1
  if ((s->valid < 0) and (not (s->ever_negative))):
      s->ever_negative = True
      s->problem_index = (s->size-1)
  # END push logic
  release_one(s)

def pop(s):
  # wait until a stack is non-empty and then remove and return the top of the stack
  acquire(?s->mutex)
  if (not (s->size > 0)):
    s->pop_gate.count += 1
    release(?s->mutex)                                                            
    acquire(?s->pop_gate.sema)
    s->pop_gate.count -= 1
  # BEGIN pop logic
  let rev = list.reversed(s->stack):
      result = list.head(rev)
      s->stack = list.reversed(list.tail(rev))
      # update stack auxillary variables
      s->size -= 1
      if result == "(":
          s->valid -= 1
      elif result == ")":
          s->valid += 1
      if s->size == s->problem_index:
          s->problem_index = -1
          s->ever_negative = False
  # END pop logic
  release_one(s)

def validate(s):
  # wait until stack !s is full, then check if its valid
  acquire(?s->mutex)
  if (not (s->size == s->max_size)):
    s->validate_gate.count += 1
    release(?s->mutex)
    acquire(?s->validate_gate.sema)
    s->validate_gate.count -= 1
  # BEGIN validation logic
  result = ((s->ever_negative == False) and (s->valid == 0))
  # END validation logic
  release_one(s)

def release_one(s):
  if (s->size != s->max_size) and (s->push_gate.count > 0):
    release(?s->push_gate.sema)
  elif (s->size != 0) and (s->pop_gate.count > 0):
    release(?s->pop_gate.sema)
  elif (s->size == s->max_size) and (s->validate_gate.count > 0):
    release(?s->validate_gate.sema)
  else:
    release(?s->mutex)