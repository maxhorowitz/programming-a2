from synch import BinSema, acquire, release



def Stack(l):
  # return an empty stack with maximum size l
  result = {
    .size: 0, # how do we make sure the max size is l
    .max_size: l, # capture maxSize parameter
    .valid: 0,#+1 to this when '(' and -1 when ')'
    .ever_negative: False, #whenever pushing, check after if valid is negative and if so make True
    .mutex: BinSema(False), #main gate
    .push_gate: { .sema: BinSema(True), .count: 0 },
    .pop_gate: { .sema: BinSema(True), .count: 0 },
    .validate_gate: { .sema: BinSema(True), .count: 0 },
  }

def push(s, c):
  # wait until the stack is not full, then push c onto !s

def pop(s):
  # wait until a stack is non-empty and then remove and return the top of the stack

def validate(s):
  # wait until stack !s is full, then check if its valid

def release_one(?):




